<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代码经验</title>
      <link href="/2024/10/20/dai-ma-jing-yan/"/>
      <url>/2024/10/20/dai-ma-jing-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="代码经验"><a href="#代码经验" class="headerlink" title="代码经验"></a>代码经验</h1><h2 id="MyBatisPlus-or-和-like-在一个条件里"><a href="#MyBatisPlus-or-和-like-在一个条件里" class="headerlink" title="MyBatisPlus or 和 like 在一个条件里"></a>MyBatisPlus or 和 like 在一个条件里</h2><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>TToxicologicalReport<span class="token operator">></span> list <span class="token operator">=</span> toxicologicalReportService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span><span class="token function">TToxicologicalReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TToxicologicalReport<span class="token operator">:</span><span class="token operator">:</span>getForm<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">-</span><span class="token operator">></span> w<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>TToxicologicalReport<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> params<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>TToxicologicalReport<span class="token operator">:</span><span class="token operator">:</span>getYears<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span>TToxicologicalReport<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit 10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> w <span class="token operator">-</span><span class="token operator">></span> w<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>TReport<span class="token operator">:</span><span class="token operator">:</span>getNumber<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>TReport<span class="token operator">:</span><span class="token operator">:</span>getCompanyName<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>其实可以发现，就是把 or 和 like ，放到一个 and 里面。</strong></p><h2 id="内部类在-Mapper-层的使用"><a href="#内部类在-Mapper-层的使用" class="headerlink" title="内部类在 Mapper 层的使用"></a>内部类在 Mapper 层的使用</h2><ul><li>内部类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据源 DTO */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculateDetailVO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"主键"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"核算报告表ID"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer reportId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"排放源附件"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>CalculateFileVO<span class="token operator">></span> sourceFile <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数据源附件 DTO     */</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CalculateFileVO</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"主键"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>        <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"附件文件id"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> Integer fileId<span class="token punctuation">;</span>        <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"附件文件名"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> String fileName<span class="token punctuation">;</span>        <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"附件文件名地址"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> String fileUrl<span class="token punctuation">;</span>        <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"类别（1-核算数据表附件，2-自定义因子附件）"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> Integer type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Mapper 层</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>CalculateDetailVO<span class="token punctuation">.</span>CalculateFileVO<span class="token operator">></span> <span class="token function">getFiles</span><span class="token punctuation">(</span>Integer otherId<span class="token punctuation">,</span> Integer type<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getFiles<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.haifanbpm.standard.model.vo.CalculateDetailVO$CalculateFileVO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>resultType 中内部类的引用是：<code>CalculateDetailVO$CalculateFileVO</code> 。</strong></p><h2 id="List-判重方法"><a href="#List-判重方法" class="headerlink" title="List 判重方法"></a>List 判重方法</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * List 判重方法 * @param &lt;T> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListDistUtils</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ListDistUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断List内是否有数据重复     * @param rawList     * @param mapLogic     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">distList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> rawList<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> mapLogic<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> rawList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> mapLogic<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 使用*/</span>ListDistUtils<span class="token operator">&lt;</span>EmissionUpdateDTO<span class="token punctuation">.</span>FactorsParamDTO<span class="token operator">></span> listParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListDistUtils</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listParam<span class="token punctuation">.</span><span class="token function">distList</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getFactorsParamList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> EmissionUpdateDTO<span class="token punctuation">.</span>FactorsParamDTO<span class="token operator">:</span><span class="token operator">:</span> getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> dto<span class="token punctuation">.</span><span class="token function">getFactorsParamList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JeecgBootException</span><span class="token punctuation">(</span><span class="token string">"排放因子参数有重复的数据！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="MyBatisPlus-的两种删除"><a href="#MyBatisPlus-的两种删除" class="headerlink" title="MyBatisPlus 的两种删除"></a>MyBatisPlus 的两种删除</h2><ul><li>第一种</li></ul><pre class=" language-java"><code class="language-java">factorsDataService<span class="token punctuation">.</span><span class="token function">removeByIds</span><span class="token punctuation">(</span>factorsDataService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span>TFactorsData<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TFactorsData<span class="token operator">:</span><span class="token operator">:</span>getEmissId<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>TFactorsData<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>第二种</li></ul><pre class=" language-java"><code class="language-java">calculateFileService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span>TCalculateFile<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TCalculateFile<span class="token operator">:</span><span class="token operator">:</span>getCalculateId<span class="token punctuation">,</span> tCalculate<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TCalculateFile<span class="token operator">:</span><span class="token operator">:</span>getType<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="List-去重"><a href="#List-去重" class="headerlink" title="List 去重"></a>List 去重</h2><ul><li>第一种</li></ul><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>TReportRanges<span class="token operator">:</span><span class="token operator">:</span>getRanges<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>第二种</li></ul><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>TReportRanges<span class="token operator">:</span><span class="token operator">:</span>getRanges<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ul><li>第三种</li></ul><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>TReportRanges<span class="token operator">:</span><span class="token operator">:</span>getRanges<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="关于返回-List-数据的封装"><a href="#关于返回-List-数据的封装" class="headerlink" title="关于返回 List 数据的封装"></a>关于返回 List 数据的封装</h2><ul><li>方式一</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>ProvinceVO<span class="token operator">></span> <span class="token function">getProvinceTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>TProvince<span class="token operator">></span> list <span class="token operator">=</span> provinceService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entity <span class="token operator">-</span><span class="token operator">></span> entity<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>entity <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        ProvinceVO provinceVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProvinceVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceVO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceVO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceVO<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getChildren</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> provinceVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>方式二</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>ProvinceVO<span class="token operator">></span> <span class="token function">getProvinceTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>TProvince<span class="token operator">></span> list <span class="token operator">=</span> provinceService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ProvinceVO<span class="token operator">></span> voList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>m <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        ProvinceVO provinceVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProvinceVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceVO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceVO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        provinceVO<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getChildren</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        voList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>provinceVO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> voList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方式一：使用 JDK8 的 stream() 方式进行处理。</p><p>方式二：使用传统的 List 进行数据封装。</p><p>使用 JDK8 的 stream() 方式，代码会更加简洁，但可读性相对来说不是很好，例如下面一段代码。</p><pre class=" language-java"><code class="language-java">tAppList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entity <span class="token operator">-</span><span class="token operator">></span> entity<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    appToolList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>appMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span>TApp<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TApp<span class="token operator">:</span><span class="token operator">:</span>getParentId<span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="子表的保存-更新"><a href="#子表的保存-更新" class="headerlink" title="子表的保存/更新"></a>子表的保存/更新</h2><ul><li>方式一</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 先删除</span>numberColumnService<span class="token punctuation">.</span><span class="token function">removeBatchByIds</span><span class="token punctuation">(</span>numberColumnService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span>TNumberColumn<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TNumberColumn<span class="token operator">:</span><span class="token operator">:</span>getColumnId<span class="token punctuation">,</span> tColumn<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在保存</span><span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dto<span class="token punctuation">.</span><span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        TNumberColumn numberColumn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TNumberColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumn<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumn<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumn<span class="token punctuation">.</span><span class="token function">setColumnId</span><span class="token punctuation">(</span>tColumn<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumnService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>numberColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>方式二</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 直接使用 saveOrUpdate 进行保存/更新</span><span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dto<span class="token punctuation">.</span><span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        TNumberColumn numberColumn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TNumberColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumn<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumn<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumn<span class="token punctuation">.</span><span class="token function">setColumnId</span><span class="token punctuation">(</span>tColumn<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numberColumnService<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>numberColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方式一：先删除之前的数据，在保存最新的数据。</p><p>方式二：直接通过方法 saveOrUpdate 进行保存/更新操作。</p><h2 id="try-catch-和-try-catch"><a href="#try-catch-和-try-catch" class="headerlink" title="try { } catch { } 和 try( ) { } catch { }"></a>try { } catch { } 和 try( ) { } catch { }</h2><ul><li>方式一</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">setMd5</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算MD5</span>    MessageDigest md <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> md5Bytes <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder md5Hex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> md5Bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        md5Hex<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> md5Hex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>方式二</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">setMd5</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchAlgorithmException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算MD5</span>    MessageDigest md <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> md5Bytes <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder md5Hex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> md5Bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        md5Hex<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> md5Hex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方式一：使用 try () {} catch {} 的方式，如果操作文件流相关的类，那么不需要手动关闭文件流。 </p><p>方式二：使用 try {} catch {} 的方式，如果操作文件流相关的类，那么需要手动关闭文件流。</p><p><strong>如果方法里有事务并且还有 try catch 块，这个时候，错误最好往上抛出，而不是捕获。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限设计</title>
      <link href="/2024/10/20/quan-xian-she-ji/"/>
      <url>/2024/10/20/quan-xian-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="权限设计"><a href="#权限设计" class="headerlink" title="权限设计"></a>权限设计</h1><ul><li>登录认证</li></ul><p>登录认证是对用户身份进行确认。</p><ul><li>权限认证</li></ul><p>权限认证是对用户能否访问某个资源进行确认，一般在用户登录成功之后进行。</p><h2 id="RBAC-模型"><a href="#RBAC-模型" class="headerlink" title="RBAC 模型"></a>RBAC 模型</h2><p>用户，角色，权限。在这种设计模式下，用户不直接拥有权限，权限是赋值给角色的，用户只能具有某种角色后，才能获取对应角色的权限。</p><p><strong>用户和角色是多对多的关系</strong>，<strong>角色与权限也是多对多的关系</strong>，<strong>用户通过角色来关联到权限。</strong></p><ul><li>数据库的设计如下：</li></ul><p><img src="/2024/10/20/quan-xian-she-ji/%E7%94%A8%E6%88%B7-%E8%A7%92%E8%89%B2-%E6%9D%83%E9%99%90.jpg" alt="用户-角色-权限"></p><h2 id="页面权限"><a href="#页面权限" class="headerlink" title="页面权限"></a>页面权限</h2><p>权限表内存储的是前端对应页面的 url，在用户登录时，把用户信息返回给前端，有前端控制是否展示对应的界面。</p><h2 id="操作权限"><a href="#操作权限" class="headerlink" title="操作权限"></a>操作权限</h2><p>权限表内存储是后端对应接口的地址，在用户登录时，把用户信息返回给前端，有前端控制是否展示对应的按钮。</p><h2 id="数据权限"><a href="#数据权限" class="headerlink" title="数据权限"></a>数据权限</h2><p>数据权限说直白点就是哪些人能看到什么数据。</p><blockquote><p>例如：有一张数据表和公司表，数据表里有<code>company_id</code>字段，当前用户能看到哪些公司的数据，只需要增加一个用户和公司的关联表，然后在 SQL 查询的时候，<code>SELECT * FROM data WHERE company_id in (?, ?, ?...) ORDER BY create_time DESC LIMIT ?,?</code> 即可实现。</p></blockquote><p><strong>注意事项</strong></p><ol><li>无论是角色表还是权限表，都需要存储对应角色或权限的标识码。</li><li>权限一般分为：目录，菜单，按钮，只有对应按钮才会触发后端的方法，因此权限表内存储的按钮信息，需要存储对应的标识码（sys:user:add：用户新增），其它类型的可以不存。</li><li>在给用户分配菜单时，要么默认菜单上的按钮全部分配，要么默认都不分配。不能只分配菜单，不处理菜单上的按钮。</li><li>权限要做好分层的设计。</li><li>目录，菜单，按钮的权限有前端控制是否展示，但按钮触发的接口后端也需要校验。</li></ol><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="用户登录时把用户的权限码给用户"><a href="#用户登录时把用户的权限码给用户" class="headerlink" title="用户登录时把用户的权限码给用户"></a>用户登录时把用户的权限码给用户</h3><ul><li>设置用户的权限码，其实就是用户能够访问的接口在权限表内的标识码，这一步主要为了后续的校验。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 保存用户登录日志 生成 Token 信息</span>LoginUser loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>loginUser<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>loginUser<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>loginUser<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置用户的权限码，其实就是用户能够访问的接口在权限表内的标识码，这一步主要为了后续的校验</span>loginUser<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>sysMenuService<span class="token punctuation">.</span><span class="token function">getMenuByUserId</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sysUserLoginLogsService<span class="token punctuation">.</span><span class="token function">setSysUserLoginLogs</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>sysUserService<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="返回用户-角色-权限-树形信息"><a href="#返回用户-角色-权限-树形信息" class="headerlink" title="返回用户-角色-权限 树形信息"></a>返回用户-角色-权限 树形信息</h3><ul><li>用户登录后，前端请求该接口，拿到用户能够看到的数据，其中包括：用户信息，用户角色信息，对应角色下的权限信息，重叠的数据取并集。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 用户登录后，前端请求该接口，拿到用户能够看到的数据，其中包括：用户基本信息，用户角色基本信息，对应角色下的权限信息，重叠的数据取并集</span><span class="token keyword">public</span> SysUserRoleMenuTreeVO <span class="token function">getUserRoleMenuTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LoginUser loginUser <span class="token operator">=</span> LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TSysUser tSysUser <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SysUserRoleMenuTreeVO vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUserRoleMenuTreeVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">,</span> vo<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>SysRoleVO<span class="token operator">></span> rolesList <span class="token operator">=</span> sysRoleService<span class="token punctuation">.</span><span class="token function">getRolesByUserId</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rolesList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>m <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        m<span class="token punctuation">.</span><span class="token function">setMenus</span><span class="token punctuation">(</span><span class="token function">buildTree</span><span class="token punctuation">(</span>sysMenuService<span class="token punctuation">.</span><span class="token function">getMenuTreeByRoleId</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vo<span class="token punctuation">.</span><span class="token function">setRoles</span><span class="token punctuation">(</span>rolesList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> vo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 封装数据树形方法</span><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>SysMenuVO<span class="token operator">></span> <span class="token function">buildTree</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>SysMenuVO<span class="token operator">></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> SysMenuVO<span class="token operator">></span> parentTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>SysMenuVO<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SysMenuVO data <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">{</span>        parentTree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SysMenuVO data <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            SysMenuVO vo <span class="token operator">=</span> parentTree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">)</span> vo<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> children<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="定义后端接口校验方法"><a href="#定义后端接口校验方法" class="headerlink" title="定义后端接口校验方法"></a>定义后端接口校验方法</h3><ul><li>权限注解的校验模式</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 权限注解的验证模式 * */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Logical <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 必须具有所有的元素     */</span>    AND<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 只需具有其中一个元素     */</span>    OR<span class="token punctuation">}</span></code></pre><ul><li>权限认证接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 权限认证：必须具有指定权限才能进入该方法 * */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RequiresPermissions</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 需要校验的权限码     */</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 验证模式：AND | OR，默认AND     */</span>    Logical <span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Logical<span class="token punctuation">.</span>AND<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>角色认证接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 角色认证：必须具有指定角色标识才能进入该方法 * */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RequiresRoles</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 需要校验的角色标识     */</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 验证逻辑：AND | OR，默认AND     */</span>    Logical <span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Logical<span class="token punctuation">.</span>AND<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义权限/角色认证出错的异常类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 未能通过的权限认证异常 * * @author ruoyi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotPermissionException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NotPermissionException</span><span class="token punctuation">(</span>String permission<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">NotPermissionException</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>permissions<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 未能通过的角色认证异常 * * @author ruoyi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotRoleException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NotRoleException</span><span class="token punctuation">(</span>String role<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">NotRoleException</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>roles<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 封装的接口类里需要增加这两个类</span><span class="token comment" spellcheck="true">/**     * 权限的校验     * @param notPermissionException     * @return     */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>NotPermissionException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> R<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">notPermissionException</span><span class="token punctuation">(</span>NotPermissionException notPermissionException<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>notPermissionException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>notPermissionException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * 角色的校验     * @param notRoleException     * @return     */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>NotRoleException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> R<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">notRoleException</span><span class="token punctuation">(</span>NotRoleException notRoleException<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>notRoleException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>notRoleException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>基于 AOP 注解校验类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 基于 Spring Aop 的注解鉴权 * */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreAuthorizeAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 构建     */</span>    <span class="token keyword">public</span> <span class="token function">PreAuthorizeAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 定义AOP签名 (切入所有使用鉴权注解的方法)     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String POINTCUT_SIGN <span class="token operator">=</span> <span class="token string">"@annotation(com.rhx.manage.config.auth.RequiresPermissions) || "</span> <span class="token operator">+</span> <span class="token string">"@annotation(com.rhx.manage.config.auth.RequiresRoles)"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 声明AOP签名     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>POINTCUT_SIGN<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕切入     *     * @param joinPoint 切面对象     * @return 底层方法执行后的返回值     * @throws Throwable 底层方法抛出的异常     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注解鉴权</span>        <span class="token function">checkMethodAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行原有逻辑</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对一个Method对象进行注解检查     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkMethodAnnotation</span><span class="token punctuation">(</span>Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 校验 @RequiresRoles 注解</span>        RequiresRoles requiresRoles <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RequiresRoles<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>requiresRoles<span class="token punctuation">)</span><span class="token punctuation">)</span> AuthUtils<span class="token punctuation">.</span><span class="token function">checkRole</span><span class="token punctuation">(</span>requiresRoles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 校验 @RequiresPermissions 注解</span>        RequiresPermissions requiresPermissions <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RequiresPermissions<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">)</span><span class="token punctuation">)</span> AuthUtils<span class="token punctuation">.</span><span class="token function">checkPermi</span><span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>公共接口类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 权限校验公共方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据角色鉴权     * @param requiresRoles     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkRole</span><span class="token punctuation">(</span>RequiresRoles requiresRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requiresRoles<span class="token punctuation">.</span><span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Logical<span class="token punctuation">.</span>AND<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkRoleAnd</span><span class="token punctuation">(</span>requiresRoles<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">checkRoleOr</span><span class="token punctuation">(</span>requiresRoles<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证用户是否含有指定角色，必须全部拥有     *     * @param roles 角色标识数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkRoleAnd</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> roleList <span class="token operator">=</span> <span class="token function">getRoleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String role <span class="token operator">:</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasRole</span><span class="token punctuation">(</span>roleList<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotRoleException</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证用户是否含有指定角色，只需包含其中一个     *     * @param roles 角色标识数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkRoleOr</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> roleList <span class="token operator">=</span> <span class="token function">getRoleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String role <span class="token operator">:</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasRole</span><span class="token punctuation">(</span>roleList<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>roles<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotRoleException</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取当前账号的角色列表     *     * @return 角色列表     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getRoleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            LoginUser loginUser <span class="token operator">=</span> LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> loginUser<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断是否包含角色     *     * @param roles 角色列表     * @param role  角色     * @return 用户是否具备某角色权限     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasRole</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> roles<span class="token punctuation">,</span> String role<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>StringUtils<span class="token operator">:</span><span class="token operator">:</span>hasText<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> PatternMatchUtils<span class="token punctuation">.</span><span class="token function">simpleMatch</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 校验用户权限     * @param requiresPermissions     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkPermi</span><span class="token punctuation">(</span>RequiresPermissions requiresPermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">.</span><span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Logical<span class="token punctuation">.</span>AND<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkPermiAnd</span><span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">checkPermiOr</span><span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证用户是否含有指定权限，必须全部拥有     *     * @param permissions 权限列表     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkPermiAnd</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> permissionList <span class="token operator">=</span> <span class="token function">getPermiList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String permission <span class="token operator">:</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPermi</span><span class="token punctuation">(</span>permissionList<span class="token punctuation">,</span> permission<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotPermissionException</span><span class="token punctuation">(</span><span class="token string">"无对应权限: "</span> <span class="token operator">+</span> permission<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证用户是否含有指定权限，只需包含其中一个     *     * @param permissions 权限码数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkPermiOr</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> permissionList <span class="token operator">=</span> <span class="token function">getPermiList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String permission <span class="token operator">:</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasPermi</span><span class="token punctuation">(</span>permissionList<span class="token punctuation">,</span> permission<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotPermissionException</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断是否包含权限     *     * @param authorities 权限列表     * @param permission  权限字符串     * @return 用户是否具备某权限     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasPermi</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> authorities<span class="token punctuation">,</span> String permission<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>authorities<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotPermissionException</span><span class="token punctuation">(</span><span class="token string">"无对应权限: "</span> <span class="token operator">+</span> permission<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> authorities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>StringUtils<span class="token operator">:</span><span class="token operator">:</span>hasText<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> PatternMatchUtils<span class="token punctuation">.</span><span class="token function">simpleMatch</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> permission<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取当前账号的权限列表     *     * @return 权限列表     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getPermiList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            LoginUser loginUser <span class="token operator">=</span> LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> loginUser<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>接口使用</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** @RequiresPermissions(value = "sys:user:page")* @RequiresPermissions(value = "sys:user:page", logical = Logical.OR)* 使用的时候，注意上述两种注解的区别*/</span><span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"sys:user:page"</span><span class="token punctuation">,</span> logical <span class="token operator">=</span> Logical<span class="token punctuation">.</span>OR<span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"注册用户分页查询"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/page"</span><span class="token punctuation">)</span><span class="token keyword">public</span> R<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getSysUserPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> SysUserPageDTO pageDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>sysUserHandler<span class="token punctuation">.</span><span class="token function">getSysUserPage</span><span class="token punctuation">(</span>pageDTO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>当对用户的角色信息操作时，已登录的用户如何感知？</p><ul><li>方案一</li></ul><p>增加拦截器，每次的接口访问都对用户的角色信息进行校验，然后把信息存储到 Redis 内，当操作用户的角色信息时，及时更新或者刷新缓存。</p><ul><li>方案二</li></ul><p>操作用户角色信息后，强制用户下线，然后重新登录。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 权限设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目经验-注册登录</title>
      <link href="/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/"/>
      <url>/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="项目经验-用户注册-登录"><a href="#项目经验-用户注册-登录" class="headerlink" title="项目经验-用户注册-登录"></a>项目经验-用户注册-登录</h1><h2 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h2><p>用户点击注册，系统将密码加密，然后保存到数据库。（这里没有校验用户重复情况）</p><p><img src="/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/%E6%B3%A8%E5%86%8C.png" alt="注册"></p><h2 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h2><p>用户登录，校验密码，生成 Token。</p><p><img src="/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/%E7%99%BB%E5%BD%95.png" alt="登录"></p><h2 id="校验流程"><a href="#校验流程" class="headerlink" title="校验流程"></a>校验流程</h2><p>通过拦截器校验每次用户访问的 Token。</p><p><img src="/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/%E6%A0%A1%E9%AA%8C.png" alt="校验"></p><h2 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h2><p>其实这里也可以不使用 Shiro，而只是使用 SpringBoot 自身的拦截器去实现。</p><h3 id="定义工具类：SecurityUtils"><a href="#定义工具类：SecurityUtils" class="headerlink" title="定义工具类：SecurityUtils"></a>定义工具类：SecurityUtils</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SecurityUtils 工具类 * 获取 Token 和密码加密 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取请求token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getToken</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>ServletUtils<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据request获取请求token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getToken</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从 Hearder 中获取</span>        String header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从 Parameter 中获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从 Cookie 中获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Request Token Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    header <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 都为空的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Request Token Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>header<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Request Token Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JwtUtils<span class="token punctuation">.</span><span class="token function">getUserKey</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成BCryptPasswordEncoder密码     *     * @param password 密码     * @return 加密字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encryptPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        BCryptPasswordEncoder passwordEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断密码是否相同     *     * @param rawPassword 真实密码     * @param encodedPassword 加密后字符     * @return 结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">matchesPassword</span><span class="token punctuation">(</span>String rawPassword<span class="token punctuation">,</span> String encodedPassword<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        BCryptPasswordEncoder passwordEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>rawPassword<span class="token punctuation">,</span> encodedPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定义工具类：JwtUtils"><a href="#定义工具类：JwtUtils" class="headerlink" title="定义工具类：JwtUtils"></a>定义工具类：JwtUtils</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Jwt工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String secret <span class="token operator">=</span> TokenConstants<span class="token punctuation">.</span>SECRET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从数据声明生成令牌     *     * @param claims 数据声明     * @return 令牌     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">createToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从令牌中获取数据声明     *     * @param token 令牌     * @return 数据声明     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">parseToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户标识     *      * @param token 令牌     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserKey</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户标识     *      * @param claims 身份信息     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserKey</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户ID     *      * @param token 令牌     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserId</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据身份信息获取用户ID     *      * @param claims 身份信息     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserId</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户名     *      * @param token 令牌     * @return 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_PHONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据身份信息获取用户名     *      * @param claims 身份信息     * @return 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_PHONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据身份信息获取键值     *      * @param claims 身份信息     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getValue</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">,</span> String key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定义拦截器：LoginInterceptor"><a href="#定义拦截器：LoginInterceptor" class="headerlink" title="定义拦截器：LoginInterceptor"></a>定义拦截器：LoginInterceptor</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接口拦截器 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisUtils redisUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先从缓存中获取数据</span>        String token <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> RedisConstants<span class="token punctuation">.</span>LOGIN_TOKEN_KEY <span class="token operator">+</span> token<span class="token punctuation">;</span>        LoginUser loginUser <span class="token operator">=</span> <span class="token punctuation">(</span>LoginUser<span class="token punctuation">)</span> redisUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LoginUserUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"User Token Is Expires"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LoginUserUtils<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="启用拦截器：LoginConfig"><a href="#启用拦截器：LoginConfig" class="headerlink" title="启用拦截器：LoginConfig"></a>启用拦截器：LoginConfig</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 启用拦截器 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> LoginInterceptor loginInterceptor<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 显示 swagger<span class="token operator">-</span>ui<span class="token punctuation">.</span>html文档展示页，还必须注入 swagger 资源     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"swagger-ui.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"doc.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="注册登录流程"><a href="#注册登录流程" class="headerlink" title="注册登录流程"></a>注册登录流程</h3><p><img src="/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/%E6%B3%A8%E5%86%8C-%E7%99%BB%E5%BD%95.png" alt="注册-登录"></p><h3 id="验证校验流程"><a href="#验证校验流程" class="headerlink" title="验证校验流程"></a>验证校验流程</h3><p><img src="/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C.png" alt="验证码校验"></p><h3 id="业务请求流程"><a href="#业务请求流程" class="headerlink" title="业务请求流程"></a>业务请求流程</h3><p><img src="/2024/04/15/xiang-mu-jing-yan-zhu-ce-deng-lu/%E4%B8%9A%E5%8A%A1%E8%AF%B7%E6%B1%82Token.png" alt="业务请求Token"></p><ul><li>参考</li></ul><blockquote><p><a href="https://juejin.cn/post/7158077107958972424" target="_blank" rel="noopener">https://juejin.cn/post/7158077107958972424</a></p><p><a href="https://juejin.cn/post/7025768845075808286" target="_blank" rel="noopener">https://juejin.cn/post/7025768845075808286</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目经验-开发细节</title>
      <link href="/2024/04/13/xiang-mu-jing-yan-kai-fa-xi-jie/"/>
      <url>/2024/04/13/xiang-mu-jing-yan-kai-fa-xi-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="项目经验-开发细节"><a href="#项目经验-开发细节" class="headerlink" title="项目经验-开发细节"></a>项目经验-开发细节</h1><h2 id="MybatisPlus-中-Param-用和不用的区别"><a href="#MybatisPlus-中-Param-用和不用的区别" class="headerlink" title="MybatisPlus 中 @Param 用和不用的区别"></a>MybatisPlus 中 @Param 用和不用的区别</h2><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><pre class=" language-java"><code class="language-java">User <span class="token function">getUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml 里的 SQL 语句，加不加 @Param 都可以。</p><pre class=" language-xml"><code class="language-xml">and name = #{name}</code></pre><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>加 @Param</li></ul><pre class=" language-java"><code class="language-java">User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml 里的 SQL 语句，加 @Param 获取的是对象属性。</p><pre class=" language-xml"><code class="language-xml">and name = #{user.name}</code></pre><ul><li>不加 @Param</li></ul><pre class=" language-java"><code class="language-java">User <span class="token function">getUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml 里的 SQL 语句，不加 @Param 直接使用对象属性。</p><pre class=" language-xml"><code class="language-xml">and name = #{name}</code></pre><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><ul><li>不加 @Param</li></ul><pre class=" language-java"><code class="language-java">User <span class="token function">getUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml 里的 SQL 语句。</p><pre class=" language-xml"><code class="language-xml">id = #{param1} and name = #{param2}<span class="token comment" spellcheck="true">&lt;!-- 或者这样写也可以 --></span>id = #{id} and name = #{name}</code></pre><ul><li>加 @Param</li></ul><pre class=" language-java"><code class="language-java">User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml 里的 SQL 语句。</p><pre class=" language-xml"><code class="language-xml">id = #{param1} and name = #{param2}<span class="token comment" spellcheck="true">&lt;!-- 或者这样写也可以 --></span>id = #{id} and name = #{name}</code></pre><h3 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h3><pre class=" language-java"><code class="language-java">User <span class="token function">getUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml 里的 SQL 语句，加不加 @Param 都是通过对象获取。</p><pre class=" language-xml"><code class="language-xml">id = #{id} and name = #{user.name}</code></pre><h2 id="MyBatisPlus-自动填充"><a href="#MyBatisPlus-自动填充" class="headerlink" title="MyBatisPlus 自动填充"></a>MyBatisPlus 自动填充</h2><ul><li>实体类对应字段添加注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"创建人"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> String createBy<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"更新人"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> String updateBy<span class="token punctuation">;</span></code></pre><ul><li>定义类继承 MetaObjectHandler</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createBy"</span><span class="token punctuation">,</span> LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateBy"</span><span class="token punctuation">,</span> LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateBy"</span><span class="token punctuation">,</span> LoginUserUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="项目-A-在-Redis-内的-Token-信息，项目-B-去获取，类型不能自动转换"><a href="#项目-A-在-Redis-内的-Token-信息，项目-B-去获取，类型不能自动转换" class="headerlink" title="项目 A 在 Redis 内的 Token 信息，项目 B 去获取，类型不能自动转换"></a>项目 A 在 Redis 内的 Token 信息，项目 B 去获取，类型不能自动转换</h2><p>项目 A 在 Redis 内的 Token 信息如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"com.rhx.api.model.LoginUser"</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"lastLoginTime"</span><span class="token operator">:</span> <span class="token number">1688537137824</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"182xxxx"</span><span class="token punctuation">,</span>    <span class="token property">"phone"</span><span class="token operator">:</span> <span class="token string">"182xxxx"</span><span class="token punctuation">,</span>    <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"563A73FAE0F7438697A32189C16CA59F"</span><span class="token punctuation">,</span>    <span class="token property">"tokenTime"</span><span class="token operator">:</span> <span class="token number">1688565937824</span><span class="token punctuation">}</span></code></pre><p>通过方法 <code>LoginUser loginUser = (LoginUser) redisUtils.get(key);</code>在 A 项目内直接可以获取对应的数据，并且获取的数据也是 LoginUser 类型的。</p><p>项目 B 通过同样的方式却无法获取数据，通过方法 <code>redisUtils.get(key);</code> 查看可知，获取到的数据是 JSONObject 类型的数据，但也无法根据  JSONObject 内的方法自动转换。</p><ul><li>原因</li></ul><p>通过项目 A 内的 Token 信息可知，对应类型指定的类和位置：<code>"@type":"com.rhx.api.model.LoginUser"</code> 。项目 B 如果想自动转换，那么对应位置下就需要有对应的类存在。</p><ul><li>解决方法</li></ul><ol><li>在项目 B 内新建包：<code>com.rhx.api.model</code>，对应位置内新建类：LoginUser 。</li><li>手动去解析数据。</li></ol><pre class=" language-java"><code class="language-java">JSONObject jsonObject <span class="token operator">=</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span> redisUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> id <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getLongValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lastLoginTime <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getLongValue</span><span class="token punctuation">(</span><span class="token string">"lastLoginTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> tokenTime <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getLongValue</span><span class="token punctuation">(</span><span class="token string">"tokenTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String phone <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String tokens <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserLogin userLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLogin</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> lastLoginTime<span class="token punctuation">,</span> name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> tokenTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    LoginUserUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userLogin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="使用-Optional-做参数处理"><a href="#使用-Optional-做参数处理" class="headerlink" title="使用 Optional 做参数处理"></a>使用 Optional 做参数处理</h2><ul><li>判断对象是否为空</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断对象是否存在，不存在抛出异常</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断对象是否存在，如果存在返回true</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果对象存在，直接取对应的名称</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span> u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>判断集合是否为空</li></ul><pre class=" language-Java"><code class="language-Java">// 判断集合是否为空 Optional.ofNullable(param.getList()).orElse(Lists.newArrayList());// 判断集合是否为空，然后遍历里面的元素List<String> userList = getList();Optional.ofNullable(userList).orElse(new ArrayList<>()).forEach(user -> {});</code></pre><h2 id="Transactional-rollbackFor-Exception-class-使用总结"><a href="#Transactional-rollbackFor-Exception-class-使用总结" class="headerlink" title="@Transactional(rollbackFor = Exception.class) 使用总结"></a>@Transactional(rollbackFor = Exception.class) 使用总结</h2><table><thead><tr><th align="center">方法 A 调 方法 B</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">类</td><td align="center">方法 A 是否加注解</td><td align="center">方法 B 是否加注解</td><td align="center">A 异常</td><td align="center">B 异常</td></tr><tr><td align="center">A 和 B 同类</td><td align="center">是</td><td align="center">否</td><td align="center">A 和 B 回滚</td><td align="center">A 和 B 回滚</td></tr><tr><td align="center">A 和 B 同类</td><td align="center">否</td><td align="center">是</td><td align="center">A 和 B 不回滚</td><td align="center">A 和 B 不回滚</td></tr><tr><td align="center">A 和 B 不同类</td><td align="center">是</td><td align="center">否</td><td align="center">A 和 B 回滚</td><td align="center">A 和 B 回滚</td></tr><tr><td align="center">A 和 B 不同类</td><td align="center">否</td><td align="center">是</td><td align="center">A 和 B 不回滚</td><td align="center">A 不回滚 B 回滚</td></tr></tbody></table><p>说明：在 try{} catch{} 中，如果把错误抛出，throw new Exception(e); 那么事务会回滚，如果不抛出，则事务不会回滚。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目经验-报错信息</title>
      <link href="/2024/04/13/xiang-mu-jing-yan-bao-cuo-xin-xi/"/>
      <url>/2024/04/13/xiang-mu-jing-yan-bao-cuo-xin-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="项目经验-报错信息"><a href="#项目经验-报错信息" class="headerlink" title="项目经验-报错信息"></a>项目经验-报错信息</h1><h2 id="Ngnix-报-504"><a href="#Ngnix-报-504" class="headerlink" title="Ngnix 报 504"></a>Ngnix 报 504</h2><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xxxx<span class="token operator">/</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">:</span><span class="token variable">$server_port</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如上所示：项目配置使用 proxy_pass 进行转发。因此在 ngnix.conf 配置文件内修改对应的参数：</p><pre class=" language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true"># 后端服务器连接超时时间(代理连接超时)默认 60s。</span><span class="token keyword">proxy_connect_timeout</span> 1800s<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 后端服务器数据回传时间(代理发送超时)默认值 60s。</span><span class="token keyword">proxy_send_timeout</span> 1800s<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 连接成功后，后端服务器响应时间(代理接收超时)默认值 60s。</span><span class="token keyword">proxy_read_timeout</span> 1800s<span class="token punctuation">;</span></code></pre><p>如果使用的 fastcgi_pass 进行的转发，修改如下对应参数：</p><pre class=" language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true"># 后端服务器连接超时时间(代理连接超时)默认 60s。</span><span class="token keyword">fastcgi_connect_timeout</span> 1800s<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 后端服务器数据回传时间(代理发送超时)默认值 60s。</span><span class="token keyword">fastcgi_send_timeout</span> 1800s<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 连接成功后，后端服务器响应时间(代理接收超时)默认值 60s。</span><span class="token keyword">fastcgi_read_timeout</span> 1800s<span class="token punctuation">;</span></code></pre><h2 id="启动-Redis-报：WARNING-overcommit-memory-is-set-to-0-Background-save-may-fail-under-low-memory-condition"><a href="#启动-Redis-报：WARNING-overcommit-memory-is-set-to-0-Background-save-may-fail-under-low-memory-condition" class="headerlink" title="启动 Redis 报：WARNING overcommit_memory is set to 0 Background save may fail under low memory condition"></a>启动 Redis 报：WARNING overcommit_memory is set to 0 Background save may fail under low memory condition</h2><pre class=" language-shell"><code class="language-shell"># 第一步：编辑配置文件vim /etc/sysctl.conf# 第二步：新增配置（最后一行）vm.overcommit_memory=1# 第三步：配置生效sysctl -p</code></pre><h2 id="启动-Redis-报：WARNING-you-have-Transparent-Huge-Pages-THP-support-enabled-in-your-kernel-This-will"><a href="#启动-Redis-报：WARNING-you-have-Transparent-Huge-Pages-THP-support-enabled-in-your-kernel-This-will" class="headerlink" title="启动 Redis 报：WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will"></a>启动 Redis 报：WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will</h2><pre class=" language-shell"><code class="language-shell"># 第一步：先关闭 Redis# 第二步：编辑配置文件sudo vim /etc/rc.local# 第三步：新增配置（最后一行）echo never > /sys/kernel/mm/transparent_hugepage/enabled# 第四步：保存，退出，重启 Redis 即可</code></pre><h2 id="启动-Redis-报：WARNING-The-TCP-backlog-setting-of-511-cannot-be-enforced"><a href="#启动-Redis-报：WARNING-The-TCP-backlog-setting-of-511-cannot-be-enforced" class="headerlink" title="启动 Redis 报：WARNING The TCP backlog setting of 511 cannot be enforced"></a>启动 Redis 报：WARNING The TCP backlog setting of 511 cannot be enforced</h2><pre class=" language-shell"><code class="language-shell"># 第一步：编辑配置文件vim /etc/sysctl.conf# 第二步：新增配置（最后一行）net.core.somaxconn=1024# 第三步：配置生效sysctl -p</code></pre><h2 id="Nacos-使用报：ConnectException-no-available-server-currentServerAddr"><a href="#Nacos-使用报：ConnectException-no-available-server-currentServerAddr" class="headerlink" title="Nacos 使用报：ConnectException: no available server, currentServerAddr"></a>Nacos 使用报：ConnectException: no available server, currentServerAddr</h2><ul><li>加入依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="微服务远程接口调用报：java-lang-IllegalArgumentException-method-GET-must-not-have-a-request-body"><a href="#微服务远程接口调用报：java-lang-IllegalArgumentException-method-GET-must-not-have-a-request-body" class="headerlink" title="微服务远程接口调用报：java.lang.IllegalArgumentException: method GET must not have a request body"></a>微服务远程接口调用报：java.lang.IllegalArgumentException: method GET must not have a request body</h2><ul><li>原因</li></ul><p>微服务使用 FeignClient 做接口调用的时候，GET 请求无法解析对象参数。</p><ul><li>解决方法</li></ul><ol><li>POST + @RequestBody。</li><li>GET + @SpringQueryMap（注意 Spring Cloud 的版本，2.1.x 以下的不支持）。</li><li>GET + @RequestParam(“xxx”)。</li></ol><h2 id="微服务项目启动报：The-bean-‘xxx-FeignClientSpecification‘-could-not-be-registered"><a href="#微服务项目启动报：The-bean-‘xxx-FeignClientSpecification‘-could-not-be-registered" class="headerlink" title="微服务项目启动报：The bean ‘xxx.FeignClientSpecification‘ could not be registered"></a>微服务项目启动报：The bean ‘xxx.FeignClientSpecification‘ could not be registered</h2><ul><li>原因</li></ul><p>多个 Feign 接口使用 @FeignClient 注解，调用同一名称的微服务时，发生异常。</p><ul><li>解决方法</li></ul><ol><li>将 Feign 接口合并。</li><li>配置文件中增加配置：spring.main.allow-bean-definition-overriding = true。</li><li>在 @FeignClient 注解上增加 contextId 属性，确保每个 Feign Client 的 contextId 唯一。</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"${file.url}"</span><span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token string">"/api/file"</span><span class="token punctuation">,</span>contextId <span class="token operator">=</span> <span class="token string">"fileCilent"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"${client.url}"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/api/client"</span><span class="token punctuation">,</span> contextId <span class="token operator">=</span> <span class="token string">"userClient"</span><span class="token punctuation">)</span></code></pre><h2 id="微服务项目启动报：Failed-to-load-property-source-from-location-‘classpath-application-yml’"><a href="#微服务项目启动报：Failed-to-load-property-source-from-location-‘classpath-application-yml’" class="headerlink" title="微服务项目启动报：Failed to load property source from location ‘classpath:/application.yml’"></a>微服务项目启动报：Failed to load property source from location ‘classpath:/application.yml’</h2><ul><li>加入配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.encoding</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h2 id="微服务项目启动报：-Invalid-bound-statement-not-found"><a href="#微服务项目启动报：-Invalid-bound-statement-not-found" class="headerlink" title="微服务项目启动报： Invalid bound statement (not found)"></a>微服务项目启动报： Invalid bound statement (not found)</h2><ul><li>原因 </li></ul><p>Mapper.java 和 Mapper.xml 文件都在 java 目录下，缺少对应的配置信息。</p><ul><li>解决办法</li></ul><p>pom.xml 文件添加配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置加载配置项信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.ftl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>application.yml 文件添加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus.mapper-locations</span><span class="token punctuation">:</span> classpath*<span class="token punctuation">:</span>com/rhx/notice/mapper/xml/<span class="token important">*Mapper</span>.xml</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Poi-tl 处理 Word 文档表格数据</title>
      <link href="/2024/04/13/shi-yong-poi-tl-chu-li-word-wen-dang-biao-ge-shu-ju/"/>
      <url>/2024/04/13/shi-yong-poi-tl-chu-li-word-wen-dang-biao-ge-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Poi-tl-处理-Word-文档表格数据"><a href="#使用-Poi-tl-处理-Word-文档表格数据" class="headerlink" title="使用 Poi-tl 处理 Word 文档表格数据"></a>使用 Poi-tl 处理 Word 文档表格数据</h1><p>根据模板文件，替换模板文件里对应的数据，这里使用 poi-tl 进行处理。</p><p>poi-tl 是在 poi 的基础上进行封装的，因此使用 poi-tl 时，注意彼此版本对应关系。</p><blockquote><p><a href="https://deepoove.com/poi-tl/" target="_blank" rel="noopener">https://deepoove.com/poi-tl/</a></p></blockquote><h2 id="引入架包"><a href="#引入架包" class="headerlink" title="引入架包"></a>引入架包</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--poi框架--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-scratchpad<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--注意对应poi的版本依赖：https://deepoove.com/poi-tl/ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.deepoove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-tl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//核心代码</span>ConfigureBuilder builder <span class="token operator">=</span> Configure<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span>XWPFTemplate xwpfTemplate <span class="token operator">=</span> XWPFTemplate<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>        mapCode<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>put<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将完成数据渲染的文档写入到输入流</span>    ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xwpfTemplate<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将输入流转成 multipartFile</span>    file <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">createByteMultipartFile</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setRecord</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> template<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"生成文件时发生异常: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"生成文件时发生异常: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="前端数据"><a href="#前端数据" class="headerlink" title="前端数据"></a>前端数据</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"mapCode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ID_dizhi"</span><span class="token operator">:</span> <span class="token string">"CNT20150011"</span><span class="token punctuation">,</span>        <span class="token property">"ID_hetongbianhao"</span><span class="token operator">:</span> <span class="token string">"14875.25"</span><span class="token punctuation">,</span>        <span class="token property">"ID_riqi"</span><span class="token operator">:</span> <span class="token string">"2024-04-01"</span><span class="token punctuation">,</span>        <span class="token property">"ID_tianbiaoriqi"</span><span class="token operator">:</span> <span class="token string">"2024-04-01"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Word-模板"><a href="#Word-模板" class="headerlink" title="Word 模板"></a>Word 模板</h2><p>在 Word 模板中，只需要在对应的位置添加如下变量形式即可：<code></code> ，那么最后生成的文件里，变量的位置就不被 <code>CNT20150011</code> 替换。</p><h2 id="表格数据"><a href="#表格数据" class="headerlink" title="表格数据"></a>表格数据</h2><p>表格数据，这里使用动态表格类：DynamicTableRenderPolicy 进行处理。</p><h3 id="定义处理表格的类"><a href="#定义处理表格的类" class="headerlink" title="定义处理表格的类"></a>定义处理表格的类</h3><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> 定义处理表格的插件 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DetailTablePolicy</span> <span class="token keyword">extends</span> <span class="token class-name">DynamicTableRenderPolicy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span>XWPFTable table<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取数据</span>            LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> mapValue <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加表头数据，默认表格第一行为表头</span>            XWPFTableRow headerRow <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String columnName <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XWPFTableCell headerCell <span class="token operator">=</span> headerRow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置垂直居中</span>                headerCell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>XWPFTableCell<span class="token punctuation">.</span>XWPFVertAlign<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                XWPFParagraph paragraph <span class="token operator">=</span> headerCell<span class="token punctuation">.</span><span class="token function">getParagraphArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>ParagraphAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                XWPFRun run <span class="token operator">=</span> paragraph<span class="token punctuation">.</span><span class="token function">createRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置大小，加粗和列名</span>                run<span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                run<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                run<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取列数</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object value <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 先把列的数据转成行数据</span>            List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Object ob <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ob <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        item<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 再把行数据按照每行添加进去</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                XWPFTableRow row <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">insertNewTableRow</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                row<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String cellValue <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    XWPFTableCell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置整个表格里的数据垂直居中对齐</span>                    cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>XWPFTableCell<span class="token punctuation">.</span>XWPFVertAlign<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                    CTTc ctTc <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCTTc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    CTP ctp <span class="token operator">=</span> ctTc<span class="token punctuation">.</span><span class="token function">sizeOfPArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> ctTc<span class="token punctuation">.</span><span class="token function">addNewP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ctTc<span class="token punctuation">.</span><span class="token function">getPArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    XWPFParagraph paragraph <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getParagraph</span><span class="token punctuation">(</span>ctp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>ParagraphAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cell<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"模板文件中存在多余的编码!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定义处理表格方法"><a href="#定义处理表格方法" class="headerlink" title="定义处理表格方法"></a>定义处理表格方法</h3><pre class=" language-java"><code class="language-java"> ConfigureBuilder builder <span class="token operator">=</span> Configure<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapCode<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置勾选框</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                StringBuilder str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>m <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    TextRenderData data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextRenderData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"R"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 勾选框通过设置字体样式来达到显示效果</span>                mapCode<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TextRenderData</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Style</span><span class="token punctuation">(</span><span class="token string">"Wingdings 2"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历表格数据，new DetailTablePolicy() 为每个表格都使用的插件类</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">)</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DetailTablePolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把数据渲染到文件中去</span>        MultipartFile file <span class="token operator">=</span> null<span class="token punctuation">;</span>        String name <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".docx"</span><span class="token punctuation">;</span>        MultipartFile multipartFile <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">createMultipartFile</span><span class="token punctuation">(</span>resUrl<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>XWPFTemplate xwpfTemplate <span class="token operator">=</span> XWPFTemplate<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>                    mapCode<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>put<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将完成数据渲染的文档写入到输入流</span>            ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xwpfTemplate<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将输入流转成 multipartFile</span>            file <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">createByteMultipartFile</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setRecord</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> template<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"生成文件时发生异常: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"生成文件时发生异常: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="前端数据-1"><a href="#前端数据-1" class="headerlink" title="前端数据"></a>前端数据</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 后端实体类</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"编码和填写的数值"</span><span class="token punctuation">)</span><span class="token keyword">private</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> mapCode<span class="token punctuation">;</span></code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"mapCode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ID_zhucheguishu"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"委托方"</span><span class="token punctuation">,</span>            <span class="token string">"注册方"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"ID_dizhi"</span><span class="token operator">:</span> <span class="token string">"CNT20150011"</span><span class="token punctuation">,</span>        <span class="token property">"ID_hetongbianhao"</span><span class="token operator">:</span> <span class="token string">"14875.25"</span><span class="token punctuation">,</span>        <span class="token property">"ID_riqi"</span><span class="token operator">:</span> <span class="token string">"2024-04-01"</span><span class="token punctuation">,</span>        <span class="token property">"ID_tianbiaoriqi"</span><span class="token operator">:</span> <span class="token string">"2024-04-01"</span><span class="token punctuation">,</span>        <span class="token property">"ID_renyuanxinxi"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"序号"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"姓名"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"性别"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"年龄"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"ID_suntances"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"编号"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"R1"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"物质名称"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"神经酰胺NP"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"吨位"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"无意义"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>// ID_zhucheguishu 表示勾选框选择的值// ID_renyuanxinxi 和 ID_suntances 对应为表格数据</code></pre><h3 id="Word-模板-1"><a href="#Word-模板-1" class="headerlink" title="Word 模板"></a>Word 模板</h3><p><strong>表格的制作，有个前提，那就是列数是确定的。</strong></p><table><thead><tr><th align="left"></th><th></th><th></th><th></th></tr></thead></table><table><thead><tr><th></th><th></th><th></th></tr></thead></table><h3 id="延伸思考：指定插入的行"><a href="#延伸思考：指定插入的行" class="headerlink" title="延伸思考：指定插入的行"></a>延伸思考：指定插入的行</h3><p>上面的例子中，表格的数据都是从第一行插入的，如果模板中，既有从第一行插入的数据，又有不是从第一行插入的数据，那要如何处理。</p><h4 id="修改处理表格的类"><a href="#修改处理表格的类" class="headerlink" title="修改处理表格的类"></a>修改处理表格的类</h4><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> 定义处理表格的插件 <span class="token operator">*</span> 与原方法的区别： <span class="token operator">*</span>  <span class="token comment" spellcheck="true">// 增加表头行数位置</span> <span class="token operator">*</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">;</span>  <span class="token operator">*</span>   <span class="token keyword">public</span> <span class="token function">DetailTablePolicy</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rowIndex <span class="token operator">=</span> rowIndex<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">*</span>  <span class="token comment" spellcheck="true">// 通过传过来的数据决定插入的位置</span> <span class="token operator">*</span>   XWPFTableRow headerRow <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>  <span class="token comment" spellcheck="true">// 行数据紧跟表头位置</span> <span class="token operator">*</span>   <span class="token keyword">int</span> index <span class="token operator">=</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DetailTablePolicy</span> <span class="token keyword">extends</span> <span class="token class-name">DynamicTableRenderPolicy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 增加表头行数位置</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">DetailTablePolicy</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rowIndex <span class="token operator">=</span> rowIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span>XWPFTable table<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取数据</span>            LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> mapValue <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加表头数据，根据表头行位置来决定位置</span>            XWPFTableRow headerRow <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String columnName <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XWPFTableCell headerCell <span class="token operator">=</span> headerRow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置垂直居中</span>                headerCell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>XWPFTableCell<span class="token punctuation">.</span>XWPFVertAlign<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                XWPFParagraph paragraph <span class="token operator">=</span> headerCell<span class="token punctuation">.</span><span class="token function">getParagraphArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>ParagraphAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                XWPFRun run <span class="token operator">=</span> paragraph<span class="token punctuation">.</span><span class="token function">createRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置大小，加粗和列名</span>                run<span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                run<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                run<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取列数</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object value <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 先把列的数据转成行数据</span>            List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Object ob <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ob <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        item<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 行数据按紧跟表头位置</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                XWPFTableRow row <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">insertNewTableRow</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                row<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String cellValue <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    XWPFTableCell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置整个表格里的数据垂直居中对齐</span>                    cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>XWPFTableCell<span class="token punctuation">.</span>XWPFVertAlign<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                    CTTc ctTc <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCTTc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    CTP ctp <span class="token operator">=</span> ctTc<span class="token punctuation">.</span><span class="token function">sizeOfPArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> ctTc<span class="token punctuation">.</span><span class="token function">addNewP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ctTc<span class="token punctuation">.</span><span class="token function">getPArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    XWPFParagraph paragraph <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getParagraph</span><span class="token punctuation">(</span>ctp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>ParagraphAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cell<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"模板文件中存在多余的编码!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="定义处理表格方法-1"><a href="#定义处理表格方法-1" class="headerlink" title="定义处理表格方法"></a>定义处理表格方法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 只需要把原方法中的如下代码修改即可</span><span class="token comment" spellcheck="true">// 原方法</span><span class="token comment" spellcheck="true">// 遍历表格数据，new DetailTablePolicy() 为每个表格都使用的插件类</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">)</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DetailTablePolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 修改后的代码</span><span class="token comment" spellcheck="true">// 遍历表格数据，new DetailTablePolicy() 为每个表格都使用的插件类</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>LinkedHashMap<span class="token punctuation">)</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这一块处理和前端传值有关系</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DetailTablePolicy</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="修改前端数据"><a href="#修改前端数据" class="headerlink" title="修改前端数据"></a>修改前端数据</h4><pre class=" language-json"><code class="language-json">// 原前端传值，表格的编码为：ID_renyuanxinxi 和 ID_suntances<span class="token punctuation">{</span>    <span class="token property">"mapCode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ID_renyuanxinxi"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"序号"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"姓名"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"性别"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"年龄"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"ID_suntances"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"编号"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"R1"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"物质名称"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"神经酰胺NP"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"吨位"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"无意义"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>// 现在只需要在其后加上数字，对应数字为表示这个表格的第一行数据插入表格的位置，如：ID_renyuanxinxi_1 就表示从第一行插入；ID_suntances_5 就表示从第五行插入。// 修改后的前端传值<span class="token punctuation">{</span>    <span class="token property">"mapCode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ID_renyuanxinxi_1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"序号"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"姓名"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"性别"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"年龄"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"ID_suntances_5"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"编号"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"R1"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"物质名称"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"神经酰胺NP"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"吨位"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"无意义"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="延伸思考：合并指定的列"><a href="#延伸思考：合并指定的列" class="headerlink" title="延伸思考：合并指定的列"></a>延伸思考：合并指定的列</h3><p>合并指定的列，需要前端指定合并的行，合并的列（这里默认从第一列开始合并），当传过来的数据当前行有 “//” 这个字符时，则表示当前行需要合并，该行最后一个 “//” 字符所在的位置，表示需要合并列的位置。</p><h4 id="修改处理表格的类-1"><a href="#修改处理表格的类-1" class="headerlink" title="修改处理表格的类"></a>修改处理表格的类</h4><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> 定义处理表格的插件 <span class="token operator">*</span> 与原方法的区别： <span class="token operator">*</span>  <span class="token comment" spellcheck="true">// 增加表头行数位置</span> <span class="token operator">*</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">;</span>  <span class="token operator">*</span>   <span class="token keyword">public</span> <span class="token function">DetailTablePolicy</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rowIndex <span class="token operator">=</span> rowIndex<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">*</span>  <span class="token comment" spellcheck="true">// 通过传过来的数据决定插入的位置</span> <span class="token operator">*</span>   XWPFTableRow headerRow <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>  <span class="token comment" spellcheck="true">// 行数据紧跟表头位置</span> <span class="token operator">*</span>   <span class="token keyword">int</span> index <span class="token operator">=</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DetailTablePolicy</span> <span class="token keyword">extends</span> <span class="token class-name">DynamicTableRenderPolicy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 增加表头行数位置</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">DetailTablePolicy</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rowIndex <span class="token operator">=</span> rowIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span>XWPFTable table<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取数据</span>            LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> mapValue <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加表头数据，根据表头行位置来决定位置</span>            XWPFTableRow headerRow <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String columnName <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XWPFTableCell headerCell <span class="token operator">=</span> headerRow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置垂直居中</span>                headerCell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>XWPFTableCell<span class="token punctuation">.</span>XWPFVertAlign<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                XWPFParagraph paragraph <span class="token operator">=</span> headerCell<span class="token punctuation">.</span><span class="token function">getParagraphArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>ParagraphAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                XWPFRun run <span class="token operator">=</span> paragraph<span class="token punctuation">.</span><span class="token function">createRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置大小，加粗和列名</span>                run<span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                run<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                run<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取列数</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object value <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 先把列的数据转成行数据</span>            List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Object ob <span class="token operator">:</span> mapValue<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ob <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        item<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 行数据按紧跟表头位置</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                XWPFTableRow row <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">insertNewTableRow</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                row<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                columnIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String cellValue <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    XWPFTableCell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置整个表格里的数据垂直居中对齐</span>                    cell<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>XWPFTableCell<span class="token punctuation">.</span>XWPFVertAlign<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                    CTTc ctTc <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCTTc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    CTP ctp <span class="token operator">=</span> ctTc<span class="token punctuation">.</span><span class="token function">sizeOfPArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> ctTc<span class="token punctuation">.</span><span class="token function">addNewP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ctTc<span class="token punctuation">.</span><span class="token function">getPArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    XWPFParagraph paragraph <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getParagraph</span><span class="token punctuation">(</span>ctp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    paragraph<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>ParagraphAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cell<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>cellValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 存储需要合并的行和列的位置信息的列表</span>            List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> mergeInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历数据列表并记录需要合并的行和列的位置信息</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> rowValues <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> endIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                endIndex <span class="token operator">=</span> rowValues<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mergeInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> endIndex<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历需要合并的信息，合并表格</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mergeInfo <span class="token operator">:</span> mergeInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TableTools<span class="token punctuation">.</span><span class="token function">mergeCellsHorizonal</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> mergeInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mergeInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"模板文件中存在多余的编码!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>备注：其它不需要修改。</p><ul><li>参考</li></ul><blockquote><p><a href="https://deepoove.com/poi-tl/#_why_poi_tl" target="_blank" rel="noopener">https://deepoove.com/poi-tl/#_why_poi_tl</a></p><p><a href="https://deepoove.com/poi-tl/apache-poi-guide.html" target="_blank" rel="noopener">https://deepoove.com/poi-tl/apache-poi-guide.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Poi-tl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poi-tl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 PDFBox 给 PDF 添加水印</title>
      <link href="/2024/04/13/shi-yong-pdfbox-gei-pdf-tian-jia-shui-yin/"/>
      <url>/2024/04/13/shi-yong-pdfbox-gei-pdf-tian-jia-shui-yin/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-PDFBox-给-PDF-添加水印"><a href="#使用-PDFBox-给-PDF-添加水印" class="headerlink" title="使用 PDFBox 给 PDF 添加水印"></a>使用 PDFBox 给 PDF 添加水印</h1><p>PDF 加水印，使用 pdfbox 架包进行处理。</p><h2 id="引入架包"><a href="#引入架包" class="headerlink" title="引入架包"></a>引入架包</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--pdf加水印--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.pdfbox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pdfbox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> MultipartFile <span class="token function">setPDFMark</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加载文件并设置样式</span>    PDDocument pdDocument <span class="token operator">=</span> PDDocument<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    PDExtendedGraphicsState state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDExtendedGraphicsState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span><span class="token function">setNonStrokingAlphaConstant</span><span class="token punctuation">(</span><span class="token number">0.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span><span class="token function">setAlphaSourceFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span><span class="token function">setBlendMode</span><span class="token punctuation">(</span>BlendMode<span class="token punctuation">.</span>MULTIPLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理每页的水印字体，透明度，大小</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pdDocument<span class="token punctuation">.</span><span class="token function">getNumberOfPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PDPageContentStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDPageContentStream</span><span class="token punctuation">(</span>pdDocument<span class="token punctuation">,</span> pdDocument<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> PDPageContentStream<span class="token punctuation">.</span>AppendMode<span class="token punctuation">.</span>APPEND<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>PDType1Font<span class="token punctuation">.</span>HELVETICA_BOLD<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">setNonStrokingColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">setGraphicsStateParameters</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">beginText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> pageHeight <span class="token operator">=</span> pdDocument<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMediaBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> pageWidth <span class="token operator">=</span> pdDocument<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMediaBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据纸张大小添加水印，30度倾斜</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> pageHeight<span class="token punctuation">;</span> h <span class="token operator">=</span> h <span class="token operator">+</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> pageWidth<span class="token punctuation">;</span> w <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stream<span class="token punctuation">.</span><span class="token function">setTextMatrix</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">.</span><span class="token function">getRotateInstance</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stream<span class="token punctuation">.</span><span class="token function">showText</span><span class="token punctuation">(</span><span class="token string">"KK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        stream<span class="token punctuation">.</span><span class="token function">endText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      * 转换对应的格式     */</span>    ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pdDocument<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    pdDocument<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteArrayInputStream byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MultipartFileUtils</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"application/pdf"</span><span class="token punctuation">,</span> byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PDFBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDFBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Documents4j 处理 Word 转 PDF</title>
      <link href="/2024/04/13/shi-yong-documents4j-chu-li-word-zhuan-pdf/"/>
      <url>/2024/04/13/shi-yong-documents4j-chu-li-word-zhuan-pdf/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Documents4j-处理-Word-转-PDF"><a href="#使用-Documents4j-处理-Word-转-PDF" class="headerlink" title="使用 Documents4j 处理 Word 转 PDF"></a>使用 Documents4j 处理 Word 转 PDF</h1><p>能实现这个功能的框架有很多，在满足免费开源并且效果不错的前提下，决定采用 Documents4j 进行转换。</p><h2 id="Documents4j-策略"><a href="#Documents4j-策略" class="headerlink" title="Documents4j 策略"></a>Documents4j 策略</h2><p>Documents4j 有两个策略，一个是本地策略，一个是远程策略，分别对应的架包是：</p><ul><li>本地策略</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.documents4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>documents4j-local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>远程策略</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.documents4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>documents4j-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Documents4j 的转换，可以理解为需要依托于微软的：MicrosoftWord / Excel。在本地机器上开发时（Win 电脑），使用本地策略，是可以完成转换的。但部署到 Linux 服务器上后就不能。</p><p><strong>问题分析：</strong></p><ol><li>Win 电脑系统，默认已经有 MicrosoftWord / Excel 了。而服务器上的 Linux 系统并没有对应的服务，因此需要安装对应的插件。这里安装：LibreOffice。（安装教程这里省略不做详述）安装成功后使用命令测试验证：<code>libreoffice7.1 --invisible --convert-to pdf:writer_pdf_Export /home/demo.docx --outdir /home/</code> 可以成功，但代码运行还是失败。</li><li>使用命令 <code>/usr/bin/libreoffice7.1 --headless --accept=”socket,host=127.0.0.1,port=8100;urp;”- -nofirststartwizard &amp;</code> 启动 LibreOffice。启动成功后，代码运行还是失败。</li><li>使用远程策略，在 Win 电脑上安装 LibreOffice，然后代码里指向对应的地址。</li></ol><p><strong>官网说明：</strong></p><blockquote><ul><li>JVM 在 MS Windows 平台上运行，该平台附带 Microsoft Scripting Host for VBS（对于所有现代版本的 MS Windows 都是如此）。</li><li>安装的 MS Word 版本为 2007 或更高版本。仅当安装 PDF 插件时才支持 PDF 转换。该插件包含在 Word 2010 及更高版本的 MS Word 中。</li><li>启动时 MS Word 尚未运行<code>LocalConverter</code>。对于由另一个 .NET 实例运行的 MS Word 实例尤其如此<code>LocalConverter</code>。 （如前所述，请注意，对于在不同 JVM 上运行或由不同类加载器加载的实例也是如此。）</li><li>MS Word 已为运行 JVM 的用户正确激活和配置。因此，MS Word 不需要在程序启动或任何其他向导时进行任何配置。</li><li>当使用 JVM 应用程序<code>LocalConverter</code>作为服务运行时，请注意下面的 MS Windows 服务配置文件中有关使用 MS Word 的信息。</li></ul></blockquote><h2 id="引入架包"><a href="#引入架包" class="headerlink" title="引入架包"></a>引入架包</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--word转pdf--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.documents4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>documents4j-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.documents4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>documents4j-transformer-msoffice-word<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--远程调用需要的架包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jersey.inject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jersey-hk2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 转换后的文件信息, PDF 文件</span>File fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 临时文件</span>File tempPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 远程地址</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.documents4j.url}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String documents4jUrl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 完成转换的代码，远程转换使用代码 RemoteConverter</span>IConverter converter <span class="token operator">=</span> RemoteConverter<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseFolder</span><span class="token punctuation">(</span>tempPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseUri</span><span class="token punctuation">(</span>documents4jUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>DocumentType<span class="token punctuation">.</span>DOCX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>DocumentType<span class="token punctuation">.</span>PDF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 完整核心代码</span><span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    IConverter converter <span class="token operator">=</span> RemoteConverter<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseFolder</span><span class="token punctuation">(</span>tempPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseUri</span><span class="token punctuation">(</span>documents4jUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>DocumentType<span class="token punctuation">.</span>DOCX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>DocumentType<span class="token punctuation">.</span>PDF<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"文件转换时发生异常: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除临时文件</span>    Files<span class="token punctuation">.</span><span class="token function">deleteIfExists</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path <span class="token operator">+</span> pdfName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><ul><li>下载并安装：documents4j-server-standalone-1.1.8-shaded.jar。</li></ul><blockquote><p><a href="https://repo1.maven.org/maven2/com/documents4j/documents4j-server-standalone/1.1.8/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/com/documents4j/documents4j-server-standalone/1.1.8/</a></p></blockquote><p><strong>documents4j-server-standalone-1.1.8-shaded.jar 的运行依赖 jdk，需要实现在 Win 电脑上安装 jdk。</strong></p><ul><li>编写运行脚本，重命名为.bat 文件。</li></ul><pre class=" language-bash"><code class="language-bash">@echo off%1 mshta vbscript:CreateObject<span class="token punctuation">(</span><span class="token string">"WScript.Shell"</span><span class="token punctuation">)</span>.Run<span class="token punctuation">(</span><span class="token string">"%~s0 ::"</span>,0,FALSE<span class="token punctuation">)</span><span class="token punctuation">(</span>window.close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">exit</span>java -jar D:\documents4j\documents4j-server-standalone-1.1.8-shaded.jar http://192.168.xxxx:9998 <span class="token operator">></span> D:\documents4j\documents4j.log 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span class="token keyword">exit</span></code></pre><ul><li>启动脚本，代码即可执行，后续代码部署到 Linux 也可以执行转换服务。（代码里需要配置好 documents4j-server-standalone 运行的地址和端口）</li></ul><h2 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h2><ol><li>使用本地策略时，如果 Linux 上已经安装 LibreOffice，并成功运行，那么上述代码里的 spring.documents4j.url 换成 Linux 上已经启动的地址，是否可行。</li><li>把 Linux 上 LibreOffice 运行命令打包成 JAVA 代码，直接调用是否可行。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Documents4j </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Documents4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFK_部署文档</title>
      <link href="/2023/12/06/efk-bu-shu-wen-dang/"/>
      <url>/2023/12/06/efk-bu-shu-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="EFK-部署文档"><a href="#EFK-部署文档" class="headerlink" title="EFK_部署文档"></a>EFK_部署文档</h1><p><strong>说明</strong></p><ol><li>注意各个组件的版本。</li><li>这里 Elasticsearch 的版本为：elasticsearch-7.8.0-linux-x86_64.tar.gz。</li><li>IK 的版本为：elasticsearch-analysis-ik-7.8.0.zip。</li><li>Kibana 的版本为：kibana-7.8.0-linux-x86_64.tar.gz。</li><li>FileBeat 的版本为：filebeat-7.17.0-linux-x86_64.tar.gz。</li></ol><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ol><li><p>把对应的包放到指定的文件夹，解压，命名。</p></li><li><p>修改 config 里的配置文件 elasticsearch.yml。</p><blockquote><ol><li>cluster.name: es</li><li>node.name: node-1</li><li>network.host: 0.0.0.0</li><li>cluster.initial_master_nodes: [“node-1”]</li></ol></blockquote></li><li><p>修改 config 里的配置文件 jvm.options。</p><blockquote><ol><li>-Xms512m</li><li>-Xmx512m</li></ol></blockquote></li><li><p>修改 /etc/security/ 路径下的配置文件 limits.conf。（文件末尾追加，前面带 * 号）</p><blockquote><ul><li>soft nproc 65535</li><li>hard nproc 65535</li><li>soft nofile 65535</li><li>hard nofile 65535</li><li>es_user soft nofile 65535</li><li>es_user hard nofile 65535</li></ul></blockquote></li><li><p>修改  /etc/ 路径下的配置文件 sysctl.conf。(修改后执行：sysctl -p)</p><blockquote><p>vm.max_map_count=655360</p></blockquote></li><li><p>创建新的用户 ekl。（Elasticsearch）不能使用 root 用户启动。（这里直接把对应文件夹下的文件都赋值给了 elk 用户。）</p><blockquote><ol><li>adduser elk</li><li>passwd elk</li><li>chown -R elk:elk /usr/local/elk/*</li><li>su elk</li></ol></blockquote></li></ol><h2 id="IK"><a href="#IK" class="headerlink" title="IK"></a>IK</h2><ol><li>在 Elasticsearch 的 plugins 目录下，创建 ik 文件夹。</li><li>把 elasticsearch-analysis-ik-7.8.0.zip 放到 ik 文件夹内。</li><li>unzip elasticsearch-analysis-ik-7.8.0.zip (解压)。</li><li>进入  Elasticsearch 的 bin目录下，执行 ./elasticsearch -d 命令。（后台启动 Elasticsearch ）</li></ol><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><ol><li><p>把对应的包放到指定的文件夹，解压，命名。</p></li><li><p>修改 config 里的配置文件 kibana.yml。</p><blockquote><ol><li>server.port: 5601</li><li>server.host: “0.0.0.0”</li><li>elasticsearch.hosts: [“ip:端口”]</li><li>i18n.locale: “zh-CN”</li></ol></blockquote></li><li><p>进入 Kibana 的 bin 目录下，执行 ./kibana &amp; 命令。（后台启动 Kibana）</p></li></ol><h2 id="FileBeat"><a href="#FileBeat" class="headerlink" title="FileBeat"></a>FileBeat</h2><ol><li>把对应的包放到指定的文件夹，解压，命名。</li><li>修改配置文件 filebeat.yml。（进入到文件目录下就能看到）</li></ol><h3 id="拦截单条日志"><a href="#拦截单条日志" class="headerlink" title="拦截单条日志"></a>拦截单条日志</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">filebeat.inputs</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 日志类型</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 日志路径</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /home/back/reachx/client/logs/rhx<span class="token punctuation">-</span>client<span class="token punctuation">-</span>info.log    <span class="token comment" spellcheck="true"># 日志形式（elasticsearch 自动生成索引使用）</span>  <span class="token key atrule">fields</span><span class="token punctuation">:</span>    <span class="token key atrule">index</span><span class="token punctuation">:</span> client<span class="token punctuation">-</span>info    <span class="token comment" spellcheck="true"># 编码</span>  <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token comment" spellcheck="true"># 指定日志匹配条件</span>  <span class="token key atrule">multiline.pattern</span><span class="token punctuation">:</span> <span class="token string">'^\d{4}'</span>  <span class="token comment" spellcheck="true"># 定义模式是否被否定</span>  <span class="token key atrule">multiline.negate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 日志合并位置</span>  <span class="token key atrule">multiline.match</span><span class="token punctuation">:</span> after<span class="token comment" spellcheck="true"># 关闭 filebeat 自动管理索引的生命周期</span><span class="token key atrule">setup.ilm.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true"># kibana 配置</span><span class="token key atrule">setup.kibana</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"localhost:5601"</span><span class="token comment" spellcheck="true"># elasticsearch 配置</span><span class="token key atrule">output.elasticsearch</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9200"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 索引生成</span>  <span class="token key atrule">indices</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"client-info-%{+yyyy-MM-dd}"</span>    <span class="token comment" spellcheck="true"># 匹配到对应关键字，生成指定索引</span>      <span class="token key atrule">when.equals</span><span class="token punctuation">:</span>        <span class="token key atrule">fields</span><span class="token punctuation">:</span>          <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"client-info"</span>  <span class="token comment" spellcheck="true"># 账号和密码，使用默认的配置</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"elastic"</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"changeme"</span></code></pre><h3 id="连接多条配置"><a href="#连接多条配置" class="headerlink" title="连接多条配置"></a>连接多条配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">filebeat.inputs</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 日志类型</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 日志路径</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /home/back/reachx/client/logs/rhx<span class="token punctuation">-</span>client<span class="token punctuation">-</span>info.log    <span class="token comment" spellcheck="true"># 日志形式（elasticsearch 自动生成索引使用）</span>  <span class="token key atrule">fields</span><span class="token punctuation">:</span>    <span class="token key atrule">index</span><span class="token punctuation">:</span> client<span class="token punctuation">-</span>info    <span class="token comment" spellcheck="true"># 编码</span>  <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token comment" spellcheck="true"># 指定日志匹配条件</span>  <span class="token key atrule">multiline.pattern</span><span class="token punctuation">:</span> <span class="token string">'^\d{4}'</span>  <span class="token comment" spellcheck="true"># 定义模式是否被否定</span>  <span class="token key atrule">multiline.negate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 日志合并位置</span>  <span class="token key atrule">multiline.match</span><span class="token punctuation">:</span> after<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /home/back/reachx/client/logs/rhx<span class="token punctuation">-</span>client<span class="token punctuation">-</span>error.log  <span class="token key atrule">fields</span><span class="token punctuation">:</span>    <span class="token key atrule">index</span><span class="token punctuation">:</span> client<span class="token punctuation">-</span>error  <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token key atrule">multiline.pattern</span><span class="token punctuation">:</span> <span class="token string">'^\d{4}'</span>  <span class="token key atrule">multiline.negate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">multiline.match</span><span class="token punctuation">:</span> after<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /home/back/reachx/file/logs/rhx<span class="token punctuation">-</span>file<span class="token punctuation">-</span>info.log  <span class="token key atrule">fields</span><span class="token punctuation">:</span>    <span class="token key atrule">index</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>info  <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token key atrule">multiline.pattern</span><span class="token punctuation">:</span> <span class="token string">'^\d{4}'</span>  <span class="token key atrule">multiline.negate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">multiline.match</span><span class="token punctuation">:</span> after<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> log  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /home/back/reachx/file/logs/rhx<span class="token punctuation">-</span>file<span class="token punctuation">-</span>error.log  <span class="token key atrule">fields</span><span class="token punctuation">:</span>    <span class="token key atrule">index</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>error  <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token key atrule">multiline.pattern</span><span class="token punctuation">:</span> <span class="token string">'^\d{4}'</span>  <span class="token key atrule">multiline.negate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">multiline.match</span><span class="token punctuation">:</span> after<span class="token comment" spellcheck="true"># 关闭 filebeat 自动管理索引的生命周期</span><span class="token key atrule">setup.ilm.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true"># kibana 配置</span><span class="token key atrule">setup.kibana</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"localhost:5601"</span><span class="token comment" spellcheck="true"># elasticsearch 配置</span><span class="token key atrule">output.elasticsearch</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"localhost:9200"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 索引生成</span>  <span class="token key atrule">indices</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"client-info-%{+yyyy-MM-dd}"</span>    <span class="token comment" spellcheck="true"># 匹配到对应关键字，生成指定索引</span>      <span class="token key atrule">when.equals</span><span class="token punctuation">:</span>        <span class="token key atrule">fields</span><span class="token punctuation">:</span>          <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"client-info"</span>    <span class="token punctuation">-</span> <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"client-error-%{+yyyy-MM-dd}"</span>      <span class="token key atrule">when.equals</span><span class="token punctuation">:</span>        <span class="token key atrule">fields</span><span class="token punctuation">:</span>          <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"client-error"</span>    <span class="token punctuation">-</span> <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"file-info-%{+yyyy-MM-dd}"</span>      <span class="token key atrule">when.equals</span><span class="token punctuation">:</span>        <span class="token key atrule">fields</span><span class="token punctuation">:</span>          <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"file-info"</span>    <span class="token punctuation">-</span> <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"file-error-%{+yyyy-MM-dd}"</span>      <span class="token key atrule">when.equals</span><span class="token punctuation">:</span>        <span class="token key atrule">fields</span><span class="token punctuation">:</span>          <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token string">"file-error"</span>  <span class="token comment" spellcheck="true"># 账号和密码，使用默认的配置</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"elastic"</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"changeme"</span></code></pre><blockquote><ol><li>multiline.pattern: ‘^\d{4}’</li><li>multiline.negate: true</li><li>multiline.match: after</li></ol><p>如果不加上述的配置，当日志格式如下：</p><pre class=" language-log"><code class="language-log">2023-07-06 15:22:46.358 [http-nio-9091-exec-6] ERROR o.a.c.c.C.[.[.[/client].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [/client] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: User Token Is Expires] with root causejava.lang.IllegalStateException: User Token Is Expires    at com.rhx.client.config.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:36)    at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:148)    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)</code></pre><p>会被解析成一行一行的数据，这个显然不是我们想要的结果。</p><p>通过配置：multiline.pattern: ‘^\d{4}’（匹配4个数字年份开头的）来进行控制。使得这一批的数据作为一行解析展示。</p></blockquote><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><pre class=" language-shell"><code class="language-shell">(nohup ./filebeat -e -c filebeat.yml >/dev/null 2>&1 &)</code></pre><blockquote><ol><li>将所有标准输出及标准错误输出到 /dev/null 空设备，即没有任何输出。</li><li>停止服务，通过 ps -ef |grep filebeat 命令找到对应的进程，通过 kill -9 进行停止。</li></ol></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> EFK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EFK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office_文件在线预览</title>
      <link href="/2023/12/06/office-wen-jian-zai-xian-yu-lan/"/>
      <url>/2023/12/06/office-wen-jian-zai-xian-yu-lan/</url>
      
        <content type="html"><![CDATA[<h1 id="Office-文件在线预览"><a href="#Office-文件在线预览" class="headerlink" title="Office_文件在线预览"></a>Office_文件在线预览</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>开源的组件可以使用：kkfileview 这个组件，具体的部署信息如下：</p><blockquote><p><a href="https://blog.csdn.net/Aria_Miazzy/article/details/131242615" target="_blank" rel="noopener">https://blog.csdn.net/Aria_Miazzy/article/details/131242615</a></p></blockquote><p>但这个方案有个不足，那就是如果文件信息是存储在阿里云上的，无法实现预览效果。无法解析阿里云的文件地址。（也有可能是我阿里云上的文件信息是私有的原因）</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>使用阿里云提供的接口，详细的使用方式如下：</p><blockquote><p><a href="https://help.aliyun.com/document_detail/468066.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/468066.html</a></p></blockquote><p>使用方式包含两部分：后端和前端。</p><ul><li>引入架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>imm20200930<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tea-openapi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tea-console<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tea-util<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>创建后端方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TFileOnlineHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> OSSConfig ossConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ITFileService fileService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 文件预览时的项目名</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String projectName <span class="token operator">=</span> <span class="token string">"xxxx"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建连接     * @param accessKeyId     * @param accessKeySecret     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> Client <span class="token function">createClient</span><span class="token punctuation">(</span>String accessKeyId<span class="token punctuation">,</span> String accessKeySecret<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setAccessKeyId</span><span class="token punctuation">(</span>accessKeyId<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setAccessKeySecret</span><span class="token punctuation">(</span>accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>endpoint <span class="token operator">=</span> ossConfig<span class="token punctuation">.</span><span class="token function">getEndImmPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 预览方法     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> String <span class="token function">online</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据 ID 查询文件地址</span>        TFile file <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调取阿里云接口</span>        Client client <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span>ossConfig<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ossConfig<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"oss://xxxx/"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GenerateWebofficeTokenRequest generateWebofficeTokenRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenerateWebofficeTokenRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setProjectName</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSourceURI</span><span class="token punctuation">(</span><span class="token string">"oss://xxxx/"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setPermission</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebofficePermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReadonly</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RuntimeOptions runtime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调取方法</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            GenerateWebofficeTokenResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">generateWebofficeTokenWithOptions</span><span class="token punctuation">(</span>generateWebofficeTokenRequest<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TeaException</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Common<span class="token punctuation">.</span><span class="token function">assertAsString</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> _error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TeaException error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeaException</span><span class="token punctuation">(</span>_error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _error<span class="token punctuation">)</span><span class="token punctuation">;</span>            Common<span class="token punctuation">.</span><span class="token function">assertAsString</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新 Token 方法     * @param accessToken     * @param refreshToken     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> String <span class="token function">refresh</span><span class="token punctuation">(</span>String accessToken<span class="token punctuation">,</span> String refreshToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调取阿里云接口</span>        Client client <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span>ossConfig<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ossConfig<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RefreshWebofficeTokenRequest refreshWebofficeTokenRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefreshWebofficeTokenRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setProjectName</span><span class="token punctuation">(</span>projectName<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setRefreshToken</span><span class="token punctuation">(</span>refreshToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        RuntimeOptions runtime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调取方法</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RefreshWebofficeTokenResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">refreshWebofficeTokenWithOptions</span><span class="token punctuation">(</span>refreshWebofficeTokenRequest<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TeaException</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Common<span class="token punctuation">.</span><span class="token function">assertAsString</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> _error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TeaException error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeaException</span><span class="token punctuation">(</span>_error<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _error<span class="token punctuation">)</span><span class="token punctuation">;</span>            Common<span class="token punctuation">.</span><span class="token function">assertAsString</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>根据文档上的教程，引入前端的 html，即可。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 文件在线预览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件在线预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用_Poi-tl_生成 Word 文档</title>
      <link href="/2023/12/06/shi-yong-poi-tl-sheng-cheng-word-wen-dang/"/>
      <url>/2023/12/06/shi-yong-poi-tl-sheng-cheng-word-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Poi-tl-生成-Word-文档"><a href="#使用-Poi-tl-生成-Word-文档" class="headerlink" title="使用 Poi-tl 生成 Word 文档"></a>使用 Poi-tl 生成 Word 文档</h1><p>参考：</p><blockquote><p><a href="https://deepoove.com/poi-tl/#_why_poi_tl" target="_blank" rel="noopener">https://deepoove.com/poi-tl/#_why_poi_tl</a></p><p><a href="https://www.cnblogs.com/god23bin/p/spring-boot-poi-tl.html" target="_blank" rel="noopener">https://www.cnblogs.com/god23bin/p/spring-boot-poi-tl.html</a></p></blockquote><h2 id="引入架包"><a href="#引入架包" class="headerlink" title="引入架包"></a>引入架包</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.deepoove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-tl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>注意</li></ul><p>如果项目里已经引入 poi 对应的架包，注意 poi-tl 和 poi 的版本要对应。参考下面的文档：</p><blockquote><p><a href="https://deepoove.com/poi-tl/" target="_blank" rel="noopener">https://deepoove.com/poi-tl/</a> </p></blockquote><h2 id="后端核心代码"><a href="#后端核心代码" class="headerlink" title="后端核心代码"></a>后端核心代码</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 3、把数据渲染到文件中去</span>MultipartFile file <span class="token operator">=</span> null<span class="token punctuation">;</span>String name <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%05d"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".docx"</span><span class="token punctuation">;</span>MultipartFile multipartFile <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">createMultipartFile</span><span class="token punctuation">(</span>resUrl<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span>XWPFTemplate xwpfTemplate <span class="token operator">=</span> XWPFTemplate<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>multipartFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>        dto<span class="token punctuation">.</span><span class="token function">getMapCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>put<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 4、将完成数据渲染的文档写入到输入流</span>    ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xwpfTemplate<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5、将输入流转成 multipartFile</span>    file <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">createByteMultipartFile</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setRecord</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> template<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>注意</li></ul><p>XWPFTemplate.compile() 支持的参数有下面三种：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 传递文件地址</span><span class="token keyword">public</span> <span class="token keyword">static</span> XWPFTemplate <span class="token function">compile</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 传递文件类</span><span class="token keyword">public</span> <span class="token keyword">static</span> XWPFTemplate <span class="token function">compile</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">compile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> Configure<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 传递文件输入流</span><span class="token keyword">public</span> <span class="token keyword">static</span> XWPFTemplate <span class="token function">compile</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">compile</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> Configure<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Poi-tl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poi-tl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud_Gateway_动态路由</title>
      <link href="/2023/12/06/springcloud-gateway-dong-tai-lu-you/"/>
      <url>/2023/12/06/springcloud-gateway-dong-tai-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud-Gateway-动态路由"><a href="#SpringCloud-Gateway-动态路由" class="headerlink" title="SpringCloud_Gateway_动态路由"></a>SpringCloud_Gateway_动态路由</h1><ul><li>思路一</li></ul><p>配置项目路由，一般想到的就是在配置文件内添加对应的配置，这种方式也是可以实现。</p><p>但如果增加新的项目后，对应的项目也需要修改，然后重新启动。</p><ul><li>思路二</li></ul><p>在思路一的基础上，思考我们想要的效果，那就是即使后续增加新的项目，我也不需要去改动路由项目，也就是说配置的修改和刷新是动态的。</p><p>根据这个思路，可以联想到使用的 Nacos 作为配置中心的功能模块，刚好可以实现上述的功能，因此尝试使用 Nacos 和 GateWay 来实现。</p><p>可参考下面文档：</p><blockquote><p><a href="https://www.jianshu.com/p/0d408fd4afe3" target="_blank" rel="noopener">https://www.jianshu.com/p/0d408fd4afe3</a></p></blockquote><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 引入对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- gateway 网关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--nacos 服务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- nacos 配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- springcloud 的负载均衡，没有这个，网关会报 503--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- springboot 的监控，自动加载配置的核心--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用 bootstrap.yml 需要引入这个配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>注意：</strong></p><ul><li><p>spring-cloud-starter-gateway 不能和 spring-boot-starter-web 包共存。</p></li><li><p>如果不引入 spring-cloud-starter-loadbalancer，访问接口的时候会报：503。</p></li></ul><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>bootstrap.yml 文件添加配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9094</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> rhx<span class="token punctuation">-</span>gateway  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token string">'@profile.name@'</span><span class="token comment" spellcheck="true"># 日志级别配置</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> info    <span class="token key atrule">com.rhx.gateway</span><span class="token punctuation">:</span> debug</code></pre><ul><li>bootstrap-dev.yml 文件添加配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># nacos 配置</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> xxxx<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">group</span><span class="token punctuation">:</span> dev      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> xxxx<span class="token punctuation">:</span><span class="token number">8848</span>         <span class="token comment" spellcheck="true"># 指定配置文件格式</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token comment" spellcheck="true"># 配置文件一定要指定命名空间，否则解析不到</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 547b6b16<span class="token punctuation">-</span>f571<span class="token punctuation">-</span>4ad4<span class="token punctuation">-</span>9c0f<span class="token punctuation">-</span>ac3bee137cf5        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEV</code></pre><p><strong>注意：</strong></p><ul><li>使用动态路由，需要指定的配置文件是：bootstrap.yml，而不是：application.yml。</li><li>如果添加 application.yml，只是在里面指定：spring.profiles.active。在项目运行的过程中会报：currentServerAddr:xxxx:8848， err : Connect timed out 这样的错误。</li><li>配置文件需要指定命名空间：namespace，否则解析不到配置文件。</li><li>默认加载的配置文件名称为：rhx-gateway-dev.yaml。（rhx-gateway 是项目名，dev 是此时 ‘@profile.name@’ 的值，yaml 是此时指定的配置文件格式）</li></ul><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>配置跨域</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 配置 gateway 的跨域 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsWebFilter <span class="token function">corsWebFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathPatternParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>解决跨域出现 Origin 重复的问题（Spring Cloud Gateway 2.x 版本）</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 解决 Spring Cloud Gateway 2.x 跨域时，出现重复 Origin 的 BUG */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsResponseHeaderFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定此过滤器位于 NettyWriteResponseFilter 之后</span>        <span class="token comment" spellcheck="true">// 即待处理完响应体后接着处理响应头</span>        <span class="token keyword">return</span> NettyWriteResponseFilter<span class="token punctuation">.</span>WRITE_RESPONSE_FILTER_ORDER <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>kv <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>kv<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> kv<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>kv <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>kv<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>ACCESS_CONTROL_ALLOW_ORIGIN<span class="token punctuation">)</span>                            <span class="token operator">||</span> kv<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>ACCESS_CONTROL_ALLOW_CREDENTIALS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>kv <span class="token operator">-</span><span class="token operator">></span> kv<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>                        <span class="token function">add</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>添加访问日志类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 网关的访问日志类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessLog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 链路追踪编号     */</span>    <span class="token keyword">private</span> String traceId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户编号     */</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户类型     */</span>    <span class="token keyword">private</span> Integer userType<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 路由     *     * 类似 ApiAccessLogCreateReqDTO 的 applicationName     */</span>    <span class="token keyword">private</span> Route route<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 协议     */</span>    <span class="token keyword">private</span> String schema<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求方法名     */</span>    <span class="token keyword">private</span> String requestMethod<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 访问地址     */</span>    <span class="token keyword">private</span> String requestUrl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询参数     */</span>    <span class="token keyword">private</span> MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> queryParams<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求体     */</span>    <span class="token keyword">private</span> String requestBody<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求头     */</span>    <span class="token keyword">private</span> MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> requestHeaders<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户 IP     */</span>    <span class="token keyword">private</span> String userIp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 响应体     *     * 类似 ApiAccessLogCreateReqDTO 的 resultCode + resultMsg     */</span>    <span class="token keyword">private</span> String responseBody<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 响应头     */</span>    <span class="token keyword">private</span> MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> responseHeaders<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 响应结果     */</span>    <span class="token keyword">private</span> HttpStatus httpStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 开始请求时间     */</span>    <span class="token keyword">private</span> LocalDateTime startTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 结束请求时间     */</span>    <span class="token keyword">private</span> LocalDateTime endTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 执行时长，单位：毫秒     */</span>    <span class="token keyword">private</span> Integer duration<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><ul><li>定义日志过滤器</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 网关的访问日志过滤器 * */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessLogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>HttpMessageReader<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> messageReaders <span class="token operator">=</span> HandlerStrategies<span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">messageReaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 打印日志     *     * @param gatewayLog 网关日志     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeAccessLog</span><span class="token punctuation">(</span>AccessLog gatewayLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方式一：打印 Logger 后，通过 ELK 进行收集</span>        <span class="token comment" spellcheck="true">// log.info("[writeAccessLog][日志内容：{}]", JsonUtils.toJsonString(gatewayLog));</span>        <span class="token comment" spellcheck="true">// 方式二：打印到控制台，方便排查错误</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> values <span class="token operator">=</span> MapUtil<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 手工拼接，保证排序；15 保证不用扩容</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"routeId"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"schema"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"requestUrl"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getRequestUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"queryParams"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSingleValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"requestBody"</span><span class="token punctuation">,</span> JSONUtil<span class="token punctuation">.</span><span class="token function">isTypeJSON</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token comment" spellcheck="true">// 保证 body 的展示好看</span>                JSONUtil<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"requestHeaders"</span><span class="token punctuation">,</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">.</span><span class="token function">getRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSingleValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userIp"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getUserIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* values.put("responseBody", JSONUtil.isTypeJSON(gatewayLog.getResponseBody()) ? // 保证 body 的展示好看                JSONUtil.parse(gatewayLog.getResponseBody()) : gatewayLog.getResponseBody());*/</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"responseHeaders"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span>                JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">.</span><span class="token function">getResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSingleValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"httpStatus"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getHttpStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startTime"</span><span class="token punctuation">,</span> LocalDateTimeUtil<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NORM_DATETIME_MS_FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"endTime"</span><span class="token punctuation">,</span> LocalDateTimeUtil<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NORM_DATETIME_MS_FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"duration"</span><span class="token punctuation">,</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> gatewayLog<span class="token punctuation">.</span><span class="token function">getDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms"</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[writeAccessLog][网关日志：{}]"</span><span class="token punctuation">,</span> JSONUtil<span class="token punctuation">.</span><span class="token function">toJsonPrettyStr</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将 Request 中可以直接获取到的参数，设置到网关日志</span>        ServerHttpRequest request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO traceId</span>        AccessLog gatewayLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setRoute</span><span class="token punctuation">(</span><span class="token function">getGatewayRoute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setSchema</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethodValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setRequestUrl</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setQueryParams</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setRequestHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gatewayLog<span class="token punctuation">.</span><span class="token function">setUserIp</span><span class="token punctuation">(</span><span class="token function">getClientIP</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 继续 filter 过滤</span>        MediaType mediaType <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED<span class="token punctuation">.</span><span class="token function">isCompatibleWith</span><span class="token punctuation">(</span>mediaType<span class="token punctuation">)</span>                <span class="token operator">||</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">.</span><span class="token function">isCompatibleWith</span><span class="token punctuation">(</span>mediaType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 适合 JSON 和 Form 提交的请求</span>            <span class="token keyword">return</span> <span class="token function">filterWithRequestBody</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> gatewayLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">filterWithoutRequestBody</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> gatewayLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得客户端 IP     *     * 参考 {@link ServletUtil} 的 getClientIP 方法     *     * @param exchange 请求     * @param otherHeaderNames 其它 header 名字的数组     * @return 客户端 IP     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getClientIP</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> otherHeaderNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"X-Forwarded-For"</span><span class="token punctuation">,</span> <span class="token string">"X-Real-IP"</span><span class="token punctuation">,</span> <span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">,</span> <span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">,</span> <span class="token string">"HTTP_CLIENT_IP"</span><span class="token punctuation">,</span> <span class="token string">"HTTP_X_FORWARDED_FOR"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>otherHeaderNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            headers <span class="token operator">=</span> ArrayUtil<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> otherHeaderNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 方式一，通过 header 获取</span>        String ip<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String header <span class="token operator">:</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>NetUtil<span class="token punctuation">.</span><span class="token function">isUnknown</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> NetUtil<span class="token punctuation">.</span><span class="token function">getMultistageReverseProxyIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 方式二，通过 remoteAddress 获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ip <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NetUtil<span class="token punctuation">.</span><span class="token function">getMultistageReverseProxyIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得请求匹配的 Route 路由     *     * @param exchange 请求     * @return 路由     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Route <span class="token function">getGatewayRoute</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ServerWebExchangeUtils<span class="token punctuation">.</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filterWithoutRequestBody</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">,</span> AccessLog accessLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 包装 Response，用于记录 Response Body</span>        ServerHttpResponseDecorator decoratedResponse <span class="token operator">=</span> <span class="token function">recordResponseLog</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> accessLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>decoratedResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">writeAccessLog</span><span class="token punctuation">(</span>accessLog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印日志</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 参考 {@link ModifyRequestBodyGatewayFilterFactory} 实现     *     * 差别主要在于使用 modifiedBody 来读取 Request Body 数据     */</span>    <span class="token keyword">private</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filterWithRequestBody</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">,</span> AccessLog gatewayLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置 Request Body 读取时，设置到网关日志</span>        ServerRequest serverRequest <span class="token operator">=</span> ServerRequest<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> messageReaders<span class="token punctuation">)</span><span class="token punctuation">;</span>        Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> modifiedBody <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>body <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            gatewayLog<span class="token punctuation">.</span><span class="token function">setRequestBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 BodyInserter 对象</span>        BodyInserter<span class="token operator">&lt;</span>Mono<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> ReactiveHttpOutputMessage<span class="token operator">></span> bodyInserter <span class="token operator">=</span> BodyInserters<span class="token punctuation">.</span><span class="token function">fromPublisher</span><span class="token punctuation">(</span>modifiedBody<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 CachedBodyOutputMessage 对象</span>        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// the new content type will be computed by bodyInserter</span>        <span class="token comment" spellcheck="true">// and then set in the request decorator</span>        headers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 移除</span>        CachedBodyOutputMessage outputMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachedBodyOutputMessage</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过 BodyInserter 将 Request Body 写入到 CachedBodyOutputMessage 中</span>        <span class="token keyword">return</span> bodyInserter<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>outputMessage<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BodyInserterContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 包装 Request，用于缓存 Request Body</span>            ServerHttpRequest decoratedRequest <span class="token operator">=</span> <span class="token function">requestDecorate</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 包装 Response，用于记录 Response Body</span>            ServerHttpResponseDecorator decoratedResponse <span class="token operator">=</span> <span class="token function">recordResponseLog</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> gatewayLog<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 记录普通的</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>decoratedRequest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>decoratedResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">writeAccessLog</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印日志</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 记录响应日志     * 通过 DataBufferFactory 解决响应体分段传输问题。     */</span>    <span class="token keyword">private</span> ServerHttpResponseDecorator <span class="token function">recordResponseLog</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> AccessLog gatewayLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServerHttpResponse response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerHttpResponseDecorator</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">writeWith</span><span class="token punctuation">(</span>Publisher<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token operator">></span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Flux</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">/* DataBufferFactory bufferFactory = response.bufferFactory();*/</span>                    <span class="token comment" spellcheck="true">// 计算执行时间</span>                    gatewayLog<span class="token punctuation">.</span><span class="token function">setEndTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    gatewayLog<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>LocalDateTimeUtil<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>gatewayLog<span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            gatewayLog<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置其它字段</span>                    gatewayLog<span class="token punctuation">.</span><span class="token function">setResponseHeaders</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    gatewayLog<span class="token punctuation">.</span><span class="token function">setHttpStatus</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取响应类型，如果是 json 就打印</span>                   <span class="token comment" spellcheck="true">/* String originalResponseContentType = exchange.getAttribute(ServerWebExchangeUtils.ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR);                    if (StringUtils.isNotBlank(originalResponseContentType)                            &amp;&amp; originalResponseContentType.contains("application/json")) {                        Flux&lt;? extends DataBuffer> fluxBody = Flux.from(body);                        return super.writeWith(fluxBody.buffer().map(dataBuffers -> {                            // 设置 response body 到网关日志                            byte[] content = readContent(dataBuffers);                            String responseResult = new String(content, StandardCharsets.UTF_8);                            gatewayLog.setResponseBody(responseResult);                            // 响应                            return bufferFactory.wrap(content);                        }));                    }*/</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// if body is not a flux. never got there.</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ========== 参考 ModifyRequestBodyGatewayFilterFactory 中的方法 ==========</span>    <span class="token comment" spellcheck="true">/**     * 请求装饰器，支持重新计算 headers、body 缓存     *     * @param exchange 请求     * @param headers 请求头     * @param outputMessage body 缓存     * @return 请求装饰器     */</span>    <span class="token keyword">private</span> ServerHttpRequestDecorator <span class="token function">requestDecorate</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> HttpHeaders headers<span class="token punctuation">,</span> CachedBodyOutputMessage outputMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerHttpRequestDecorator</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> HttpHeaders <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> contentLength <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                HttpHeaders httpHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                httpHeaders<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    httpHeaders<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO: this causes a 'HTTP/1.1 411 Length Required' // on</span>                    <span class="token comment" spellcheck="true">// httpbin.org</span>                    httpHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>TRANSFER_ENCODING<span class="token punctuation">,</span> <span class="token string">"chunked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> httpHeaders<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>DataBuffer<span class="token operator">></span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readContent</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token operator">></span> dataBuffers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 合并多个流集合，解决返回体分段传输</span>        DataBufferFactory dataBufferFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultDataBufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataBuffer join <span class="token operator">=</span> dataBufferFactory<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dataBuffers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>join<span class="token punctuation">.</span><span class="token function">readableByteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        join<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 释放掉内存</span>        DataBufferUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><ul><li>定义全局异常</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Gateway 的全局异常 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保证优先级高于默认的 Spring Cloud Gateway 的 ErrorWebExceptionHandler 实现</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ErrorWebExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handle</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> Throwable ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 已经 commit，则直接返回异常</span>        ServerHttpResponse response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 转换成 CommonResult</span>        R<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">ResponseStatusException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">responseStatusExceptionHandler</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token punctuation">(</span>ResponseStatusException<span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">defaultExceptionHandler</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回给前端</span>        <span class="token keyword">return</span> <span class="token function">writeJSON</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理 Spring Cloud Gateway 默认抛出的 ResponseStatusException 异常     */</span>    <span class="token keyword">private</span> R<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">responseStatusExceptionHandler</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> ResponseStatusException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServerHttpRequest request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[responseStatusExceptionHandler][uri({}/{}) 发生异常]"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理系统异常，兜底处理所有的一切     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">defaultExceptionHandler</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> Throwable ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServerHttpRequest request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[defaultExceptionHandler][uri({}/{}) 发生异常]"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>ExcepCode<span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span>code<span class="token punctuation">,</span> ExcepCode<span class="token punctuation">.</span>SYSTEM_ERROR<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回前端JSON数据     * @param exchange     * @param object     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">writeJSON</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置 header</span>        ServerHttpResponse response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置 body</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">fromSupplier</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            DataBufferFactory bufferFactory <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> bufferFactory<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONBytes</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ServerHttpRequest request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[writeJSON][uri({}/{}) 发生异常]"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> bufferFactory<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><ul><li>在 Nacos 的配置列表的命名空间内配置 rhx-gateway-dev.yaml 文件。</li></ul><blockquote><ol><li>指定 Data ID：rhx-gateway-dev.yaml。</li><li>Group：DEV。</li><li>配置内容：</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> rhx<span class="token punctuation">-</span>client          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//rhx<span class="token punctuation">-</span>client          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> Path=/client/**         <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> rhx<span class="token punctuation">-</span>manage           <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//rhx<span class="token punctuation">-</span>manage          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> Path=/manage/** </code></pre></blockquote><ol><li>这里只是配置了路由分发功能的实现，后续如果有新的项目，只需要修改 rhx-gateway-dev.yaml 文件里的配置，然后发布即可，不需要该动项目。</li><li>路由拦截校验根据自己实际的项目需求来增加。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_拦截器</title>
      <link href="/2023/12/06/springboot-lan-jie-qi/"/>
      <url>/2023/12/06/springboot-lan-jie-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-拦截器"><a href="#SpringBoot-拦截器" class="headerlink" title="SpringBoot_拦截器"></a>SpringBoot_拦截器</h1><blockquote><ul><li>preHandle 预处理回调方法，实现处理器的预处理。返回值：true表示继续流程。false表示流程中断不会继续调用其他的拦截器或处理器，此时我们需要通过 response 来产生响应。</li><li>postHandle 后处理回调方法，实现处理器的后处理。</li><li>afterCompletion 整个请求处理完毕回调方法。</li></ul></blockquote><h2 id="定义拦截器，实现接口-HandlerInterceptor"><a href="#定义拦截器，实现接口-HandlerInterceptor" class="headerlink" title="定义拦截器，实现接口 HandlerInterceptor"></a>定义拦截器，实现接口 HandlerInterceptor</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ITUserService itUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOKEN <span class="token operator">=</span> <span class="token string">"X-Access-Token"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Long VALID_TIME <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> 60L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>TOKEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>TOKEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JeecgBoot401Exception</span><span class="token punctuation">(</span><span class="token string">"请求token为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TOKEN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    token <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JeecgBoot401Exception</span><span class="token punctuation">(</span><span class="token string">"请求token为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String tokenKey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>PRODUCT_USER_TOKEN<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        String userInfo <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AuthInfo authInfo <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span>AuthInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CurrentUserUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>authInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LambdaQueryWrapper queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span>TUser<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TUser<span class="token operator">:</span><span class="token operator">:</span>getToken<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        TUser tUser <span class="token operator">=</span> itUserService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tUser<span class="token punctuation">)</span> <span class="token operator">||</span> tUser<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户非法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JeecgBoot401Exception</span><span class="token punctuation">(</span><span class="token string">"token已失效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Long restTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> tUser<span class="token punctuation">.</span><span class="token function">getTokenValidTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>restTime <span class="token operator">>=</span> VALID_TIME<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JeecgBoot401Exception</span><span class="token punctuation">(</span><span class="token string">"token已失效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AuthInfo authInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authInfo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>tUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authInfo<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>tUser<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authInfo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>tUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>authInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> VALID_TIME <span class="token operator">-</span> restTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        CurrentUserUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>authInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="过滤拦截，实现-WebMvcConfigurer-接口"><a href="#过滤拦截，实现-WebMvcConfigurer-接口" class="headerlink" title="过滤拦截，实现 WebMvcConfigurer 接口"></a>过滤拦截，实现 WebMvcConfigurer 接口</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiAuthConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ApiInterceptor apiInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>apiInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/formula/download"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>如果项目里有多个类继承了 WebMvcConfigurer 那么只会有一个类生效。</strong></p><h2 id="实际使用-项目中拦截-Token"><a href="#实际使用-项目中拦截-Token" class="headerlink" title="实际使用-项目中拦截 Token"></a>实际使用-项目中拦截 Token</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>自定义拦截器实现 HandlerInterceptor 接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> TUserClient userClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过请求token核验用户身份，获取用户id     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        LoginUser loginUser <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            LoginUserUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"User Token Is Illegal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        LoginUserUtils<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>自定义获取 Token 的工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SecurityUtils 工具类 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据request获取请求token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getToken</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从 Hearder 中获取</span>        String header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从 Parameter 中获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从 Cookie 中获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Request Token Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    header <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 都为空的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Request Token Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>header<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Request Token Bearer Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JwtUtils<span class="token punctuation">.</span><span class="token function">getUserKey</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>自定义 JWT 工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Jwt工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String secret <span class="token operator">=</span> TokenConstants<span class="token punctuation">.</span>SECRET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从令牌中获取数据声明     *     * @param token 令牌     * @return 数据声明     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">parseToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户标识     *      * @param token 令牌     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserKey</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据身份信息获取键值     *      * @param claims 身份信息     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getValue</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">,</span> String key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>自定义用户信息工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * LoginUserUtils 工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUserUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LoginUserUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>LoginUser<span class="token operator">></span> CURRENT_USER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>LoginUser loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CURRENT_USER<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LoginUser <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> CURRENT_USER<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CURRENT_USER<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>ThreadLocal</li></ul><p>通过 ThreadLocal 为每一个访问程序的线程，提供独立的实例。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul><li>启用拦截器，实现 WebMvcConfigurer 接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> LoginInterceptor loginInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/carbon/calculation/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 显示 swagger<span class="token operator">-</span>ui<span class="token punctuation">.</span>html文档展示页，还必须注入 swagger 资源     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"swagger-ui.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"doc.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>addInterceptors</li></ul><p>方法为添加拦截的规则，如上所有访问路径为：<code>/api/**</code>都会被拦截。在拦截之外还可以添加额外的控制，在上述的拦截规则下，接口：<code>/api/carbon/calculation/*</code> 就不会被拦截。</p><ul><li>addResourceHandlers</li></ul><p>添加静态资源的映射，如果本地项目中有静态资源信息，这一块需要添加，否则无法访问。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Knife4j_整合_Swagger3</title>
      <link href="/2023/12/05/knife4j-zheng-he-swagger3/"/>
      <url>/2023/12/05/knife4j-zheng-he-swagger3/</url>
      
        <content type="html"><![CDATA[<h1 id="Knife4j整合Swagger3"><a href="#Knife4j整合Swagger3" class="headerlink" title="Knife4j整合Swagger3"></a>Knife4j整合Swagger3</h1><h2 id="引入架包"><a href="#引入架包" class="headerlink" title="引入架包"></a>引入架包</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--knife4j--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="配置文件添加"><a href="#配置文件添加" class="headerlink" title="配置文件添加"></a>配置文件添加</h2><pre class=" language-yml"><code class="language-yml">spring:  mvc:    pathmatch:      matching-strategy: ant_path_matcher</code></pre><h2 id="定义配置类"><a href="#定义配置类" class="headerlink" title="定义配置类"></a>定义配置类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @EnableOpenApi 开启 Swagger3 的注解。与 Swagger2 启动注解不同 @EnableSwagger2 * @EnableKnife4j 开启 Knife4j * 不需要重写 BeanPostProcessor 类来实现兼容 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableOpenApi</span><span class="token annotation punctuation">@EnableKnife4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 显示swagger-ui.html文档展示页，还必须注入swagger资源：     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"swagger-ui.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"doc.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> swagger2的配置文件，这里可以配置swagger2的一些基本的内容，比如扫描的包等等     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"docket"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//此包路径下的类，才生成接口文档</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.reach24.xxxx.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//加了ApiOperation注解的类，才生成接口文档</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">withClassAnnotation</span><span class="token punctuation">(</span>RestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * api文档的详细信息函数,注意这里的注解引用的是哪个     */</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//大标题</span>            <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"微服务后台服务API接口文档"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 版本号</span>            <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 描述</span>            <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"后台API接口"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 作者</span>            <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"杭州xxxx互联网事业部"</span><span class="token punctuation">,</span><span class="token string">"www.xxxx.com"</span><span class="token punctuation">,</span><span class="token string">"xxxx.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">license</span><span class="token punctuation">(</span><span class="token string">"The Apache License, Version 2.0"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">licenseUrl</span><span class="token punctuation">(</span><span class="token string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>不需要重写 BeanPostProcessor 类来实现兼容。</strong></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>使用 swagger3 需要的架包是：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--swagger3--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>使用 knife4j 需要的架包是：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--knife4j--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${knife4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>如果两个接口的地址都需要，那么这两个架包都少不了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Knife4j </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knife4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目经验</title>
      <link href="/2023/07/30/xiang-mu-jing-yan/"/>
      <url>/2023/07/30/xiang-mu-jing-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h1><h2 id="自定义返回状态码"><a href="#自定义返回状态码" class="headerlink" title="自定义返回状态码"></a>自定义返回状态码</h2><ul><li>设计一个接口，定义状态码和信息的获取方式</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 基础状态码接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseCode</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取状态码     * @return     */</span>    Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取返回消息     * @return     */</span>    String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>设计枚举类，实现上述接口，定义具体的异常信息和状态码</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">enum</span> ExcepCode <span class="token keyword">implements</span> <span class="token class-name">BaseCode</span> <span class="token punctuation">{</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"SUCCESS"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FAIL</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"FAIL"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PHONE_FORMAT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"手机号码格式错误！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">public</span> String message<span class="token punctuation">;</span>    <span class="token function">ExcepCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="SpringBoot-配置-Redis-使用-FastJson-进行序列化"><a href="#SpringBoot-配置-Redis-使用-FastJson-进行序列化" class="headerlink" title="SpringBoot 配置 Redis 使用 FastJson 进行序列化"></a>SpringBoot 配置 Redis 使用 FastJson 进行序列化</h2><ul><li>引入架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--redis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--redis的lettuce连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--fastjson--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>application.yml 配置连接</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token key atrule">password</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 连接超时时间（毫秒）</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 关闭超时时间</span>      <span class="token key atrule">shutdown-timeout</span><span class="token punctuation">:</span> 1s      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">1000</span>        <span class="token comment" spellcheck="true"># 连接池中的最大空闲连接 默认 8</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">300</span>        <span class="token comment" spellcheck="true"># 连接池中的最小空闲连接 默认 0</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">3</span>        <span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 1s</code></pre><ul><li>自定义 FastJsonRedisSerializer 用来实现 Redis 的序列化</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义 FastJsonRedisSerializer 用来实现 Redis 的序列化 * @param &lt;T> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RedisSerializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FastJsonRedisSerializer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerializationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> SerializerFeature<span class="token punctuation">.</span>WriteClassName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerializationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObjectMapper</span><span class="token punctuation">(</span>ObjectMapper objectMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">,</span> <span class="token string">"'objectMapper' must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper <span class="token operator">=</span> objectMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>新增 RedisConfig 配置类，配置 Redis 信息</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 配置 Redis，通过自定义的 FastJsonRedisSerializer 用来实现 Redis 的序列化 * 如果这个类上加上 @EnableCaching 这个注解，然后重写 RedisCacheManager 这个 Bean,那么在 Service 层可以使用 @Cacheable、@CachePut 和 @CacheEvict 这些注解把对应的缓存数据写入 Redis */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span> <span class="token annotation punctuation">@Lazy</span> LettuceConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FastJsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> fastJsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span> ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">,</span> JsonTypeInfo<span class="token punctuation">.</span>As<span class="token punctuation">.</span>PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        fastJsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>fastJsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>fastJsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        ParserConfig<span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAccept</span><span class="token punctuation">(</span><span class="token string">"com.rhx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>参考资料</li></ul><blockquote><ol><li><a href="https://juejin.cn/post/6897914682238550023" target="_blank" rel="noopener">https://juejin.cn/post/6897914682238550023</a></li><li><a href="https://juejin.cn/post/7076244567569203208#heading-6" target="_blank" rel="noopener">https://juejin.cn/post/7076244567569203208#heading-6</a></li><li><a href="https://blog.csdn.net/moshowgame/article/details/83246363" target="_blank" rel="noopener">https://blog.csdn.net/moshowgame/article/details/83246363</a></li></ol></blockquote><h2 id="使用-PageHelper-进行分页"><a href="#使用-PageHelper-进行分页" class="headerlink" title="使用 PageHelper 进行分页"></a>使用 PageHelper 进行分页</h2><ul><li>引入架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--使用pagehelper进行分页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--因为 mybatisplus 已经包含 mybatis了，这里去除，避免依赖冲突 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--因为 mybatisplus 已经包含 mybatis-spring了，这里去除，避免依赖冲突 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>application.yml 配置文件</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># pagehelper 配置</span><span class="token key atrule">pagehelper</span><span class="token punctuation">:</span>  <span class="token key atrule">helper-dialect</span><span class="token punctuation">:</span> mysql  <span class="token comment" spellcheck="true"># 分页插件会自动检测当前的数据库链接</span>  <span class="token key atrule">auto-dialect</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 分页合理化参数,当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页，pageNum>pages （超过总数时），会查询最后一页</span>  <span class="token key atrule">reasonable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 支持通过 Mapper 接口参数传递 page 参数</span>  <span class="token key atrule">support-methods-arguments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit =0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）</span>  <span class="token key atrule">page-size-zero</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># 为了支持 startPage(Object params) 方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值</span>  <span class="token key atrule">params</span><span class="token punctuation">:</span> count=countSql</code></pre><ul><li>代码编程</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// service 层</span><span class="token keyword">public</span> PageInfo<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getSysUserPage</span><span class="token punctuation">(</span>SysUserPageDTO pageDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageDTO<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageDTO<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>SysUserPageVO<span class="token operator">></span> page <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>pageDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// mapper 层，注意这里变量一定要使用 @Param() 修饰</span>List<span class="token operator">&lt;</span>SysUserPageVO<span class="token operator">></span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"pageDTO"</span><span class="token punctuation">)</span> SysUserPageDTO pageDTO<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"># 注意这里的变量带前缀：pageDTO，这个前缀就是 mapper 里 @Param() 修饰的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getPage<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhx.manage.model.vo.SysUserPageVO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select a.* from t_sys_user a        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pageDTO.status !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and a.status = #{pageDTO.status}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    order by a.create_time desc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="菜单权限设计和多租户系统"><a href="#菜单权限设计和多租户系统" class="headerlink" title="菜单权限设计和多租户系统"></a>菜单权限设计和多租户系统</h2><blockquote><ol><li><a href="https://zhuanlan.zhihu.com/p/296519030" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/296519030</a></li><li><a href="https://blog.csdn.net/dxflqm_pz/article/details/128838366" target="_blank" rel="noopener">https://blog.csdn.net/dxflqm_pz/article/details/128838366</a></li><li><a href="https://www.cnblogs.com/niuben/p/11063777.html" target="_blank" rel="noopener">https://www.cnblogs.com/niuben/p/11063777.html</a></li><li><a href="https://blog.csdn.net/CBGCampus/article/details/128663600" target="_blank" rel="noopener">https://blog.csdn.net/CBGCampus/article/details/128663600</a></li><li><a href="https://blog.csdn.net/qq_42764468/article/details/126719689" target="_blank" rel="noopener">https://blog.csdn.net/qq_42764468/article/details/126719689</a></li><li><a href="https://blog.csdn.net/qq_37377082/article/details/117459588" target="_blank" rel="noopener">https://blog.csdn.net/qq_37377082/article/details/117459588</a></li></ol></blockquote><h2 id="SpringBoot-集成-JWT-实现-Token-验证"><a href="#SpringBoot-集成-JWT-实现-Token-验证" class="headerlink" title="SpringBoot 集成 JWT 实现 Token 验证"></a>SpringBoot 集成 JWT 实现 Token 验证</h2><ul><li>引入架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- JWT --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="定义常量类"><a href="#定义常量类" class="headerlink" title="定义常量类"></a>定义常量类</h3><ul><li>定义 Redis 常量类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Redis 常量类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConstants</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册验证码 key 前缀     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REGISTER_CODE_KEY <span class="token operator">=</span> <span class="token string">"register_codes:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注册验证码 key 过期时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> REGISTER_TIME <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 登录验证码 key 前缀     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOGIN_CODE_KEY <span class="token operator">=</span> <span class="token string">"login_codes:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 缓存有效期     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> EXPIRED_TIME <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 权限缓存前缀     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String LOGIN_TOKEN_KEY <span class="token operator">=</span> <span class="token string">"login_tokens:"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义权限相关的常量</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 权限相关通用常量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConstants</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户ID字段     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_ID <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户手机号码段     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_PHONE <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户标识     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_KEY <span class="token operator">=</span> <span class="token string">"user_key"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户名字段     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_NAME <span class="token operator">=</span> <span class="token string">"NAME"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义 Token 常量</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Token 常量类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenConstants</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 令牌自定义标识     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTHENTICATION <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 令牌前缀     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PREFIX <span class="token operator">=</span> <span class="token string">"Bearer "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 令牌秘钥     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String SECRET <span class="token operator">=</span> <span class="token string">"zyxwvutsrqponmlkjihgfedcba"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="定义工具类"><a href="#定义工具类" class="headerlink" title="定义工具类"></a>定义工具类</h3><ul><li>定义客户端工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 客户端工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取String参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取String参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String defaultValue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取Integer参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">getParameterToInt</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取Integer参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">getParameterToInt</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer defaultValue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取Boolean参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">getParameterToBool</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toBool</span><span class="token punctuation">(</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取Boolean参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">getParameterToBool</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Boolean defaultValue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toBool</span><span class="token punctuation">(</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得所有请求参数     *     * @param request 请求对象{@link ServletRequest}     * @return Map     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">getParams</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得所有请求参数     *     * @param request 请求对象{@link ServletRequest}     * @return Map     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getParamMap</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> entry <span class="token operator">:</span> <span class="token function">getParams</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取request     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HttpServletRequest <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取response     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HttpServletResponse <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取session     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HttpSession <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ServletRequestAttributes <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            RequestAttributes attributes <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> attributes<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getHeader</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span>EMPTY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">urlDecode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedCaseInsensitiveMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> enumeration <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>enumeration <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                String key <span class="token operator">=</span> enumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将字符串渲染到客户端     *      * @param response 渲染对象     * @param string 待渲染的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">renderString</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否是Ajax异步请求     *      * @param request     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAjaxRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String accept <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accept <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> accept<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String xRequestedWith <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xRequestedWith <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> xRequestedWith<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"XMLHttpRequest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inStringIgnoreCase</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String ajax <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"__ajax"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">inStringIgnoreCase</span><span class="token punctuation">(</span>ajax<span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">,</span> <span class="token string">"xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否包含字符串     *     * @param str 验证字符串     * @param strs 字符串组     * @return 包含返回true     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">inStringIgnoreCase</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> strs <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> strs<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 去空格     * @param str     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">trim</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 内容编码     *      * @param str 内容     * @return 编码后的内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">urlEncode</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span>EMPTY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 内容解码     *      * @param str 内容     * @return 解码后的内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">urlDecode</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span>EMPTY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置webflux模型响应     *     * @param response ServerHttpResponse     * @param value 响应内容     * @return Mono&lt;Void>     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>ServerHttpResponse response<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置webflux模型响应     *     * @param response ServerHttpResponse     * @param code 响应状态码     * @param value 响应内容     * @return Mono&lt;Void>     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>ServerHttpResponse response<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> value<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置webflux模型响应     *     * @param response ServerHttpResponse     * @param status http状态码     * @param code 响应状态码     * @param value 响应内容     * @return Mono&lt;Void>     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>ServerHttpResponse response<span class="token punctuation">,</span> HttpStatus status<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">,</span> status<span class="token punctuation">,</span> value<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置webflux模型响应     *     * @param response ServerHttpResponse     * @param contentType content-type     * @param status http状态码     * @param code 响应状态码     * @param value 响应内容     * @return Mono&lt;Void>     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>ServerHttpResponse response<span class="token punctuation">,</span> String contentType<span class="token punctuation">,</span> HttpStatus status<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataBuffer dataBuffer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>dataBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义 Token 相关的工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SecurityUtils 工具类 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取请求token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getToken</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>ServletUtils<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据request获取请求token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getToken</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从 Hearder 中获取</span>        String header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从 Parameter 中获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从 Cookie 中获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Request Token Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TokenConstants<span class="token punctuation">.</span>AUTHENTICATION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    header <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 都为空的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Request Token Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>header<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Request Token Bearer Is Empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JwtUtils<span class="token punctuation">.</span><span class="token function">getUserKey</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>TokenConstants<span class="token punctuation">.</span>PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义 JWT 工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Jwt工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String secret <span class="token operator">=</span> TokenConstants<span class="token punctuation">.</span>SECRET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从数据声明生成令牌     *     * @param claims 数据声明     * @return 令牌     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">createToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从令牌中获取数据声明     *     * @param token 令牌     * @return 数据声明     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">parseToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户标识     *      * @param token 令牌     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserKey</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户标识     *      * @param claims 身份信息     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserKey</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户ID     *      * @param token 令牌     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserId</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据身份信息获取用户ID     *      * @param claims 身份信息     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserId</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据令牌获取用户名     *      * @param token 令牌     * @return 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_PHONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据身份信息获取用户名     *      * @param claims 身份信息     * @return 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> SecurityConstants<span class="token punctuation">.</span>USER_PHONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据身份信息获取键值     *      * @param claims 身份信息     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getValue</span><span class="token punctuation">(</span>Claims claims<span class="token punctuation">,</span> String key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义登录用户信息实体类</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> User 类，提供给生成 Token 和登录拦截使用 <span class="token operator">*</span><span class="token operator">/</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUser</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户ID     */</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 手机号码     */</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 邮箱     */</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 姓名     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Token     */</span>    <span class="token keyword">private</span> String token<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最后登录时间，这里保存的是毫秒     */</span>    <span class="token keyword">private</span> Long lastLoginTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Token 过期时间，这里保存的是毫秒     */</span>    <span class="token keyword">private</span> Long tokenTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义记录登录用户信息工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * LoginUserUtils 工具类 * 使用 ThreadLocal 存储用户登录信息 * ThreadLocal 可以将用户信息保存在线程中，当请求结束后我们在把保存的信息清除掉。这样我们才开发的时候就可以直接从全局的 ThreadLocal中 很方便的获取用户信息。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUserUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LoginUserUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>LoginUser<span class="token operator">></span> CURRENT_USER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>LoginUser loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CURRENT_USER<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LoginUser <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> CURRENT_USER<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CURRENT_USER<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li>用户登录</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> R<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span>SysUserLoginDTO dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 验证姓名和密码</span>    TSysUser tSysUser <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span>TSysUser<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>TSysUser<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 保存用户登录日志 生成 Token 信息</span>    LoginUser loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUser<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUser<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUser<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>sysUserService<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>创建 Token</li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">createToken</span><span class="token punctuation">(</span>LoginUser loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生成 Token</span>        loginUser<span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span>IdUtil<span class="token punctuation">.</span><span class="token function">fastSimpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refreshToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Jwt存储信息</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claimsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claimsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>SecurityConstants<span class="token punctuation">.</span>USER_KEY<span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claimsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>SecurityConstants<span class="token punctuation">.</span>USER_ID<span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claimsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>SecurityConstants<span class="token punctuation">.</span>USER_NAME<span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 接口返回信息</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> rspMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rspMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">,</span> JwtUtils<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>claimsMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rspMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"expired_time"</span><span class="token punctuation">,</span> RedisConstants<span class="token punctuation">.</span>EXPIRED_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rspMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新令牌有效期     * @param loginUser     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span>LoginUser loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 保存用户信息到缓存</span>        loginUser<span class="token punctuation">.</span><span class="token function">setLastLoginTime</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginUser<span class="token punctuation">.</span><span class="token function">setTokenTime</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getLastLoginTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> RedisConstants<span class="token punctuation">.</span>EXPIRED_TIME <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> RedisConstants<span class="token punctuation">.</span>LOGIN_TOKEN_KEY <span class="token operator">+</span> loginUser<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> loginUser<span class="token punctuation">,</span> RedisConstants<span class="token punctuation">.</span>EXPIRED_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新数据库内的用户信息</span>        TSysUser tSysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">,</span> tSysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        tSysUser<span class="token punctuation">.</span><span class="token function">setUpdateBy</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>tSysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>定义接口拦截器</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisUtils redisUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断 Token 是否已经失效，如果没有，重新延长，如果失效，重新登录</span>        <span class="token comment" spellcheck="true">// 先从缓存中获取数据</span>        String token <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> RedisConstants<span class="token punctuation">.</span>LOGIN_TOKEN_KEY <span class="token operator">+</span> token<span class="token punctuation">;</span>        LoginUser loginUser <span class="token operator">=</span> <span class="token punctuation">(</span>LoginUser<span class="token punctuation">)</span> redisUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LoginUserUtils<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"User Token Is Expires"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        LoginUserUtils<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>启用拦截器</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 启用拦截器 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> LoginInterceptor loginInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Lombok-注解"><a href="#Lombok-注解" class="headerlink" title="Lombok 注解"></a>Lombok 注解</h2><h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><p><code>@Data</code>相当于<code>@Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode</code>这5个注解的合集。</p><p>当使用<code>@Data</code>注解时，则有了<code>@EqualsAndHashCode</code>注解，那么就会在此类中存在<code>equals(Object other)</code> 和 <code>hashCode()</code>方法，且不会使用父类的属性，这样当继承相同父类的子类去进行比较的时候，会存相等的情况。</p><p><strong>解决方式</strong></p><ol><li>使用<code>@Getter @Setter @ToString</code>代替<code>@Data</code>并且自定义<code>equals(Object other)</code> 和 <code>hashCode()</code>方法。</li><li>在使用<code>@Data</code>时同时加上<code>@EqualsAndHashCode(callSuper=true)</code>注解。</li></ol><p><strong>参考资料</strong></p><blockquote><p><a href="https://blog.csdn.net/weixin_44536553/article/details/118180163" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44536553/article/details/118180163</a></p></blockquote><h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><p><code>@Data</code>相当于<code>@Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode</code>这5个注解的合集。</p><h3 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h3><p>使用后添加一个构造函数，该构造函数含有所有已声明字段属性参数。</p><h3 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h3><p>使用后创建一个无参构造函数。</p><p>&lt; <em>只添加 @Data 注解时，只有无参构造方法；添加 @AllArgsConstructor 和 @NoArgsConstructor 两个，才能同时有无参和带参构造方法。</em>&gt;</p><h3 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h3><p>作用之一是为了解决在某个类有很多构造函数的情况，也省去写很多构造函数的麻烦，在设计模式中的思想是：用一个内部类去实例化一个对象，避免一个类出现过多构造函数。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义类 test,并添加 @Builder 注解</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    String age<span class="token punctuation">;</span>    String sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用@Builder注解后，可以直接通过Builder设置字段参数</span>test t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test<span class="token punctuation">.</span>testBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"wang"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="其它注解"><a href="#其它注解" class="headerlink" title="其它注解"></a>其它注解</h3><h4 id="DateTimeFormat"><a href="#DateTimeFormat" class="headerlink" title="@DateTimeFormat"></a>@DateTimeFormat</h4><p>该注解主要解决前端时间控件传值到后台接收准确的 Date 类属性的问题。一般使用为：<code>@DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss")</code>。</p><h4 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h4><p>该注解主要解决后台从数据库中取出时间类型赋予 JAVA 对象的 Date 属性值无法在前端以一定的日期格式来呈现。一般使用为：<code>@JsonFormat(timezone = "GMT+8",pattern = "yyyy-MM-dd HH:mm:ss")</code>。</p><h4 id="NotNull"><a href="#NotNull" class="headerlink" title="@NotNull"></a>@NotNull</h4><p>适用于基本数据类型 (Integer，Long，Double)，当在 String 类型的数据上，则表示该数据不能为 Null（但是可以为 Empty）。</p><h4 id="NotBlank"><a href="#NotBlank" class="headerlink" title="@NotBlank"></a>@NotBlank</h4><p>适用于 String 类型的数据上，加了@NotBlank 注解的参数不能为 Null 且 trim() 之后 size &gt; 0，必须有实际字符。</p><h4 id="NotEmpty"><a href="#NotEmpty" class="headerlink" title="@NotEmpty"></a>@NotEmpty</h4><p>适用于 String、Collection集合、Map、数组。加了@NotEmpty 注解的参数不能为 Null 或者 长度为 0。</p><p><strong>以上这些校验的注解都是需要 @Valid 或 @Validated 配合上使用才会生效。</strong></p><ul><li>@Valid 进行校验的时候，需要用 BindingResult 来做一个校验结果接收。当校验不通过的时候，如果手动不 return ，则并不会阻止程序的执行；</li><li>@Validated 进行校验的时候，当校验不通过的时候，程序会抛出400异常，阻止方法中的代码执行，这时需要再写一个全局校验异常捕获处理类，然后返回校验提示。</li></ul><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="指定目录下的-mapper-xml-文件不被扫描"><a href="#指定目录下的-mapper-xml-文件不被扫描" class="headerlink" title="指定目录下的 mapper.xml 文件不被扫描"></a>指定目录下的 mapper.xml 文件不被扫描</h3><ul><li>pom.xml 文件下配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置加载配置项信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.ftl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><ul><li>application.yml 文件配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># mybatis-plus 配置 </span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 指定加载文件路径</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath*<span class="token punctuation">:</span>com/rhx/manage/mapper/xml/<span class="token important">*Mapper</span>.xml</code></pre><h3 id="项目相互引用启动报错"><a href="#项目相互引用启动报错" class="headerlink" title="项目相互引用启动报错"></a>项目相互引用启动报错</h3><p>如果 rhx-client 引用 rhx-api 项目里的方法，而 rhx-api 项目里有类加了 @Component 一类的 Spring 注解，那么在启动 rhx-client 项目的时候，需要在 rhx-client 的启动类上使用 @ComponentScan 指定 rhx-api 中加了注解类的路径。（rhx-api 项目不启动）</p><p>如果这样，那么 rhx-client 内加了 @Component 一类的 Spring 注解的类，在项目启动后，其类不会被 Spring 管理，也就是说 rhx-client 内需要 Spring 管理的类失效了。</p><p><strong>解决办法：</strong></p><ol><li>在 rhx-client 的启动类上 @ComponentScan 内添加 rhx-client 内的注解类路径，之前的保留。</li><li>把 rhx-api 内添加了 @Component 一类的 Spring 注解的类，移到 rhx-client 内管理。</li></ol><h2 id="SpringBoot-多模块打包方式"><a href="#SpringBoot-多模块打包方式" class="headerlink" title="SpringBoot 多模块打包方式"></a>SpringBoot 多模块打包方式</h2><blockquote><p><a href="https://blog.csdn.net/qq_42875345/article/details/110790933" target="_blank" rel="noopener">https://blog.csdn.net/qq_42875345/article/details/110790933</a></p></blockquote><ol><li>父工程不需要打包生成指定文件，因此可以去除如下引用：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>项目 rhx-client 引用了项目 rhx-api，打包的时候想把 rhx-api 也包含进 rhx-client 打包生成的文件内，只需要在 rhx-client 项目的 pom.xml 文件内添加如下配置即可。</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>一个项目，对应不同环境存在不同的配置文件，打包的时候就有两种方式。一种是只生成指定环境的配置文件，一种是所有环境的配置文件都包含。这个控制在如下配置：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置加载配置项信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 注释掉这一块，那么项目打包的时候对应的 dev, test, prod 这些配置文件都会生成 --></span>            <span class="token comment" spellcheck="true">&lt;!-- 不注释掉这一块，那么项目打包的时候只会生成选择的配置文件，如果不选择，那么打的包将没有配置文件 --></span>            <span class="token comment" spellcheck="true">&lt;!--  &lt;includes>                       &lt;include>application.yml&lt;/include>                       &lt;include>application-${profile.name}.yml&lt;/include>                       &lt;include>**/*.xml&lt;/include>                   &lt;/includes>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2 id="OpenFeign-接口的使用"><a href="#OpenFeign-接口的使用" class="headerlink" title="OpenFeign 接口的使用"></a>OpenFeign 接口的使用</h2><p>多个 Feign 接口使用 @FeignClient 注解调用同一个名称的微服务时，会报异常。</p><p><strong>解决方式</strong></p><ol><li>将所有 Feign 接口合并。</li><li>在配置文件内增加配置：spring.main.allow-bean-definition-overriding=true。</li><li>在 @FeignClient 注解上增加 contextId 属性，确保每个 Feign Client 的 contextId 唯一。</li></ol><h2 id="SpringBoot-调用外部接口"><a href="#SpringBoot-调用外部接口" class="headerlink" title="SpringBoot 调用外部接口"></a>SpringBoot 调用外部接口</h2><ol><li>使用原始 HttpClient 请求。</li><li>使用 RestTemplate 方法。</li><li>使用 Feign 进行消费。</li></ol><h2 id="使用-Gateway-搭建项目，报-530-错误"><a href="#使用-Gateway-搭建项目，报-530-错误" class="headerlink" title="使用 Gateway 搭建项目，报 530 错误"></a>使用 Gateway 搭建项目，报 530 错误</h2><p>pom.xml 加入下面架包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- springcloud 的负载均衡，没有这个，网关会报 503--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="Transactional-注解的使用"><a href="#Transactional-注解的使用" class="headerlink" title="@Transactional 注解的使用"></a>@Transactional 注解的使用</h2><ul><li>在方法上使用 @Transactional 注解，事务起作用。</li><li>在类上使用 @Transactional，对整个类的方法起作用。</li><li>在方法上使用 @Transactional，但异常信息使用 tyr-catch 处理，事务不起作用。</li><li>在同一个 service 内，@Transactional 注解作用在方法 A 上，方法 A 调方法 B，无论 A 和 B 内那个有异常，事务都起作用。</li><li>在同一个 service 内，@Transactional 注解作用在方法 B 上，方法 A 调方法 B，无论 A 和 B 内那个有异常，事务都不起作用。</li><li>在同一个 service 内，@Transactional 注解作用类上，方法 A 调方法 B，无论 A 和 B 内那个有异常，事务都起作用。</li><li>在同一个 service 内，@Transactional 注解作用在方法 A 上，方法 A 调方法 B（方法 B 私有），无论 A 和 B 内那个有异常，事务都起作用。</li><li>在同一个 service 内，@Transactional 注解作用在方法 B 上（方法 B 私有），方法 A 调方法 B（方法 B 私有），无论 A 和 B 内那个有异常，事务都不起作用。</li><li>不同 service 内，@Transactional 注解作用在方法 A 上，方法 A 调用其它 service 内的方法 B，无论 A 和 B 内那个有异常，事务都起作用。</li><li>不同 service 内，@Transactional 注解作用在方法 B 上，方法 A 调用其它 service 内的方法 B，方法 A 的事务不起作用，方法 B 的事务起作用。</li></ul><p><strong>参考资料</strong></p><blockquote><p><a href="https://blog.csdn.net/lianjian6534/article/details/112434905" target="_blank" rel="noopener">https://blog.csdn.net/lianjian6534/article/details/112434905</a></p></blockquote><h2 id="引入-SpringBootActuator-后-Swagger3-失效"><a href="#引入-SpringBootActuator-后-Swagger3-失效" class="headerlink" title="引入 SpringBootActuator 后 Swagger3 失效"></a>引入 SpringBootActuator 后 Swagger3 失效</h2><ul><li>在 SwaggerConfig 配置类中加入下面 Bean</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token keyword">static</span> BeanPostProcessor <span class="token function">springfoxHandlerProviderBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">WebMvcRequestHandlerProvider</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">WebFluxRequestHandlerProvider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeSpringfoxHandlerMappings</span><span class="token punctuation">(</span><span class="token function">getHandlerMappings</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">RequestMappingInfoHandlerMapping</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">customizeSpringfoxHandlerMappings</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> mappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>T<span class="token operator">></span> copy <span class="token operator">=</span> mappings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>mapping <span class="token operator">-</span><span class="token operator">></span> mapping<span class="token punctuation">.</span><span class="token function">getPatternParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mappings<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mappings<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>RequestMappingInfoHandlerMapping<span class="token operator">></span> <span class="token function">getHandlerMappings</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Field field <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"handlerMappings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>RequestMappingInfoHandlerMapping<span class="token operator">></span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud_微服务项目搭建</title>
      <link href="/2023/07/30/springcloud-wei-fu-wu-xiang-mu-da-jian/"/>
      <url>/2023/07/30/springcloud-wei-fu-wu-xiang-mu-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud-微服务项目搭建"><a href="#SpringCloud-微服务项目搭建" class="headerlink" title="SpringCloud_微服务项目搭建"></a>SpringCloud_微服务项目搭建</h1><p><strong>说明</strong></p><blockquote><ul><li>项目结构采用 父-子 项目结构。</li><li>项目框架采用 SpringBoot + SpringCloud 作为基础。</li><li>SpringBoot 版本为：2.6.6。</li><li>SpringCloud 版本为：2021.0.3。</li><li>SpringCloudAlibaba 版本为：2021.1。</li><li>Nacos 作为服务注册和发现的组件。</li><li>nacos-parent 为父结构项目。</li><li>nacos-provider 为服务提供者。</li><li>nacos-consumer 为服务消费者。</li><li>nacos-gateway 为网关项目。</li></ul></blockquote><h2 id="nacos-parent"><a href="#nacos-parent" class="headerlink" title="nacos-parent"></a>nacos-parent</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>创建 父-子 项目结构步骤比较简单，这里省略。</li></ul><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul><li>pom.xml 文件配置</li></ul><h4 id="重点说明"><a href="#重点说明" class="headerlink" title="重点说明"></a>重点说明</h4><ol><li>父项目结构中需要添加如下配置，代表是父项目的结构。</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>maven 指定 jdk 的编译版本。</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>指定打包跳过测试</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><blockquote><p>如果是 Spring 项目，对应的方式为：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.18.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>  </code></pre></blockquote><ol start="4"><li>多环境配置</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!-- 注释掉这一块，那么项目打包的时候对应的 dev, test, prod 这些配置文件都会生成 --></span>                <span class="token comment" spellcheck="true">&lt;!-- 不注释掉这一块，那么项目打包的时候只会生成选择的配置文件，如果不选择，那么打的包将没有配置文件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>application.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>application-${profile.name}.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.ftl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开发 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--默认激活配置--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 生产 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></code></pre><blockquote><p>子项目里的配置文件为：</p><ol><li>application.yml</li><li>application-dev.yml</li><li>application-test.yml</li><li>application-prod.yml</li></ol><p>application.yml 默认的配置为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 默认启动项目时加载 application-dev.yml 配置文件里面的信息。</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token string">'@profile.name@'</span></code></pre></blockquote><ol start="5"><li>maven 单独引入阿里镜像（非必要）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span></code></pre><ol start="6"><li>引入 nacos 的架包</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--nacos--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="整体配置"><a href="#整体配置" class="headerlink" title="整体配置"></a>整体配置</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 项目信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.reach24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>nacos-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--版本管理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定JDK编译版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>2021.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>knife4j.version</span><span class="token punctuation">></span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>knife4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hutool.version</span><span class="token punctuation">></span></span>5.8.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hutool.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--子项目管理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>nacos-provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>nacos-consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>nacos-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入阿里的镜像--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--依赖的包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--nacos--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--knife4j--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${knife4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--hutool--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hutool.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据验证框架--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--json解析包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${fastjson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--lombok插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--StringUtils--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--添加spring-cloud依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring-cloud--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring-cloud-alibaba --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置加载配置项信息--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!-- 注释掉这一块，那么项目打包的时候对应的 dev, test, prod 这些配置文件都会生成 --></span>                <span class="token comment" spellcheck="true">&lt;!-- 不注释掉这一块，那么项目打包的时候只会生成选择的配置文件，如果不选择，那么打的包将没有配置文件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>application.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>application-${profile.name}.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.ftl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开发 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--默认激活配置--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 测试 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 生产 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.name</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></code></pre><h2 id="nacos-provider"><a href="#nacos-provider" class="headerlink" title="nacos-provider"></a>nacos-provider</h2><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><ul><li>pom.xml 文件配置</li></ul><ol><li>替换父项目</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.reach24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>指定打包方式（非必要）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>添加架包</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><ul><li>添加配置文件</li></ul><ol><li>application.yml</li><li>application-dev.yml</li><li>application-test.yml</li><li>application-prod.yml</li></ol><blockquote><p>application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span> <span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token string">'@profile.name@'</span></code></pre></blockquote><ul><li>配置 nacos</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider  <span class="token comment" spellcheck="true"># nacos 配置</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> xxxx<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">group</span><span class="token punctuation">:</span> dev</code></pre><blockquote><p>如果多个环境共用一套 Nacos 服务，那么最好添加分组。</p></blockquote><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul><li>使用 knife4j 整合 swagger</li></ul><ol><li>引入架包（父项目）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${knife4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>创建配置类</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableOpenApi</span><span class="token annotation punctuation">@EnableKnife4j</span><span class="token comment" spellcheck="true">// 这里的注解使用的是 @EnableOpenApi和 @EnableKnife4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 显示swagger-ui.html文档展示页，还必须注入swagger资源：     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"swagger-ui.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"doc.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> swagger2的配置文件，这里可以配置swagger2的一些基本的内容，比如扫描的包等等     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"defaultApi2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Docket <span class="token function">defaultApi2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//此包路径下的类，才生成接口文档</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.xxxx.nacosprovider.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//加了ApiOperation注解的类，才生成接口文档</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">withClassAnnotation</span><span class="token punctuation">(</span>RestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * api文档的详细信息函数,注意这里的注解引用的是哪个     */</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//大标题</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"微服务后台服务API接口文档"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 版本号</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 描述</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"后台API接口"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 作者</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"杭州瑞欧科技互联网事业部"</span><span class="token punctuation">,</span><span class="token string">"www.xxxx.com"</span><span class="token punctuation">,</span><span class="token string">"xxxx.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">license</span><span class="token punctuation">(</span><span class="token string">"The Apache License, Version 2.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">licenseUrl</span><span class="token punctuation">(</span><span class="token string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>配置文件添加配置</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9091</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /provider<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider  <span class="token comment" spellcheck="true"># springboot 和 Knife4j 兼容</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher<span class="token comment" spellcheck="true"># 开启 knife4j 增强</span><span class="token key atrule">knife4j</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">production</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 正式环境要配成 true</span>  <span class="token key atrule">basic</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 开启权限</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> reach24    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre><p><strong>注意：</strong></p><ul><li>SpringBoot 和 Knife4j 兼容如果使用代码处理，Knife4j 不会解析对应的接口注解。</li></ul><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><ul><li>整合 logback</li></ul><ol><li>创建 logback-spring.xml 文件</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒；当scan为true时，此属性生效。默认的时间间隔为1分钟。    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10 seconds<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义日志的根目录 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nacos-provider<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg %n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern-color<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%yellow(%d{yyyy-MM-dd HH:mm:ss.SSS}) [%thread] %highlight(%-5level) %green(%logger{50}) - %highlight(%msg) %n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--1. 输出到控制台--></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter">--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;level>ERROR&lt;/level>--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;/filter>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出-带颜色 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE-WITH-COLOR<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern-color}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2. 输出到文档--></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.1 level为 DEBUG 日志，时间滚动输出  --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">        &amp;lt;!&amp;ndash; 正在记录的日志文档的路径及文档名 &amp;ndash;&amp;gt;        &lt;file>${log.path}/debug.log&lt;/file>        &amp;lt;!&amp;ndash;日志文档输出格式&amp;ndash;&amp;gt;        &lt;encoder>            &lt;pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern>            &lt;charset>UTF-8&lt;/charset> &amp;lt;!&amp;ndash; 设置字符集 &amp;ndash;&amp;gt;        &lt;/encoder>        &amp;lt;!&amp;ndash; 日志记录器的滚动策略，按日期，按大小记录 &amp;ndash;&amp;gt;        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            &amp;lt;!&amp;ndash; 日志归档 &amp;ndash;&amp;gt;            &lt;fileNamePattern>${log.path}/debug-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern>            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                &lt;maxFileSize>100MB&lt;/maxFileSize>            &lt;/timeBasedFileNamingAndTriggeringPolicy>            &amp;lt;!&amp;ndash;日志文档保留天数&amp;ndash;&amp;gt;            &lt;maxHistory>15&lt;/maxHistory>        &lt;/rollingPolicy>        &amp;lt;!&amp;ndash; 此日志文档只记录debug级别的 &amp;ndash;&amp;gt;        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter">            &lt;level>debug&lt;/level>            &lt;onMatch>ACCEPT&lt;/onMatch>            &lt;onMismatch>DENY&lt;/onMismatch>        &lt;/filter>    &lt;/appender>--></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.2 level为 INFO 日志，时间滚动输出  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文档的路径及文档名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/${log.name}-info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文档输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 每天日志归档路径以及格式 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/${log.name}-info-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文档保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文档只记录info级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.3 level为 WARN 日志，时间滚动输出  --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">        &amp;lt;!&amp;ndash; 正在记录的日志文档的路径及文档名 &amp;ndash;&amp;gt;        &lt;file>${log.path}/warn.log&lt;/file>        &amp;lt;!&amp;ndash;日志文档输出格式&amp;ndash;&amp;gt;        &lt;encoder>            &lt;pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern>            &lt;charset>UTF-8&lt;/charset> &amp;lt;!&amp;ndash; 此处设置字符集 &amp;ndash;&amp;gt;        &lt;/encoder>        &amp;lt;!&amp;ndash; 日志记录器的滚动策略，按日期，按大小记录 &amp;ndash;&amp;gt;        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            &lt;fileNamePattern>${log.path}/warn-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern>            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                &lt;maxFileSize>100MB&lt;/maxFileSize>            &lt;/timeBasedFileNamingAndTriggeringPolicy>            &amp;lt;!&amp;ndash;日志文档保留天数&amp;ndash;&amp;gt;            &lt;maxHistory>15&lt;/maxHistory>        &lt;/rollingPolicy>        &amp;lt;!&amp;ndash; 此日志文档只记录warn级别的 &amp;ndash;&amp;gt;        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter">            &lt;level>warn&lt;/level>            &lt;onMatch>ACCEPT&lt;/onMatch>            &lt;onMismatch>DENY&lt;/onMismatch>        &lt;/filter>    &lt;/appender>--></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.4 level为 ERROR 日志，时间滚动输出  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文档的路径及文档名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/${log.name}-error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文档输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 此处设置字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/${log.name}-error-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文档保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文档只记录ERROR级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 异步输出 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ASYNC-INFO<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>256<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加附加的appender,最多只能添加一个 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ASYNC-ERROR<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>256<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加附加的appender,最多只能添加一个 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4. 最终的策略 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.1 开发环境:打印控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.sdcm.pmp<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE-WITH-COLOR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><ul><li>定义接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户数据"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TUserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询 User 信息"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"用户信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/show"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TUser <span class="token function">showUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用 showUser 方法开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> TUser<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"服务提供者"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="nacos-consumer"><a href="#nacos-consumer" class="headerlink" title="nacos-consumer"></a>nacos-consumer</h2><h3 id="第一步-2"><a href="#第一步-2" class="headerlink" title="第一步"></a>第一步</h3><ul><li>pom.xml 文件配置</li></ul><ol><li><p>替换父项目（同 nacos-provider）</p></li><li><p>指定打包方式（非必要）（同 nacos-provider）</p></li><li><p>添加架包</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步-2"><a href="#第二步-2" class="headerlink" title="第二步"></a>第二步</h3><ul><li><p>添加配置文件（同 nacos-provider）</p></li><li><p>配置 nacos（同 nacos-provider）</p></li></ul><h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><ul><li>使用 knife4j 整合 swagger （同 nacos-provider）</li></ul><h3 id="第四步-1"><a href="#第四步-1" class="headerlink" title="第四步"></a>第四步</h3><ul><li>整合 logback（同 nacos-provider）</li></ul><h3 id="第五步-1"><a href="#第五步-1" class="headerlink" title="第五步"></a>第五步</h3><ul><li>配置 Feign</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>consumer  <span class="token comment" spellcheck="true"># 服务提供者地址配置</span>  <span class="token key atrule">provider</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider<span class="token comment" spellcheck="true"># feign-okhttp 配置</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">okhttp</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 使用 okhttp 请求</span>  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200 </span><span class="token comment" spellcheck="true"># 最大链接数</span>    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> <span class="token number">50 </span><span class="token comment" spellcheck="true"># 单个路径最大链接数</span></code></pre><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><ul><li>声明消费端接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义和 TuserController 相关的接口 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"${spring.provider.url}"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/provider/api/user"</span><span class="token punctuation">,</span> contextid <span class="token operator">=</span> <span class="token string">"userClient"</span> <span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TUserClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/show"</span><span class="token punctuation">)</span>    TUser <span class="token function">showUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><ul><li>如果接口类中使用了 @FeignClient 注解中的 path，那么接口类就不能使用 @RequestMapping 注解。</li><li>contextid 用来指定接口的唯一性。</li></ul></blockquote><h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><ul><li>定义消费接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"消费者-用户数据"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TUserConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> TUserClient tUserClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询 User 信息"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"用户信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/show"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TUser <span class="token function">showUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者调用 showUser 方法开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tUserClient<span class="token punctuation">.</span><span class="token function">showUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="nacos-gateway"><a href="#nacos-gateway" class="headerlink" title="nacos-gateway"></a>nacos-gateway</h2><h3 id="第一步-3"><a href="#第一步-3" class="headerlink" title="第一步"></a>第一步</h3><ul><li>pom.xml 文件配置</li></ul><ol><li>替换父项目（同 nacos-provider）</li><li>指定打包方式（非必要）（同 nacos-provider）</li><li>添加架包</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步-3"><a href="#第二步-3" class="headerlink" title="第二步"></a>第二步</h3><ul><li><p>添加配置文件（同 nacos-provider）</p></li><li><p>配置 nacos（同 nacos-provider）</p></li></ul><h3 id="第三步-2"><a href="#第三步-2" class="headerlink" title="第三步"></a>第三步</h3><ul><li>整合 logback（同 nacos-provider）</li></ul><h3 id="第四步-2"><a href="#第四步-2" class="headerlink" title="第四步"></a>第四步</h3><ul><li>配置路由规则</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>gateway  <span class="token comment" spellcheck="true"># gateway 配置</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 让 gateway 可以发现 nacos 中的为服务</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 路由数组</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider <span class="token comment" spellcheck="true"># 路由ID</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>provider <span class="token comment" spellcheck="true"># lb 指从 nacos 中按照名称获取微服务</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 路由转发需要满足的条件</span>            <span class="token punctuation">-</span> Path=/provider/** <span class="token comment" spellcheck="true"># 当请求路径满足后才进行转发</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>consumer <span class="token comment" spellcheck="true"># 路由ID</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>consumer <span class="token comment" spellcheck="true"># lb 指从 nacos 中按照名称获取微服务</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 路由转发需要满足的条件</span>            <span class="token punctuation">-</span> Path=/consumer/** <span class="token comment" spellcheck="true"># 当请求路径满足后才进行转发</span></code></pre><h3 id="第五步-2"><a href="#第五步-2" class="headerlink" title="第五步"></a>第五步</h3><ul><li>配置跨域</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 跨域的配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsWebFilter <span class="token function">corsWebFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathPatternParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Nacos</title>
      <link href="/2023/04/21/springboot-nacos/"/>
      <url>/2023/04/21/springboot-nacos/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Nacos"><a href="#SpringBoot-Nacos" class="headerlink" title="SpringBoot_Nacos"></a>SpringBoot_Nacos</h1><p>整个思路分为两个模块：服务的提供者和服务的消费者。</p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>pom.xml 文件中引入对应的配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>2020.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><p><strong>注意：如果版本不对应，项目无法启动。</strong></p><blockquote><p>这里的 SpringBoot 对应的版本是 ：2.5.7。</p><p>对应的 SpringCloud 版本是：2020.0.4。</p><p>对应的 SpringCloudAlibaba 版本是：2021.1。</p></blockquote><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul><li>配置文件添加配置</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 8081  servlet:    context-path: /provider# 服务名，也是注册到 nacos 中的服务名spring:  application:    name: nacos-provider# nacos 地址  cloud:    nacos:      discovery:        server-addr: xxxx:8848</code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul><li><code>Controller</code> 层正常定义接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义一个方法，对外提供     * @return     */</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello-Provider"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong></p><blockquote><p>在 SpringBoot 2.5.7 这个版本中，服务提供者启动类上的注解 @EnableDiscoveryClient 可以不用加。</p></blockquote><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><ul><li>pom.xml 文件里添加对应的配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>2020.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--使用 okhttp 客户端 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><p><strong>注意：</strong></p><blockquote><p>这里的 SpringBoot 对应的版本是 ：2.5.7。</p><p>对应的 SpringCloud 版本是：2020.0.4。</p><p>对应的 SpringCloudAlibaba 版本是：2021.1。</p><p>如果引入包：spring-cloud-starter-openfeign 则需要在引入包：spring-cloud-starter-loadbalancer。</p></blockquote><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><ul><li>配置文件添加配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 服务名，也是注册到 nacos 中的服务名</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>consumer<span class="token comment" spellcheck="true"># nacos 地址</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> xxxx<span class="token punctuation">:</span><span class="token number">8848</span><span class="token comment" spellcheck="true"># 服务提供者地址</span>  <span class="token key atrule">provide</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider <span class="token comment" spellcheck="true"># feign 配置</span> <span class="token key atrule">feign</span><span class="token punctuation">:</span>    <span class="token key atrule">okhttp</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 使用 okhttp 请求</span>    <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>      <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200 </span><span class="token comment" spellcheck="true"># 最大链接数</span>      <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> <span class="token number">50 </span><span class="token comment" spellcheck="true"># 单个路径最大链接数</span></code></pre><h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><ul><li>定义消费者接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">// 服务提供者的地址，对应配置文件的地址配置。</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"${spring.provide.url}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这个是可选择项，如果对应服务提供者的接口，都加了统一路径 /provider 那么这里就需要加，否则会 404 错误。</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/provider"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConsumerClient</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这个路径的地址 /hello 和服务提供者的路径地址要一致，否则会找不到对应的接口。</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    String <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><ul><li><code>Controller</code> 层直接调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ConsumerClient consumerClient<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这个地址就可以自定义了</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getHello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> consumerClient<span class="token punctuation">.</span><span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong></p><blockquote><p>在 SpringBoot 2.5.7 这个版本中，服务消费者启动类上的注解 @EnableDiscoveryClient 可以不用加。</p><p>消费者服务启动类上需要添加 @EnableFeignClients 注解，来启用 openfeign 服务。</p><p>使用 openfeign 做接口的调用，那么对应的负载均衡是默认的，并不需要额外在接口上添加 @LoadBalancerClient 注解。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_EasyEs_Elasticsearch</title>
      <link href="/2023/03/03/springboot-easyes-elasticsearch/"/>
      <url>/2023/03/03/springboot-easyes-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-EasyEs-Elasticsearch"><a href="#SpringBoot-EasyEs-Elasticsearch" class="headerlink" title="SpringBoot_EasyEs_Elasticsearch"></a>SpringBoot_EasyEs_Elasticsearch</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 添加对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--SpringBoot内集成了Elasticsearch，但此框架需要 Elasticsearch 的版本为 7.14.0，需要单独引用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.easy-es<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easy-es-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--单独引入 Elasticsearch 的 7.14.0 版本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.14.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.14.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>启动类上添加扫描路径</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">// ES 的扫描路径，如果项目里使用了 MP 那么 MP 的路径地址不能和 ES 的路径地址相同，否则会报错</span><span class="token annotation punctuation">@EsMapperScan</span><span class="token punctuation">(</span><span class="token string">"com.example.springbooteasyeselasticsearch.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootEasyesElasticsearchApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootEasyesElasticsearchApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>定义实体类<code>Document</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token comment" spellcheck="true">// 指定索引名称</span><span class="token annotation punctuation">@IndexName</span><span class="token punctuation">(</span><span class="token string">"document"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Document</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注解注解</span>    <span class="token comment" spellcheck="true">// IdType.NONE: 由ES自动生成,是默认缺省时的配置,无需您额外配置 推荐</span>    <span class="token comment" spellcheck="true">// IdType.UUID: 系统生成UUID,然后插入ES (不推荐)</span>    <span class="token comment" spellcheck="true">// IdType.CUSTOMIZE: 由用户自定义,用户自己对id值进行set,如果用户指定的id在es中不存在,则在insert时就会新增一条记录,如果用户指定的id在es中已存在记录,则自动更新该id对应的记录.</span>    <span class="token annotation punctuation">@IndexId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字段注解，当我们需要对查询字段进行精确匹配,左模糊,右模糊,全模糊,排序聚合等操作时,需要该字段的索引类型为 keyword 类型</span>    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>fieldType <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>KEYWORD<span class="token punctuation">)</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字段注解，当我们需要对字段进行分词查询时,需要该字段的类型为 text 类型,并且指定分词器(不指定就用 ES 默认分词器,效果通常不理想)</span>    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>fieldType <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>TEXT<span class="token punctuation">)</span>    <span class="token annotation punctuation">@HighLight</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字段注解，当同一个字段,我们既需要把它当 keyword 类型使用,又需要把它当 text 类型使用时,此时我们的索引类型为 keyword_text 类型</span>    <span class="token comment" spellcheck="true">// 当我们把该字段当做 keyword 类型查询时, ES 要求传入的字段名称为"字段名 .keyword",当把该字段当 text 类型查询时,直接使用原字段名即可</span>    <span class="token comment" spellcheck="true">// 如果一个字段的索引类型被创建为仅为 keyword 类型(如下图所示)查询时,则不需要在其名称后面追加 .keyword,直接查询就行</span>    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>fieldType <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>KEYWORD_TEXT<span class="token punctuation">)</span>    <span class="token keyword">private</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>定义 mapper 层实体类<code>DocumentMapper</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DocumentMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEsMapper</span><span class="token operator">&lt;</span>Document<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><ul><li>定义 service 层接口<code>IDocumentService</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDocumentService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 自定义接口     * @param document     * @return     */</span>    Integer <span class="token function">insert</span><span class="token punctuation">(</span>Document document<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><ul><li>实现 service 层接口<code>DocumentServiceImpl</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 框架把基础的方法放在了 Mapper 层，从而取消了 Service 层 * 如果调用基础的方法不需要对业务做复杂的处理，可以直接在 Controller 层直接使用 Mapper 层的方法 * 如果需要对业务进行复杂的处理，可以在封装一层 Service 层 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DocumentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IDocumentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DocumentMapper documentMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新增</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">insert</span><span class="token punctuation">(</span>Document document<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> documentMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><ul><li>定义 controller 层测试类 <code>DocumentController</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/document"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DocumentController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 封装 Service 层方法     */</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> IDocumentService documentService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 框架把基础的方法放在了 Mapper 层，从而取消了 Service 层     * 如果调用基础的方法不需要对业务做复杂的处理，可以直接在 Controller 层直接使用 Mapper 层的方法     * 如果需要对业务进行复杂的处理，可以在封装一层 Service 层     */</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DocumentMapper documentMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 调用 Service 层方法     * @param document     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Integer <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Document document<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> documentService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 直接调用 Mapper 层方法     * @param document     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/insertDocument"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Integer <span class="token function">insertDocument</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Document document<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> documentMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询 ES 中所有的数据     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Document<span class="token operator">></span> <span class="token function">getListDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LambdaEsQueryWrapper lambdaEsQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaEsQueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lambdaEsQueryWrapper<span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> documentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lambdaEsQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 浅分页，适合数据量在 1W 以内的数据分页     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> EsPageInfo<span class="token operator">&lt;</span>Document<span class="token operator">></span> <span class="token function">getPageDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LambdaEsQueryWrapper lambdaEsQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaEsQueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lambdaEsQueryWrapper<span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> documentMapper<span class="token punctuation">.</span><span class="token function">pageQuery</span><span class="token punctuation">(</span>lambdaEsQueryWrapper<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 滚动查询     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/sa_page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SAPageInfo<span class="token operator">&lt;</span>Document<span class="token operator">></span> <span class="token function">getSAPageDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LambdaEsQueryWrapper<span class="token operator">&lt;</span>Document<span class="token operator">></span> lambdaEsQueryWrapper <span class="token operator">=</span> EsWrappers<span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span>Document<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lambdaEsQueryWrapper<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lambdaEsQueryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span>Document<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一页的数据</span>        SAPageInfo<span class="token operator">&lt;</span>Document<span class="token operator">></span> saPageInfo <span class="token operator">=</span> documentMapper<span class="token punctuation">.</span><span class="token function">searchAfterPage</span><span class="token punctuation">(</span>lambdaEsQueryWrapper<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"saPageInfo = "</span> <span class="token operator">+</span> saPageInfo<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"; saPageInfo.getSearchAfter() = "</span> <span class="token operator">+</span> saPageInfo<span class="token punctuation">.</span><span class="token function">getSearchAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"; saPageInfo.getNextSearchAfter() = "</span> <span class="token operator">+</span> saPageInfo<span class="token punctuation">.</span><span class="token function">getNextSearchAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下一页的数据</span>        SAPageInfo<span class="token operator">&lt;</span>Document<span class="token operator">></span> searchAfterPage <span class="token operator">=</span> documentMapper<span class="token punctuation">.</span><span class="token function">searchAfterPage</span><span class="token punctuation">(</span>lambdaEsQueryWrapper<span class="token punctuation">,</span> saPageInfo<span class="token punctuation">.</span><span class="token function">getNextSearchAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"searchAfterPage = "</span> <span class="token operator">+</span> searchAfterPage<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"; searchAfterPage.getSearchAfter() = "</span> <span class="token operator">+</span> searchAfterPage<span class="token punctuation">.</span><span class="token function">getSearchAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"; searchAfterPage.getNextSearchAfter() = "</span> <span class="token operator">+</span> searchAfterPage<span class="token punctuation">.</span><span class="token function">getNextSearchAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> searchAfterPage<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Kafka</title>
      <link href="/2023/02/28/springboot-kafka/"/>
      <url>/2023/02/28/springboot-kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Kafka"><a href="#SpringBoot-Kafka" class="headerlink" title="SpringBoot_Kafka"></a>SpringBoot_Kafka</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 引入对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>配置文件添加配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>kafka  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 集群地址，多个使用逗号隔开</span>    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.234.128<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.234.128<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>192.168.234.128<span class="token punctuation">:</span><span class="token number">9094</span>    <span class="token comment" spellcheck="true"># 消费的主题，通过配置项来实现，多个逗号隔开，中间不要有空格</span>    <span class="token key atrule">topics</span><span class="token punctuation">:</span> topic<span class="token punctuation">-</span><span class="token number">1</span><span class="token punctuation">,</span>topic<span class="token punctuation">-</span><span class="token number">2</span><span class="token punctuation">,</span>topic<span class="token punctuation">-</span><span class="token number">3</span>    <span class="token key atrule">producer</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 重试次数，producer 两次重试之间会停顿一段时间，以防止频繁地重试对系统带来冲击。这段时间是可以配置的，由参数 retry.backoff.ms 指定，默认是 100 毫秒</span>      <span class="token comment" spellcheck="true"># 重试可能造成消息的重复发送,为了应对这一风险， Kafka 要求用户在 consumer 端必须执行去重处理</span>      <span class="token comment" spellcheck="true"># 重试可能造成消息的乱序，producer 提供了 max.in.flight.requets.per.connection 参数 一旦用户将此参数设置成 1, producer 将确保某一时刻只能发送一个请求</span>      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span>      <span class="token key atrule">buffer-memory</span><span class="token punctuation">:</span> <span class="token number">33554432</span>      <span class="token comment" spellcheck="true"># acks=0 ： producer 不等kafka是否接收成功，立即开始其他工作 -> 提高吞吐量，单会丢失数据</span>      <span class="token comment" spellcheck="true"># acks=1 ： producer 发送消息后 leader broker 仅将该消息写入本地日志，然后便发送响应结果 producer ，而无须等待 ISR 中其他副本写入该消息。能保证吞吐量，也能保证一定的持久性。</span>      <span class="token comment" spellcheck="true"># acks=all/-1 ：表示当发送消息时， leader broker 不仅会将消息写入本地日志，同时还会等待 ISR 中所有其他副本都成功写入它们各自的本地日志后，才发送响应结果给producer。吞吐量极低，但不会丢失数据。</span>      <span class="token key atrule">acks</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>kafka      <span class="token comment" spellcheck="true"># 是否自动提交 consumer offset，批量的时候要改为 false，代码手动维护 offset 的也需要设置成 false</span>      <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment" spellcheck="true"># 假设你首次运行一个 consumer group 并且指定从头消费。显然该 group 会从头消费所有数据，因为此时该 group 还没有任何位移信息。一旦该 group 成功提交位移后，你重启了 group ，依然指定从头消费。此时你会发现该 group 并不会真的从头消费，因为 Kafka 己经保存了该 group位移信息，因此它会无视 auto.offset.reset 的设置。</span>      <span class="token comment" spellcheck="true"># latest（默认值）指定从最新处位移开始消费</span>      <span class="token comment" spellcheck="true"># earliest ：指定从最早的位移开始消费，注意这里最早的位移不一定就是0</span>      <span class="token comment" spellcheck="true"># none:只要有一个分区不存在已提交的offset,就抛出异常;</span>      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> earliest      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer      <span class="token comment" spellcheck="true"># 批量消费的条数</span>      <span class="token key atrule">max-poll-records</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">listener</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 设置消费的并发数</span>      <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token comment" spellcheck="true"># RECORD</span>      <span class="token comment" spellcheck="true"># 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交</span>      <span class="token comment" spellcheck="true"># BATCH</span>      <span class="token comment" spellcheck="true"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交</span>      <span class="token comment" spellcheck="true"># TIME</span>      <span class="token comment" spellcheck="true"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交</span>      <span class="token comment" spellcheck="true"># COUNT</span>      <span class="token comment" spellcheck="true"># TIME |　COUNT　有一个条件满足时提交</span>      <span class="token comment" spellcheck="true"># COUNT_TIME</span>      <span class="token comment" spellcheck="true"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交</span>      <span class="token comment" spellcheck="true"># MANUAL</span>      <span class="token comment" spellcheck="true"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交</span>      <span class="token comment" spellcheck="true"># MANUAL_IMMEDIATE</span>      <span class="token comment" spellcheck="true"># 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种</span>      <span class="token key atrule">ack-mode</span><span class="token punctuation">:</span> manual_immediate      <span class="token comment" spellcheck="true"># 批量消费</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> batch</code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>定义消息发送接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> KafkaTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> kafkaTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageData</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ListenableFuture<span class="token operator">&lt;</span>SendResult<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> future <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListenableFutureCallback</span><span class="token operator">&lt;</span>SendResult<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Throwable ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送失败："</span> <span class="token operator">+</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>SendResult<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送成功 ："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产消息至Kafka: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"出错！！！！！！！！！！！"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程: {} "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>定义消息的消费者</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 引入 Kafka 的死信队列     * 这里使用的是 Kafka 默认的监听容器类，也可以使用自定义的，使用自定义的只需要在 @KafkaListener 注解之中引入 containerFactory = “” 指定即可     * 使用自定义的时候，对应的 Bean 最好做成配置类注入到 Spring 中     * @param configurer     * @param kafkaConsumerFactory     * @param template     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConcurrentKafkaListenerContainerFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span>ConcurrentKafkaListenerContainerFactoryConfigurer configurer<span class="token punctuation">,</span> ConsumerFactory<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> kafkaConsumerFactory<span class="token punctuation">,</span> KafkaTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConcurrentKafkaListenerContainerFactory<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configurer<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> kafkaConsumerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setCommonErrorHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultErrorHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeadLetterPublishingRecoverer</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FixedBackOff</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定对应的主题消费     * @param record     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"topic_1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer_1</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> record<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简单消费："</span><span class="token operator">+</span>record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 消费单条信息     * 主题通过配置类指定消费，并且手动维护数据偏移量     * @param records     * @param ack     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"#{'${spring.kafka.topics}'.split(',')}"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">"${spring.kafka.consumer.group-id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer_2</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> records<span class="token punctuation">,</span> Acknowledgment ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费："</span><span class="token operator">+</span>records<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>records<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>records<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Optional<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kafkaMessage <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>            kafkaMessage<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息为："</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消费异常,错误消息:{},异常信息：{}"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量消费信息，批量消费的时候需要在配置信息里面添加批量消费的配置     * 主题通过配置类指定消费，并且手动维护数据偏移量     * @param records     * @param ack     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"consumer_3"</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"#{'${spring.kafka.topics}'.split(',')}"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">"${spring.kafka.consumer.group-id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer_3</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">>></span> records<span class="token punctuation">,</span> Acknowledgment ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        records<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>record <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"消费：topic:%s-partition:%s-offset:%s-value:%s"</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Optional<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kafkaMessage <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            kafkaMessage<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息为："</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消费异常,错误消息:{},异常信息：{}"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"data size:{} kafka消费耗时 {}"</span><span class="token punctuation">,</span> records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Xxl-Job</title>
      <link href="/2022/11/01/springboot-xxl-job/"/>
      <url>/2022/11/01/springboot-xxl-job/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Xxl-Job"><a href="#SpringBoot-Xxl-Job" class="headerlink" title="SpringBoot_Xxl-Job"></a>SpringBoot_Xxl-Job</h1><h2 id="新建-xxl-job-demo-项目，熟悉原生-xxl-job-项目工作原理"><a href="#新建-xxl-job-demo-项目，熟悉原生-xxl-job-项目工作原理" class="headerlink" title="新建 xxl-job-demo 项目，熟悉原生 xxl-job 项目工作原理"></a>新建 xxl-job-demo 项目，熟悉原生 xxl-job 项目工作原理</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>添加 pom.xml 文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xuxueli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xxl-job-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul><li>添加配置文件</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># web port</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8082</span><span class="token comment" spellcheck="true"># log config</span><span class="token attr-name">logging.config</span><span class="token punctuation">=</span><span class="token attr-value">classpath:logback.xml</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">xxl-job-demo</span><span class="token comment" spellcheck="true">### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；</span><span class="token attr-name">xxl.job.admin.addresses</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8080/xxl-job-admin</span><span class="token comment" spellcheck="true">### 执行器通讯TOKEN [选填]：非空时启用；</span><span class="token attr-name">xxl.job.accessToken</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span><span class="token attr-name">xxl.job.executor.appname</span><span class="token punctuation">=</span><span class="token attr-value">xxl-job-demo</span><span class="token comment" spellcheck="true">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span><span class="token attr-name">xxl.job.executor.address</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；</span><span class="token attr-name">xxl.job.executor.ip</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span><span class="token attr-name">xxl.job.executor.port</span><span class="token punctuation">=</span><span class="token attr-value">9999</span><span class="token comment" spellcheck="true">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span><span class="token attr-name">xxl.job.executor.logpath</span><span class="token punctuation">=</span><span class="token attr-value">/data/applogs/xxl-job/jobhandler</span><span class="token comment" spellcheck="true">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span><span class="token attr-name">xxl.job.executor.logretentiondays</span><span class="token punctuation">=</span><span class="token attr-value">10</span></code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul><li>定义配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>XxlJobConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.addresses}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String adminAddresses<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.accessToken}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String accessToken<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.appname}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String appname<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.address}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.ip}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.logpath}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String logPath<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.logretentiondays}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> logRetentionDays<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> XxlJobSpringExecutor <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>> xxl-job config init."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxlJobSpringExecutor xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appname<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogRetentionDays</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><ul><li>定义运行的 Handler</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobDemoHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Bean模式，一个方法为一个任务     * 1、在Spring Bean实例中，开发Job方法，方式格式要求为 "public ReturnT&lt;String> execute(String param)"     * 2、为Job方法添加注解 "@XxlJob(value="自定义jobhandler名称", init = "JobHandler初始化方法", destroy = "JobHandler销毁方法")"，注解value值对应的是调度中心新建任务的JobHandler属性的值。     * 3、执行日志：需要通过 "XxlJobLogger.log" 打印执行日志；     */</span>    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">"demoJob"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">demoJob</span><span class="token punctuation">(</span>String param<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"java, Hello World~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"param:"</span> <span class="token operator">+</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ReturnT<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="改造原生-xxl-job-适配对应的项目业务"><a href="#改造原生-xxl-job-适配对应的项目业务" class="headerlink" title="改造原生 xxl-job 适配对应的项目业务"></a>改造原生 xxl-job 适配对应的项目业务</h2><p><strong>这里项目之间的调用是通过 Feign，因此需要对原本的项目进行简单的改造，xxl-job 需要作为服务的提供者对外提供服务。</strong></p><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><ul><li>添加 pom.xml 对应的 Feign 依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>2020.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用spring loadbalancer，弃用ribbon --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><ul><li>添加配置文件</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">xxl-job-service-demo1</span><span class="token attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">172.16.0.127:8848</span></code></pre><blockquote><p><strong>在 xxl-job 中，关于任务的新增，修改，触发都在 JobInfoController 这个类之中，但这个类是提供给后台使用的，直接使用需要登录验证，如果这个时候修改 xxl-job 代码，会破坏原本框架的结构，后续业务的扩展和错误的排查会变的很麻烦</strong></p><p>这里提供一个思路：<strong>重写对应的方法，然后添加上 @PermissionLimit(limit = false) 注解即可。</strong></p><ul><li><p>举例</p><blockquote><p>xxl-job 新增任务的方法如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>XxlJobInfo jobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重写后的方法如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addJob"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">addJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> XxlJobInfo jobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>后续的使用，直接调用对应的 addJob，这样既不破坏原本的框架结构，又满足了对应的业务。</p></blockquote></li></ul></blockquote><h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><ul><li>重写 xxl-job 里的方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 新增任务</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addJob"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">addJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> XxlJobInfo jobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更新任务</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateJob"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">updateJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> XxlJobInfo jobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  删除任务</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/removeJob"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">removeJob</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 停止任务</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/stopJob"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">pauseJob</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 开始任务</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/startJob"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">startJob</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> xxlJobService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加并开始任务</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addAndStart"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">addAndStart</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> XxlJobInfo jobInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> xxlJobService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xxlJobService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 重写数据校验的方法</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/cronTriggerTime"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@PermissionLimit</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> ReturnT<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">cronTriggerTime</span><span class="token punctuation">(</span>String scheduleType<span class="token punctuation">,</span> String scheduleConf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    XxlJobInfo paramXxlJobInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramXxlJobInfo<span class="token punctuation">.</span><span class="token function">setScheduleType</span><span class="token punctuation">(</span>scheduleType<span class="token punctuation">)</span><span class="token punctuation">;</span>    paramXxlJobInfo<span class="token punctuation">.</span><span class="token function">setScheduleConf</span><span class="token punctuation">(</span>scheduleConf<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Date lastTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastTime <span class="token operator">=</span> JobScheduleHelper<span class="token punctuation">.</span><span class="token function">generateNextValidTime</span><span class="token punctuation">(</span>paramXxlJobInfo<span class="token punctuation">,</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTime <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">formatDateTime</span><span class="token punctuation">(</span>lastTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnT</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span>ReturnT<span class="token punctuation">.</span>FAIL_CODE<span class="token punctuation">,</span> <span class="token punctuation">(</span>I18nUtil<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"schedule_type"</span><span class="token punctuation">)</span> <span class="token operator">+</span> I18nUtil<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"system_unvalid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnT</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="构造调用-xxl-job-的项目"><a href="#构造调用-xxl-job-的项目" class="headerlink" title="构造调用 xxl-job 的项目"></a>构造调用 xxl-job 的项目</h2><h3 id="第一步-2"><a href="#第一步-2" class="headerlink" title="第一步"></a>第一步</h3><ul><li>添加 pom.xml 文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>2020.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-dependencies.version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-dependencies.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--nacos consumer--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--xxl-job--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xuxueli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xxl-job-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot-dependencies.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步-2"><a href="#第二步-2" class="headerlink" title="第二步"></a>第二步</h3><ul><li>添加配置文件</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring</span><span class="token punctuation">:</span><span class="token attr-name">  application</span><span class="token punctuation">:</span><span class="token attr-name">    name</span><span class="token punctuation">:</span> <span class="token attr-value">springboot-Xxljob</span><span class="token attr-name">    nacos</span><span class="token punctuation">:</span><span class="token attr-name">      discovery</span><span class="token punctuation">:</span><span class="token attr-name">        server-addr</span><span class="token punctuation">:</span> <span class="token attr-value">xxxx-xx-xx:8848</span><span class="token attr-name">  main</span><span class="token punctuation">:</span><span class="token attr-name">    allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token attr-value">true</span><span class="token attr-name">config</span><span class="token punctuation">:</span><span class="token attr-name">  job</span><span class="token punctuation">:</span><span class="token attr-name">    url</span><span class="token punctuation">:</span> <span class="token attr-value">xxl-job-service</span><span class="token attr-name">xxl</span><span class="token punctuation">:</span><span class="token attr-name">  job</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">    # 执行器通讯TOKEN，非空时启用</span><span class="token attr-name">    accessToken</span><span class="token punctuation">:</span> <span class="token attr-value">''</span><span class="token attr-name">    admin</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">      # 调度中心部署跟地址：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"</span><span class="token attr-name">      addresses</span><span class="token punctuation">:</span> <span class="token attr-value">http://127.0.0.1:8082/xxlJobAdmin/v1</span><span class="token attr-name">    executor</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">      # 执行器"AppName"和地址信息配置：AppName执行器心跳注册分组依据；地址信息用于"调度中心请求并触发任务"和"执行器注册"。执行器默认端口为9999，执行器IP默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用。单机部署多个执行器时，注意要配置不同执行器端口</span><span class="token attr-name">      appname</span><span class="token punctuation">:</span> <span class="token attr-value">xxl-server</span><span class="token attr-name">      ip</span><span class="token punctuation">:</span> <span class="token attr-value">''</span><span class="token attr-name">      address</span><span class="token punctuation">:</span> <span class="token attr-value">''</span><span class="token comment" spellcheck="true">      # 执行器运行日志文件存储的磁盘位置，需要对该路径拥有读写权限</span><span class="token attr-name">      logpath</span><span class="token punctuation">:</span> <span class="token attr-value">/data/applogs/xxl-job/jobhandler</span><span class="token comment" spellcheck="true">      # 执行器Log文件定期清理功能，指定日志保存天数，日志文件过期自动删除。限制至少保持3天，否则功能不生效；</span><span class="token attr-name">      logretentiondays</span><span class="token punctuation">:</span> <span class="token attr-value">30</span><span class="token attr-name">      port</span><span class="token punctuation">:</span> <span class="token attr-value">9999</span></code></pre><h3 id="第三步-2"><a href="#第三步-2" class="headerlink" title="第三步"></a>第三步</h3><ul><li>定义 xxl-job 的配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>XxlJobConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.addresses}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String adminAddresses<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.accessToken}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String accessToken<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.appname}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String appname<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.address}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.ip}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.logpath}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String logPath<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.logretentiondays}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> logRetentionDays<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> XxlJobSpringExecutor <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>> xxl-job config init."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxlJobSpringExecutor xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appname<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogRetentionDays</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 针对多网卡、容器内部署等情况，可借助 "spring-cloud-commons" 提供的 "InetUtils" 组件灵活定制注册IP；     *     *      1、引入依赖：     *          &lt;dependency>     *             &lt;groupId>org.springframework.cloud&lt;/groupId>     *             &lt;artifactId>spring-cloud-commons&lt;/artifactId>     *             &lt;version>${version}&lt;/version>     *         &lt;/dependency>     *     *      2、配置文件，或者容器启动变量     *          spring.cloud.inetutils.preferred-networks: 'xxx.xxx.xxx.'     *     *      3、获取IP     *          String ip_ = inetUtils.findFirstNonLoopbackHostInfo().getIpAddress();     */</span><span class="token punctuation">}</span></code></pre><h3 id="第四步-1"><a href="#第四步-1" class="headerlink" title="第四步"></a>第四步</h3><ul><li>定义 Feign 调用接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"${config.job.url}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/xxlJobAdmin/v1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobInfoClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * CRON 数据校验     *     * @param scheduleType     * @param scheduleConf     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/jobinfo/cronTriggerTime"</span><span class="token punctuation">)</span>    ReturnT<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">cronTriggerTime</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"scheduleType"</span><span class="token punctuation">)</span> String scheduleType<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"scheduleConf"</span><span class="token punctuation">)</span> String scheduleConf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增任务     *     * @param jobInfo     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/jobinfo/addJob"</span><span class="token punctuation">)</span>    ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">addJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> XxlJobInfo jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 更新任务     *     * @param jobInfo     * @return     */</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/jobinfo/updateJob"</span><span class="token punctuation">)</span>    ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">updateJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> XxlJobInfo jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除任务     *     * @param id     * @return     */</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/jobinfo/removeJob"</span><span class="token punctuation">)</span>    ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">removeJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 停止任务     *     * @param id     * @return     */</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/jobinfo/stopJob"</span><span class="token punctuation">)</span>    ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">pauseJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 开始任务     *     * @param id     * @return     */</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/jobinfo/startJob"</span><span class="token punctuation">)</span>    ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">startJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 添加并开始任务     *     * @param jobInfo     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/jobinfo/addAndStart"</span><span class="token punctuation">)</span>    ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">addAndStart</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> XxlJobInfo jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><ul><li>定义运行的 Hander</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * XxlJob开发示例（Bean模式） * &lt;p> * 开发步骤： * 1、任务开发：在Spring Bean实例中，开发Job方法； * 2、注解配置：为Job方法添加注解 "@XxlJob(value="自定义jobhandler名称", init = "JobHandler初始化方法", destroy = "JobHandler销毁方法")"，注解value值对应的是调度中心新建任务的JobHandler属性的值。 * 3、执行日志：需要通过 "XxlJobHelper.log" 打印执行日志； * 4、任务结果：默认任务结果为 "成功" 状态，不需要主动设置；如有诉求，比如设置任务结果为失败，可以通过 "XxlJobHelper.handleFail/handleSuccess" 自主设置任务结果； * * @author xuxueli 2019-12-11 21:52:51 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleXxlJob</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String str <span class="token operator">=</span> <span class="token string">"XXL-JOB,参数:"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ExecutorService pool<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这里引入多线程     * @PostConstruct 的作用是在项目启动时执行这个方法     * maximumPoolSize 设置为 2 ，拒绝策略为 AbortPolicy 策略，直接抛出异常     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1、简单任务示例（Bean模式）     */</span>    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">"demoJobHandler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoJobHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String command <span class="token operator">=</span> XxlJobHelper<span class="token punctuation">.</span><span class="token function">getJobParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">+</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>split<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"参数错误---"</span> <span class="token operator">+</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Integer taskId <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer jobId <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 处理业务的代码             */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2、分片广播任务     */</span>    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">"shardingJobHandler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shardingJobHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分片参数</span>        <span class="token keyword">int</span> shardIndex <span class="token operator">=</span> XxlJobHelper<span class="token punctuation">.</span><span class="token function">getShardIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> shardTotal <span class="token operator">=</span> XxlJobHelper<span class="token punctuation">.</span><span class="token function">getShardTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"分片参数：当前分片序号 = {}, 总分片数 = {}"</span><span class="token punctuation">,</span> shardIndex<span class="token punctuation">,</span> shardTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 业务逻辑</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shardTotal<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> shardIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第 {} 片, 命中分片开始处理"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第 {} 片, 忽略"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 4、跨平台Http任务     * 参数示例：     * "url: http://www.baidu.com\n" +     * "method: get\n" +     * "data: content\n";     */</span>    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">"httpJobHandler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">httpJobHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// param parse</span>        String param <span class="token operator">=</span> XxlJobHelper<span class="token punctuation">.</span><span class="token function">getJobParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">==</span> null <span class="token operator">||</span> param<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"param["</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">"] invalid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">handleFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> httpParams <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> null<span class="token punctuation">;</span>        String method <span class="token operator">=</span> null<span class="token punctuation">;</span>        String data <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String httpParam <span class="token operator">:</span> httpParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpParam<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"url:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                url <span class="token operator">=</span> httpParam<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>httpParam<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"url:"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpParam<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"method:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                method <span class="token operator">=</span> httpParam<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>httpParam<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"method:"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpParam<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data <span class="token operator">=</span> httpParam<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>httpParam<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// param valid</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> null <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"url["</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"] invalid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">handleFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"method["</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">"] invalid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">handleFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> isPostMethod <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// request</span>        HttpURLConnection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedReader bufferedReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// connection</span>            URL realUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> realUrl<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// connection setting</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span>isPostMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setUseCaches</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Accept-Charset"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// do connection</span>            connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// data</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPostMethod <span class="token operator">&amp;&amp;</span> data <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                DataOutputStream dataOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dataOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dataOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dataOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// valid StatusCode</span>            <span class="token keyword">int</span> statusCode <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Http Request StatusCode("</span> <span class="token operator">+</span> statusCode <span class="token operator">+</span> <span class="token string">") Invalid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// result</span>            bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuilder result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String responseMsg <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>responseMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            XxlJobHelper<span class="token punctuation">.</span><span class="token function">handleFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedReader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    connection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 5、生命周期任务示例：任务初始化与销毁时，支持自定义相关逻辑；     */</span>    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"demoJobHandler2"</span><span class="token punctuation">,</span> init <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">,</span> destroy <span class="token operator">=</span> <span class="token string">"destroy"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoJobHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        XxlJobHelper<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"destory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><ul><li>业务调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quart"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> JobInfoClient jobInfoClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 执行器名称，这个值默认在配置项中配置     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.appname}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String appname<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这里添加一个例子说明如何调用 xxl-job 对应的方法     * 具体使用的时候，需要根据实际的使用情况封装对应的参数     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/addTask"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 定义参数的值         * handler 的值就是 SampleXxlJob 类对应方法的名称注解         * 在后续的业务调用中，只需要在创建新的 Job 时，传入对应的参数即可执行对应 Hanlder 里面的任务         */</span>        String name <span class="token operator">=</span> <span class="token string">"这是测试Demo"</span><span class="token punctuation">;</span>        String param <span class="token operator">=</span> <span class="token string">"这是Task的参数"</span><span class="token punctuation">;</span>        String handler <span class="token operator">=</span> <span class="token string">"demoJobHandler"</span><span class="token punctuation">;</span>        ReturnT<span class="token operator">&lt;</span>Integer<span class="token operator">></span> groupId <span class="token operator">=</span> jobInfoClient<span class="token punctuation">.</span><span class="token function">getGroupId</span><span class="token punctuation">(</span>appname<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer infoClientId <span class="token operator">=</span> jobInfoClient<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        XxlJobInfo xxlJobInfo <span class="token operator">=</span> XxlJobInfo<span class="token punctuation">.</span><span class="token function">taskJob</span><span class="token punctuation">(</span>groupId<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>infoClientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 添加 xxl-job 的任务</span>            ReturnT<span class="token operator">&lt;</span>String<span class="token operator">></span> returnT <span class="token operator">=</span> jobInfoClient<span class="token punctuation">.</span><span class="token function">addJob</span><span class="token punctuation">(</span>xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>returnT<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调度任务创建失败，传入的数据为：{}"</span><span class="token punctuation">,</span> xxlJobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><ul><li>启动类增加注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootQuartzApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootQuartzApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Elasticsearch</title>
      <link href="/2022/11/01/springboot-elasticsearch/"/>
      <url>/2022/11/01/springboot-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Elasticsearch"><a href="#SpringBoot-Elasticsearch" class="headerlink" title="SpringBoot_Elasticsearch"></a>SpringBoot_Elasticsearch</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 添加对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">></span></span>7.15.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${elasticsearch.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${elasticsearch.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.71<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>配置文件添加对应的配置信息</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>    <span class="token key atrule">rest</span><span class="token punctuation">:</span>      <span class="token key atrule">uris</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#xxxx.xx.x.xx:9200</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>定义配置类<code>RestHighLevelClientConfig</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestHighLevelClientConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.elasticsearch.rest.uris}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String uris<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestHighLevelClient <span class="token function">restHighLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createHttpHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建 HttpHost 对象     * @return 返回 HttpHost 对象     */</span>    <span class="token keyword">private</span> HttpHost <span class="token function">createHttpHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Asserts<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uris<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ElasticSearch cluster ip address cannot empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> uris<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>定义数据实体类<code>ElasticSearchDocument</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchDocument</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><ul><li>定义公共错误类<code>BaseException</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BaseException</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><ul><li>定义方法接口<code>ElasticSearchService</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ElasticSearchService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建 ES 索引     *     * @param index      索引     * @param properties 文档属性集合     * @return 返回 true，表示创建成功     */</span>    <span class="token keyword">boolean</span> <span class="token function">createIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断索引是否存在     *     * @param index 索引     * @return 返回 true，表示存在     */</span>    <span class="token keyword">boolean</span> <span class="token function">isExistIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除索引     *     * @param index 索引     * @return 返回 true，表示删除成功     */</span>    <span class="token keyword">boolean</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 保存文档     * &lt;p>     * 如果文档存在，则更新文档；如果文档不存在，则保存文档。     *     * @param document 文档数据     */</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> ElasticSearchDocument<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> document<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 更新 ES 文档     *     * @param index    索引     * @param document 文档     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> ElasticSearchDocument<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> document<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 批量保存文档     * &lt;p>     * 如果集合中有些文档已经存在，则更新文档；不存在，则保存文档。     *     * @param index        索引     * @param documentList 文档集合     * @param &lt;T>          数据类型     */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">saveAll</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ElasticSearchDocument<span class="token operator">&lt;</span>T<span class="token operator">>></span> documentList<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据文档 ID 删除文档     *     * @param index 索引     * @param id    文档 ID     */</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据查询条件删除文档     *     * @param index        索引     * @param queryBuilder 查询条件构建器     */</span>    <span class="token keyword">void</span> <span class="token function">deleteByQuery</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> QueryBuilder queryBuilder<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据文档 ID 批量删除文档     *     * @param index  索引     * @param idList 文档 ID 集合     */</span>    <span class="token keyword">void</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> idList<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据索引和文档 ID 获取数据     *     * @param index 索引     * @param id    文档 ID     * @param &lt;T>   数据类型     * @return T  返回 T 类型的数据     */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String id<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> resultType<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 条件查询     *     * @param index         索引     * @param sourceBuilder 条件查询构建器     * @param &lt;T>           数据类型     * @return T 类型的集合     */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">searchByQuery</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> SearchSourceBuilder sourceBuilder<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> resultType<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取聚合数据     *     * @param searchSourceBuilder 条件查询构建器     * @param indices             索引     * @return 返回聚合集合     */</span>    Aggregations <span class="token function">searchAgg</span><span class="token punctuation">(</span>SearchSourceBuilder searchSourceBuilder<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> indices<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><ul><li>实现接口<code>ElasticSearchService</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ElasticSearchService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_SHARDS <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_REPLICAS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestHighLevelClient restHighLevelClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建 ES 索引     *     * @param index      索引     * @param properties 文档属性集合     * @return 返回 true，表示创建成功     * @throws IOException Rest Client 请求异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        XContentBuilder builder <span class="token operator">=</span> XContentFactory<span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ES 7.0 后的版本中，已经弃用 type</span>        builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"mappings"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"number_of_shards"</span><span class="token punctuation">,</span> DEFAULT_SHARDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"number_of_replicas"</span><span class="token punctuation">,</span> DEFAULT_REPLICAS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CreateIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        CreateIndexResponse response <span class="token operator">=</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断索引是否存在     *     * @param index 索引     * @return 返回 true，表示存在     * @throws IOException Rest Client 请求异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isExistIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        GetIndexRequest getIndexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        getIndexRequest<span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getIndexRequest<span class="token punctuation">.</span><span class="token function">humanReadable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        getIndexRequest<span class="token punctuation">.</span><span class="token function">includeDefaults</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>getIndexRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除索引     *     * @param index 索引     * @return 返回 true，表示删除成功     * @throws IOException Rest Client 请求异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DeleteIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            AcknowledgedResponse response <span class="token operator">=</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ElasticsearchException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RestStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span> <span class="token punctuation">{</span>                exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token string">"Not found index: "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 保存文档     * &lt;p>     * 如果文档存在，则更新文档；如果文档不存在，则保存文档。     *     * @param document 文档数据     * @throws IOException Rest Client 请求异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> ElasticSearchDocument<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> document<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        indexRequest<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存文档数据</span>        restHighLevelClient<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新 ES 文档     *     * @param index    索引     * @param document 文档     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> ElasticSearchDocument<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> document<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        UpdateRequest updateRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateRequest<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        restHighLevelClient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量保存文档     * &lt;p>     * 如果集合中有些文档已经存在，则更新文档；不存在，则保存文档。     *     * @param index        索引     * @param documentList 文档集合     * @param &lt;T>          数据类型     * @throws IOException Rest Client 请求异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">saveAll</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ElasticSearchDocument<span class="token operator">&lt;</span>T<span class="token operator">>></span> documentList<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>documentList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 批量请求</span>        BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        documentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>doc <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        restHighLevelClient<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据文档 ID 删除文档     *     * @param index 索引     * @param id    文档 ID     * @throws IOException Rest Client 请求异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DeleteRequest deleteRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        restHighLevelClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>deleteRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据查询条件删除文档     *     * @param index        索引     * @param queryBuilder 查询条件构建器     * @throws IOException Rest Client 请求异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteByQuery</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> QueryBuilder queryBuilder<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DeleteByQueryRequest deleteRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteByQueryRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        deleteRequest<span class="token punctuation">.</span><span class="token function">setConflicts</span><span class="token punctuation">(</span><span class="token string">"proceed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        restHighLevelClient<span class="token punctuation">.</span><span class="token function">deleteByQuery</span><span class="token punctuation">(</span>deleteRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据文档 ID 批量删除文档     *     * @param index  索引     * @param idList 文档 ID 集合     * @throws IOException Rest Client 请求异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> idList<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>idList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>id <span class="token operator">-</span><span class="token operator">></span> bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        restHighLevelClient<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引和文档 ID 获取数据     *     * @param index 索引     * @param id    文档 ID     * @param &lt;T>   数据类型     * @return T  返回 T 类型的数据     * @throws IOException Rest Client 请求异常     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String id<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> resultType<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        GetRequest getRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        GetResponse response <span class="token operator">=</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        String resultAsString <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>resultAsString<span class="token punctuation">,</span> resultType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 条件查询     *     * @param index         索引     * @param sourceBuilder 条件查询构建器     * @param &lt;T>           数据类型     * @return T 类型的集合     * @throws IOException Rest Client 请求异常     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">searchByQuery</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> SearchSourceBuilder sourceBuilder<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> resultType<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构建查询请求</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取返回值</span>        SearchResponse response <span class="token operator">=</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchHit<span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建空的查询结果集合</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hits<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以字符串的形式获取数据源</span>            String sourceAsString <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>sourceAsString<span class="token punctuation">,</span> resultType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> results<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取聚合数据     *     * @param searchSourceBuilder 条件查询构建器     * @param indices 索引     * @return 返回聚合集合     */</span>    <span class="token keyword">public</span> Aggregations <span class="token function">searchAgg</span><span class="token punctuation">(</span>SearchSourceBuilder searchSourceBuilder<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchResponse searchResponse <span class="token operator">=</span> restHighLevelClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> searchResponse<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token string">"ElasticSearch client exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis_进阶</title>
      <link href="/2022/10/21/redis-jin-jie/"/>
      <url>/2022/10/21/redis-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-进阶"><a href="#Redis-进阶" class="headerlink" title="Redis_进阶"></a>Redis_进阶</h1><h2 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>底层是 key-value 的数据结构，一般存储对于的缓存数据比较多。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>底层是双向链表，一般作为消息队列的使用。</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>底层是一个 string 类型的 field 和 value 的映射表，一般在缓存的时候用来存放对象。</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>底层是一个不含重复元素且无序的集合，一般当缓存需要存放不能重复的元素且对数据顺序没要求的时候使用。</p><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>底层是一个不含重复元素且有序的元素集合。一般当缓存需要存放不能重复的元素且对数据顺序有要求的时候使用。</p><h3 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h3><p>常用于存储连续的二进制数，且只有 0 和 1 两种状态。</p><p><em>除此之外，还有基数统计和地理位置的数据结构</em></p><h2 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h2><ol><li>从已设置过期时间的数据集中选择最近最少使用的数据淘汰。</li><li>从已设置过期时间的数据集中选择将要过期的数据淘汰。</li><li>从已设置过期时间的数据集中选择任意数据淘汰。</li><li>移除最近最少使用的 Key 。</li><li>从数据集中任意选择数据集淘汰。</li></ol><h2 id="常见的缓存问题"><a href="#常见的缓存问题" class="headerlink" title="常见的缓存问题"></a>常见的缓存问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>用户查询数据库不存在的数据，数据也不会在缓存中存储。当用户发起请求，它永远不会访问缓存，数据库压力就会增大。</p><ul><li>解决方案：<ol><li>参数检验，上层拦截。</li><li>查询结果为空也做缓存，但有效期设置较短，避免影响正常数据的使用。</li></ol></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>热点数据存储到期，多个线程同时请求热点数据，缓存刚好过期，所有并发都会访问数据库。</p><ul><li>解决方案：<ol><li>设置热点键。</li></ol></li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>数据未加载到缓存或者缓存大范围失效，导致请求查询数据库。</p><ul><li>解决方案：<ol><li>事前：高可用缓存。</li><li>事中：缓存降级。</li><li>事后：Redis 备份和快速预热。</li></ol></li></ul><h2 id="持久化策略"><a href="#持久化策略" class="headerlink" title="持久化策略"></a>持久化策略</h2><h3 id="快照方式"><a href="#快照方式" class="headerlink" title="快照方式"></a>快照方式</h3><p>快照方式分为两种，一种是同步处理，但会造成客户端命令的阻塞；一种是异步的方式，但异步方式下当 fork 数据的时候，会占用大量的内存，并且在此期间，如果发生应用数据的修改，那么修改的这份数据会丢失。</p><h3 id="追加文件方式"><a href="#追加文件方式" class="headerlink" title="追加文件方式"></a>追加文件方式</h3><p>通过日志的方式进行同步，相比较快照的方式，数据较慢。</p><h2 id="保证数据的一致性"><a href="#保证数据的一致性" class="headerlink" title="保证数据的一致性"></a>保证数据的一致性</h2><h3 id="常使用的方案"><a href="#常使用的方案" class="headerlink" title="常使用的方案"></a>常使用的方案</h3><ul><li><p>更新</p><p>先更新数据库在删缓存。</p></li><li><p>读取</p><p>先从缓存中读取数据，如果有就返回，如果没有就查对应的数据库，然后再把数据写入到缓存。</p><blockquote><p><strong>这样的处理会存在一个问题：数据在写入数据库的时候是成功的，但更新缓存失败了，就会出现数据不一致的情况。</strong></p><p><strong>处理方式：</strong></p><ol><li>在更新数据的时候同样也更新缓存，通过加锁的方式进行一个异步的操作。</li><li>异步重试：把重试请求写到消息队列中，然后通过有专门的消费者重试，直到成功。</li><li>订阅数据库并更日志，再更新缓存，可以使用 Flume 和 Canal 来实现。</li></ol></blockquote></li></ul><h3 id="其它方案"><a href="#其它方案" class="headerlink" title="其它方案"></a>其它方案</h3><ol><li>先删除缓存，在更新数据库，但一般不采用这样的方式，因为如果缓存删除成功了还没更新数据库，那么很容易出现数据丢失的情况，并且 Redis 也没有提供将缓存数据写入数据库的功能。</li></ol><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>将一台 Redis 服务器上的数据复制到其他的 Redis 服务器上，前者为主节点，后者为从节点，数据的复制是单向的，只能从主到从。</p><p>这样的部署有一个缺点，那就是如果主服务挂了，需要手动去切换对于的服务器，在此期间会存在数据丢失的情况。</p><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>哨兵模式就是完善主从复制的手动切换，它有一个监控功能会不断监控主节点和从节点是否还在正常运行，当主节点不能工作的时候，会实现自动的故障转移操作，将从节点切换成主节点。</p><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><p>主节点的分片和扩展，比起上面两种方式，集群模式的维护成本更高，底层使用哈希槽的方式来实现数据的分发。</p><h2 id="实现分布式锁"><a href="#实现分布式锁" class="headerlink" title="实现分布式锁"></a>实现分布式锁</h2><p><strong>为什么要使用分布式锁？</strong></p><p>为了保证在分布式环境下，对外共享的资源在同一时刻下只有一个客户端可以操作。</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><ol><li><p>使用 setnx 命令来完成，且需要设置一个唯一标识 value，并设置过期时间。</p><blockquote><p><strong>先说唯一标识 value</strong></p><p>如何不设置唯一标识，那么线程在释放锁的时候，就会误释放掉其他线程的锁。</p><p><strong>过期时间</strong></p><p>如果不设置，那么如果程序挂了，那么这个锁永远都不会被释放。</p><p><strong>设置过期时间，怎么保证锁不会提前过期？</strong></p><p>可以使用 Redisson 去解决，Redisson 有一个看门狗机制，它是一个后台进程，每隔 10s 就会做一次检查当前线程是否还持有锁，如果有它会做一个自动的延长，延长时间为 30s。</p></blockquote></li></ol><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><ol><li>需要拿加锁成功的唯一标识进行解锁，从而保证加锁和解锁的是同一个客户端。</li><li>解锁操作需要比较唯一标识是否相等，以免释放掉其他线程的锁，相等在执行删除操作。</li></ol><p>（这两个操作可以使用 Lua 脚本方式来实现）</p><h2 id="BigKey"><a href="#BigKey" class="headerlink" title="BigKey"></a>BigKey</h2><p>如果一个 key 对应的 value 占用的内存比较大，那么这个 key 就是一个 BigKey。</p><ul><li>处理方式：<ol><li>对大 Key 进行拆分</li><li>对大 Key 进行清理</li></ol></li></ul><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><h3 id="Redis-是不是单线程的？"><a href="#Redis-是不是单线程的？" class="headerlink" title="Redis 是不是单线程的？"></a>Redis 是不是单线程的？</h3><p>Redis 在 6.0 之前，是单线程的，在 6.0 之后，引入了多线程的概念。</p><p>Redis 引入多线程主要是为了提高网络 IO 的读写性能，尽管 Redis 引入了多线程，但执行命令依然是单线程顺序，且 Redis 6.0 多线程是禁用的，只使用主线程，使用的时候需要通过配置项开启，并且要设置线程数，否则不生效。</p><h3 id="Redis-为什么使用单线程？"><a href="#Redis-为什么使用单线程？" class="headerlink" title="Redis 为什么使用单线程？"></a>Redis 为什么使用单线程？</h3><ol><li>单线程可以避免多线程的死锁，上下文切换在资源上的开销。</li><li>但线程在代码上实现更简单，方便维护。</li><li>Redis 的性能不再 CPU，而在内存和网络。</li></ol><h3 id="Redis-为什么那么快？"><a href="#Redis-为什么那么快？" class="headerlink" title="Redis 为什么那么快？"></a>Redis 为什么那么快？</h3><ol><li>Redis 是基于内存的数据存储，这样就避免了磁盘的 IO 开销</li><li>Redis 是单线程实现，避免了多个线程之间对资源的竞争和上下文的切换</li><li>Redis 通过 IO 多路复用技术，让 Redis 实现监听客户端的连接，来实现高性能的网络通信</li><li>Redis 底层的数据结构都是做了进一步优化处理的，使得在数据存储上更加高效。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/10/18/she-ji-mo-shi/"/>
      <url>/2022/10/18/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>确保类中只有一个实例，并且提供一个全局访问点。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>饿汉式-线程安全</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 饿汉式-线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleHungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 类初始化的时候就加载这个对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingleHungry singleHungry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleHungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleHungry<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>懒汉式-线程不安全</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 懒汉式-线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleSlacker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingleSlacker singleSlacker <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleSlacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行的时候加载这个对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleSlacker <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleSlacker <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            singleSlacker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleSlacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleSlacker<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>懒汉式-双重同步锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 懒汉式-双重同步锁 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleSlackerLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> SingleSlackerLock singleSlackerLock <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleSlackerLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 运行时加载     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleSlackerLock <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleSlackerLock <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingleSlackerLock<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleSlackerLock <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    singleSlackerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleSlackerLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleSlackerLock<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>只生成一个实例，对性能的开销比较少，能提高系统效率，同时能严格控制访问。</p><ul><li>缺点</li></ul><p>由于只有一个实例，因此类的职责会过重，同时没有抽象类，扩展有一定局限。</p><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>有一个工厂对象决定创建对应的产品实例。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><ul><li>定义接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICourse</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义方法     */</span>    <span class="token keyword">void</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义 JavaCourse 类。实现接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaCourse</span> <span class="token keyword">implements</span> <span class="token class-name">ICourse</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Java 课程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定义 PhpCourse 类。实现接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhpCourse</span> <span class="token keyword">implements</span> <span class="token class-name">ICourse</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Php 课程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义工厂类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义工厂类，实现对应方法调用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CourseFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ICourse <span class="token function">create</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JavaCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PhpCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>测试方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactoryTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CourseFactory courseFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CourseFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ICourse java <span class="token operator">=</span> courseFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ICourse php <span class="token operator">=</span> courseFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        php<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>对客户端隐藏相关细节，只关注结果。</p><ul><li>缺点</li></ul><p>工厂类的职责过重，不利于扩展复杂的产品结构。</p><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><ul><li>定义抽象类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义公共接口方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个公共接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明抽象方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">abstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义具体的类，实现抽线类 Product */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">abstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体类：ConcreteProduct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定义具体的类，实现抽线类 Product */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProduct</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">abstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体类：AbstractProduct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义抽象工厂</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂类，为工厂具体实现类提供扩展 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span>  <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Product</span><span class="token operator">></span> T <span class="token function">createProduct</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义抽象工厂的实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂类的实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Product</span><span class="token operator">></span> T <span class="token function">createProduct</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Product product <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            product <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化工厂</span>        Factory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例 ConcreteProduct 类</span>        ConcreteProduct concreteProduct <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span>ConcreteProduct<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        concreteProduct<span class="token punctuation">.</span><span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        concreteProduct<span class="token punctuation">.</span><span class="token function">abstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例 AbstractProduct 类</span>        AbstractProduct abstractProduct <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span>AbstractProduct<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        abstractProduct<span class="token punctuation">.</span><span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        abstractProduct<span class="token punctuation">.</span><span class="token function">abstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>如果去掉抽象工厂类 Factory ，那么就成了简单工厂模式，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 简单工厂实现类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactory</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Product</span><span class="token operator">></span> T <span class="token function">createProduct</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Product product <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          product <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>product<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>程序的可扩展性比较高。</p><ul><li>缺点</li></ul><p>系统复杂性抽象性难道增加。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>通过代理对象来调用目标类。</p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><ul><li>定义接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现接口，实现类不做任何的操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户保存方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义代理类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义代理对象，这里执行对代理对象的操作 * 如果后续增加新的操作，只需要修改对应的实现类即可 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserProxy</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化对象 UserService</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例化代理对象 UserProxy</span>        UserProxy userProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserProxy</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        userProxy<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h4><h5 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h5><ul><li>引入 pom.xml 文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>定义接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现接口，实现类不做任何的操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户保存方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义代理类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserHandler</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyJDKTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化对象</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例化代理类对象</span>        UserHandler userHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserHandler</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader classLoader <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userProxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> userHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        userProxy<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB 动态代理"></a>CGLIB 动态代理</h5><ul><li>定义接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现接口，实现类不做任何的操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户保存方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * OrderServiceImpl 类没有实现任何接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单保存方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义代理类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyCglibTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义动态代理类</span>        Enhancer enhancerUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancerUser<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>UserServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancerUser<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义被代理的对象</span>        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> enhancerUser<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义动态代理类</span>        Enhancer enhancerOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancerOrder<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>OrderServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancerOrder<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义被代理的对象</span>        OrderServiceImpl orderService <span class="token operator">=</span> <span class="token punctuation">(</span>OrderServiceImpl<span class="token punctuation">)</span> enhancerOrder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderService<span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>JDK 动态代理，原生 JAVA 支持，不需要任何外部依赖。</p><p>CGLIB 动态代理通过继承的方式，无论目标对象有没有实现接口都可以代理。</p><ul><li>缺点</li></ul><p>JDK 动态代理只支持接口的动态代理。</p><p>CGLIB 需要引入外部依赖，无法处理 final 的情况。</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>将一个类的接口转换成另外一个接口。</p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><ul><li>定义需要适配的类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 需要适配的类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdapterClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是需要适配的类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义目标接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 目标接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ObjectiveInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">objectRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义适配的类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义适配器类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdapterClassInterface</span> <span class="token keyword">extends</span> <span class="token class-name">AdapterClass</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectiveInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">objectRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdapterModelTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对目标接口的具体实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestAdapter</span><span class="token punctuation">(</span>ObjectiveInterface objectiveInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        objectiveInterface<span class="token punctuation">.</span><span class="token function">objectRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AdapterModelTest adapterModelTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdapterModelTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AdapterClassInterface adapterClassInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdapterClassInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过适配器实现调用</span>        adapterModelTest<span class="token punctuation">.</span><span class="token function">requestAdapter</span><span class="token punctuation">(</span>adapterClassInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>程序的高扩展和复用性增加。</p><ul><li>缺点</li></ul><p>过多的适配器使用会使得系统的复杂度增加。</p><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>一个抽象类中有一个主方法，同时有多个子方法。定义其它的类，继承这个抽象类，重写抽象方法，通过调用抽象类实现子类的调用。</p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><ul><li>定义抽象类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义抽象类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TemplateClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义接口</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义实现类 UserService，重写抽象类的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">TemplateClass</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user initialize"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 定义实现类 OrderService，重写抽象类的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token keyword">extends</span> <span class="token class-name">TemplateClass</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order initialize"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateModelTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TemplateClass templateUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateUser<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateUser<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateUser<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplateClass templateOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateOrder<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateOrder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateOrder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>封装的代码不需要改变，行为有子类控制，有利于代码维护。</p><ul><li>缺点</li></ul><p>每一个不同实现都需要一个子类来实现，会增加系统的复杂度。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖的对象皆得到通知并被自动更新。</p><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><ul><li>定义观察者接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义观察者接口 ObserverInterface */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ObserverInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>实现观察者接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现观察者接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverClass</span> <span class="token keyword">implements</span> <span class="token class-name">ObserverInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观察者 ObserverClass 收到了消息 ......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 实现观察者接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WatchClass</span> <span class="token keyword">implements</span> <span class="token class-name">ObserverInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观察者 WatchClass 收到了消息 ......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义被观察者接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义被观察者接口 ObservedInterface */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ObservedInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ObserverInterface observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>实现被观察者接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现被观察者接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObservedClass</span> <span class="token keyword">implements</span> <span class="token class-name">ObservedInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Vector<span class="token operator">&lt;</span>ObserverInterface<span class="token operator">></span> vector<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ObserverInterface observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vector <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ObserverInterface observer <span class="token operator">:</span> vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观察者发生了改变 ......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverModelTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ObservedInterface observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObservedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObserverClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WatchClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observed<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点-6"><a href="#优缺点-6" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>完全的开闭原则，支持广播通讯。</p><ul><li>缺点</li></ul><p>无法规避循环依赖导致的系统崩溃。</p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>在不改变原有对象的基础上，提供了扩展对象功能的方案。</p><h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><ul><li>定义被装饰对象的接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义被装饰对象的接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DecoratorInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>实现被装饰对象的接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现被装饰对象接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorClass</span> <span class="token keyword">implements</span> <span class="token class-name">DecoratorInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个被装饰的类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义装饰器类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义装饰器类 Decorator */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">implements</span> <span class="token class-name">DecoratorInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> DecoratorInterface decoratorInterface<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>DecoratorInterface decoratorInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>decoratorInterface <span class="token operator">=</span> decoratorInterface<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        decoratorInterface<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>创建具体的装饰器类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建具体的装饰器类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorConcrete</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DecoratorConcrete</span><span class="token punctuation">(</span>DecoratorInterface decoratorInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>decoratorInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DecoratorConcrete 前操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DecoratorConcrete 后操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratorInterface<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorModelTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DecoratorInterface decoratorInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecoratorClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Decorator decorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecoratorConcrete</span><span class="token punctuation">(</span>decoratorInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>        decorator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点-7"><a href="#优缺点-7" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>比继承灵活，在不改变原有对象的情况下给对象进行扩展。</p><ul><li>缺点</li></ul><p>会增加系统的复杂性。</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>对象有某个行为，在不同的场景中，该行为有不同的实现算法。</p><h3 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h3><ul><li>定义策略模式接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义策略模式接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StrategyInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义策略模式实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 策略接口实现类 StrategyClass */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyClass</span> <span class="token keyword">implements</span> <span class="token class-name">StrategyInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是策略接口实现类 StrategyClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 策略接口实现类 StrategyClass */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategicClass</span> <span class="token keyword">implements</span> <span class="token class-name">StrategyInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是策略接口实现类 StrategicClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义策略器的上下文</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义策略器的上下文 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyContext</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> StrategyInterface strategyInterface<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StrategyContext</span><span class="token punctuation">(</span>StrategyInterface strategyInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategyInterface <span class="token operator">=</span> strategyInterface<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        strategyInterface<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义测试类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyModelTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StrategyContext strategyContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StrategyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategyContext<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StrategyContext strategyContexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StrategicClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategyContexts<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="优缺点-8"><a href="#优缺点-8" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><p>代码耦合性较低，扩展比较方便。</p><ul><li>缺点</li></ul><p>策略的增加会加重系统的复杂性。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka_总结</title>
      <link href="/2022/10/03/kafka-zong-jie/"/>
      <url>/2022/10/03/kafka-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Kafka 是一个分布式，多分区，多副本，多生产者，多订阅者的日志系统。</p><p><img src="/2022/10/03/kafka-zong-jie/kafka.png" alt="img"></p><ul><li>特性</li></ul><ol><li>每个 partition 内的消息顺序传输。</li><li>两种主要的消息传递模式：点对点传递模式、发布-订阅模式。</li><li>只有消息的拉取，没有推送，可以通过轮询实现消息的推送。</li></ol><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><ul><li>消息（Message）</li></ul><p>Kafka 的数据单元称为消息，可以类比数据库内的 ‘数据行’ 或 ‘一条记录’，消息由字节组成。消息有键，键也是一个字节数组，当消息以一种可控的方式写入不同分区时，会用到键。</p><ul><li>批次（Batch）</li></ul><p>消息被分批写入 Kafka，批次就是一组消息，这些消息属于同一个主题和分区。</p><ul><li>主题（Topic）</li></ul><p>Kafka 内的消息通过主题进行分类，主题可以看作一类消息的集合。</p><ul><li>分区（Partition）</li></ul><p>主题可以被分为若干分区，一个主题通过分区分布于 Kafka 集群中。（每个分区上的数据是不一样的，它们共同构成 Kafka 主题上的数据。）每个主题至少有一个分区。每个分区中的数据使用多个 Segment 文件存储。分区中的数据是有序的，不同分区间的数据丢失了数据的顺序。如果主题有多个分区，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将分区数目设为 1。</p><p><img src="/2022/10/03/kafka-zong-jie/topic.png" alt="topic"></p><ul><li>生产者（Producer）</li></ul><p>生产者负责把消息均衡地分布到主题的所有分区上，可以通过下面几种方式：</p><ol><li>直接指定消息的分区</li><li>根据消息的 key 散列取模计算分区</li><li>轮询指定分区</li></ol><ul><li>消费者（Consumer）</li></ul><p>消费者负责消费数据，根据数据偏移量来区分消息是否已读。</p><ul><li>消费组（Consumer Group）</li></ul><p>多个消费者消费同一个主题不同分区上的数据，那么这些消费者就可以加入到同一消费组。</p><p>消费组是逻辑上的概念，是 Kafka 实现单播和广播两种消息模型的手段。</p><p>消费组可以保证一个消费组获取到特定主题的全部的消息。并且在消费组内部，若干个消费者消费主题分区的消息，同时也可以保证一个主题的每个分区只被消费组中的一个消费者消费。</p><p><img src="/2022/10/03/kafka-zong-jie/commsuer.png" alt="commsuer"></p><ul><li>Broker</li></ul><p>一个独立的 Kafka 服务器。</p><ul><li>集群（Cluster）</li></ul><p>多个 Kafka 服务器组成的服务。</p><p><img src="/2022/10/03/kafka-zong-jie/broker.png" alt="broker"></p><ul><li>副本（Replica）</li></ul><p>为实现数据备份功能，一个主题的每个分区都有若干个副本，一个 Leader 副本和若干个 Follower 副本。</p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><h3 id="数据生产流程"><a href="#数据生产流程" class="headerlink" title="数据生产流程"></a>数据生产流程</h3><p><img src="/2022/10/03/kafka-zong-jie/producer.png" alt="producer"></p><ol><li>Producer 在创建的时候，会创建一个 Sender 线程并设置为守护线程。</li><li>生产消息时，内部其实是异步流程，消息的主要流程为：拦截器 -&gt; 序列化器 -&gt; 分区器，然后将消息缓存在缓冲区（该缓冲区也是在 Producer 创建时创建）。</li><li>缓冲区数据大小达到 batch.size 或者 linger.ms 的上限，（哪个先达到就算哪个）批次发送消息到分区。</li><li>批次发送消息到分区后，消息会落盘到 Broker；如果生产者配置了 retrires 参数大于 0 并且失败原因允许重试，那么客户端内部会对该消息进行重试。</li><li>落盘到 Broker 成功，返回生产元数据给生产者。（元数据返回有两种方式：一种是通过阻塞直接返回，另一种是通过回调返回。）</li></ol><h3 id="生产者配置"><a href="#生产者配置" class="headerlink" title="生产者配置"></a>生产者配置</h3><p>参考如下文档地址：</p><blockquote><p><a href="https://kafka.apachecn.org/documentation.html#producerconfigs" target="_blank" rel="noopener">https://kafka.apachecn.org/documentation.html#producerconfigs</a></p></blockquote><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><p>消费者从订阅的主题内消费数据，消费的数据偏移量保存在 Kafka 内的 __consumer_offsets 主题中。</p><p>多个从同一个主题消费的消费者可以加入到一个消费组中。</p><p>Kafka 消费数据采用的是 Pull 的方式，（如果采取 Push 的模式，那么最大的缺点就是 Broker 不清楚消费者的消费速度，并且推送速率是 Broker 控制的，这样就很容易造成消息堆积）选择 Pull 模式，这时消费者可以根据自己的情况来拉取数据，也可以进行延迟处理。</p><blockquote><p>如果 Broker 没有消息，那么每次消费者拉取的数据都是空数据，会一直循环返回空数据，针对这个问题，消费者在每次消费数据的时候，都会传递一个参数 timeout ，当返回空数据的时候，会进行阻塞，需要等待 timeout 再去消费，直到数据到达。</p></blockquote><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><h4 id="轮询策略"><a href="#轮询策略" class="headerlink" title="轮询策略"></a>轮询策略</h4><p>将消息顺序分配到各个分区中，假设一个主题下有三个分区，第一条消息将被发送到分区 0，第二条消息被发送到分区 1，第三条消息被发送到分区 2，以此类推，第四条消息将被发送到分区 0。</p><h4 id="随机策略"><a href="#随机策略" class="headerlink" title="随机策略"></a>随机策略</h4><p>将消息随机地放到任意一个分区上，本质上看随机策略也是力求将数据均匀地打散到各个分区，但从实际表现来看，它要逊于轮询策略，所以如果追求数据的均匀分布，还是使用轮询策略比较好。事实上，随机策略是老版本生产者使用的分区策略，在新版本中已经改为轮询了。</p><h4 id="按消息键保存策略"><a href="#按消息键保存策略" class="headerlink" title="按消息键保存策略"></a>按消息键保存策略</h4><p>Kafka 允许为每条消息创建消息键，称为 Key，每个 Key 可以代表具体的业务含义，如业务 Id，用户 Id 等。一旦消息被定义了 Key，那么你就可以保证同一个 Key 的所有消息都进入到相同的分区里面，由于每个分区下的消息处理都是有顺序的，故这个策略被称为按消息键保序策略。</p><h3 id="再平衡"><a href="#再平衡" class="headerlink" title="再平衡"></a>再平衡</h3><p>再平衡是一个协议，规定了如何让消费者组下的所有消费者来分配主题中的每一个分区。</p><p>触发再平衡的条件有三个：</p><ol><li>消费者组内成员发生变更，这个变更包括了增加和减少消费者，比如消费者宕机退出消费组。</li><li>主题的分区数发生变更，Kafka 目前只支持增加分区，当增加的时候就会触发重平衡。</li><li>订阅的主题发生变化，当消费者组使用正则表达式订阅主题，而恰好又新建了对应的主题，就会触发重平衡。</li></ol><p><strong>要尽量避免再平衡</strong></p><p>因为再平衡的过程中，消费者无法从 Kafka 消费消息，这对 Kafka 的性能影响极大，而如果 Kafka 集群内节点较多，比如数百个，那再平衡可能会耗时极多。</p><p>消费者故障是引起再平衡最常见的方式。</p><p>除去正常的消费者挂掉（网络问题），在实际中，会存在 Kafka 错误地认为一个正常的消费者已经挂掉的情况，应尽量避免这样的情况出现。</p><blockquote><p>在分布式系统中，通常通过心跳来维持分布式系统，但由于会存在负载和网络的阻塞，所以一般需要控制心跳的超时时间，在 Kafka 内通过参数 <code>session.timout.ms</code> 来控制这个超时时间。</p><p>同时，参数 <code>heartbeat.interval.ms</code> 可控制发送心跳的频率，频率越高越不容易被误判，但也会消耗更多资源。</p><p>除此之外，参数 <code>max.poll.interval.ms</code> 也可以用来控制。消费者每次拉取数据后，都需要一些时间来处理，再进行下一次拉取，两次拉取的时间间隔如果超过这个参数的设置，那么消费者就会被踢出消费者组。</p><ul><li>session.timout.ms -&gt; 控制心跳超时时间，一般配置为 6s</li><li>heartbeat.interval.ms -&gt; 控制心跳发送频率，一般配置为 2s</li><li>max.poll.interval.ms -&gt; 控制消费者两个拉取数据的时间间隔，一般配置为消费者处理最长耗时 + 60s</li></ul></blockquote><h3 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a>消费者配置</h3><blockquote><p><a href="https://kafka.apachecn.org/documentation.html#newconsumerconfigs" target="_blank" rel="noopener">https://kafka.apachecn.org/documentation.html#newconsumerconfigs</a></p></blockquote><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>Kafka 集群包含若干个 Broker，broker.id 指定 Broker 的编号，编号不能重复；Kafka 集群上创建的主题，又包含若干个分区，每个分区又包含若干个副本，副本又包括 Leader 副本和 Follower 副本。</p><p><img src="/2022/10/03/kafka-zong-jie/replica.png" alt></p><p>Kafka 分区选举的过程如下：</p><ol><li>Kafka 使用 Zookeeper 的分布式锁选举控制器，并在节点加入集群或者退出集群时通知控制器。</li><li>控制器负责在节点加入或者离开时进行分区 Leader 选举。</li><li>控制器使用版本号来避免脑裂。（脑裂：两个节点同时认为自己是当前控制器）</li></ol><h3 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h3><ol><li>创建主题的时候可以指定副本数（replication-factor 配置），但副本数不能超过 broker 的数量。</li><li>生产者负责把消息发送给 Leader，Leader 负责读写，Follower 定期到 Leader 上 pull 数据。</li><li>Leader 会维护当前活跃副本列表（ISR），如果一个 Follower 落后太多，Leader 会将它从 ISR 中移除。（落后的意思是：Follower 长时间没有向 Leader 发送心跳（时间有 replica.lag.time.max.ms 配置，默认10000ms））</li></ol><h2 id="日志存储"><a href="#日志存储" class="headerlink" title="日志存储"></a>日志存储</h2><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>Kafka 的消息根据主题进行归类，每个主题又可分为一个或多个分区，每个分区各自存在一个消费数据的日志文件。</p><p><img src="/2022/10/03/kafka-zong-jie/logs.png" alt></p><p>在各个分区文件中，会存在多种类型的文件，如下图：</p><p><img src="/2022/10/03/kafka-zong-jie/logs_01.png" alt></p><p>其中重点关注以下三种类型的文件：</p><ol><li>.index 偏移量索引文件，用于记录消息偏移量与物理地址之间的映射关系。</li><li>.timestamp 时间戳索引文件，根据时间戳查找对应的偏移量。</li><li>.log 日志文件</li></ol><p>每一个主题每个分区下的日志文件，都带有一个基准偏移量，表示当前第一条消息的 offset。（偏移量是一个 64 位的长整形数，固定是20位数字，长度未达到，用 0 进行填补，索引文件和日志文件都由该作为文件名命名规则，如 日志文件名为 00000000000000000121.log，则当前日志文件的一条数据偏移量就是121（偏移量从 0 开始）。）</p><p><img src="/2022/10/03/kafka-zong-jie/logs_02.png" alt></p><ul><li>日志文件切分的条件</li></ul><p>（满足以下一个条件就会切分）</p><ol><li>日志分段文件大小超过 broker 端参数 log.segment.bytes 配置的值。（log.segment.bytes 参数的默认值为1G。）</li><li>日志分段中消息最大时间戳与当前系统的时间戳的差值大于 log.roll.ms 或 log.roll.hours 参数配置的值。（如果同时配置了 log.roll.ms 和 log.roll.hours 参数，那么 log.roll.ms 的优先级高。默认情况下，只配置了 log.roll.hours 参数，其值为 7 天）</li><li>偏移量索引文件或时间戳索引文件的大小达到 broker 端参数 log.index.size.max.bytes配置的值。（log.index.size.max.bytes 的默认值为 10MB。）</li><li>追加消息的偏移量与当前日志分段的偏移量之间的差值大于 Integer.MAX_VALUE ，即要追加的消息的偏移量不能转变为相对偏移量。</li></ol><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><h3 id="Kafka-到底会不会丢数据"><a href="#Kafka-到底会不会丢数据" class="headerlink" title="Kafka 到底会不会丢数据"></a>Kafka 到底会不会丢数据</h3><p>Kafka 只对已提交的消息做最大限度的持久化保证不丢失。</p><blockquote><ul><li>已提交</li></ul><p>当 Kafka 中的 Broker 成功收到一条消息并写入到日志文件后，那么这个消息在 Kafka 中就变成已经提交。（这个可以选择只要一个 Broker 成功还是所有 Broker 都成功消息才算已经提交）</p><ul><li>最大限度的持久化保证不丢失</li></ul><p>Kafka 并不能保证在任何情况下都能做到数据不丢失，不丢失数据是有前提条件的，例如消息保存在多个 Broker 上，那么这些 Broker 至少要保证有一个是存活的。</p></blockquote><h4 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h4><ul><li>消息根本就没发送到 Broker 上<ol><li>网络问题：由于网络抖动导致数据根本就没发送到 Broker 端。</li><li>数据原因：消息体太大超出 Broker 的承受范围导致 Broker 拒收消息。</li></ol></li></ul><blockquote><p>另外可以通过配置发送端的参数 acks 来确认消息是否生产成功。</p><ol><li>acks = 0：数据发送后就自认为发送成功，这时如果发生网络抖动， Producer 端并不会校验数据自然也就丢了，且无法重试。</li></ol><ol start="2"><li>acks = 1：消息发送给 Leader 接收成功就表示发送成功，这时只要 Leader 没有挂掉，就可以保证 Leader 不丢数据，但是如果 Leader 异常挂掉了， Follower 还未同步完数据，这时就会丢数据。</li></ol><ol start="3"><li>acks = -1 或者 all： 消息发送需要等待同步列表 （ISR） 中 Leader 和 所有的 Follower 都确认收到消息才算发送成功, 可靠性最高, 但也不能保证不丢数据，比如当同步列表 （ISR） 中只剩下 Leader 了, 这样就变成 acks = 1 的情况了。</li></ol></blockquote><p><strong>解决方案</strong></p><ol><li>使用带回调通知函数的方法进行发送消息，即这样一旦发现发送失败， 就可以做针对性处理。</li><li>设置 acks = -1/ all。</li><li>设置消息发送的重试次数（retries，2.4 版本默认为 Integer.MAX_VALUE）。</li><li>设置消息发送的重试时间（retry.backoff.ms 默认为 100ms）</li></ol><h4 id="Broker-端"><a href="#Broker-端" class="headerlink" title="Broker 端"></a>Broker 端</h4><p>Broker 接收到数据后会将数据进行持久化存储到磁盘，为了提高吞吐量和性能，采用的是异步批量刷盘的策略，也就是按照一定消息和间隔时间进行刷盘。</p><p>首先将数据存储到 PageCache 中，至于什么时候将 Cache 中的数据刷盘是由操作系统根据自己的策略决定或者调用 fsync 命令进行强制刷盘，如果此时 Broker 挂掉，且选举一个落后 Leader 很多的 Follower 成为新的 Leader ，那么落后的消息数据就会丢失。</p><p><strong>解决方案</strong></p><ol><li>设置 unclean.leader.election.enable = false。这个参数表示有哪些 Follower 可以有资格被选举为 Leader，如果一个 Follower 的数据落后 Leader 太多，那么一旦它被选举为新的 Leader， 数据就会丢失，我们将其设置为 false，防止此类情况发生。</li><li>设置 replication.factor &gt;= 3，设置分区副本个数，设置大于3，保证如果有 Leader 异常，Follower 会被选举为新的 Leader。</li><li>设置 min.insync.replicas &gt; 1，该参数表示消息至少要被写入成功到同步列表（ISR） 多少个副本才算已提交，设置大于1，这样才可以提升消息持久性，保证数据不丢失。</li><li>另外确保分区副本的设置要大于最小同步列表的设置（replication.factor &gt; min.insync.replicas），如果相等，只要有一个副本异常挂掉，整个分区就无法工作了。</li></ol><h4 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h4><ol><li>拉取消息后先提交 Offset ，后处理消息。</li></ol><p>如果此时处理消息的时候宕机，由于 Offset 已经提交，待消费者重启之后，会从已经提交的 Offset 下一个位置重新开始消费，之前未处理完成的消息不会再被处理，此时数据丢失。</p><ol start="2"><li>拉取消息后先处理消息，在进行提交 Offset。</li></ol><p>如果此时在提交之前发生异常宕机，由于没有提交成功 Offset， 待下次重启消费者后还会从上次的 Offset 重新拉取消息，不会出现消息丢失的情况， 但是会出现重复消费的情况，这里只能业务自己保证幂等性。</p><p><strong>解决方案</strong></p><ol><li>设置 enable.auto.commit = false, 采用手动提交位移的方式。</li><li>拉取消息后先处理消息，在进行提交 Offset。</li><li>业务自己保证幂等性，确保只成功消费一次即可。</li></ol><h3 id="Kafka-添加认证"><a href="#Kafka-添加认证" class="headerlink" title="Kafka 添加认证"></a>Kafka 添加认证</h3><p>版本: kafka_2.13-2.7.2.jar</p><h4 id="kafka-config"><a href="#kafka-config" class="headerlink" title="/kafka/config"></a>/kafka/config</h4><ul><li>修改 server.properties</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置监听</span><span class="token attr-name">listeners</span><span class="token punctuation">=</span><span class="token attr-value">SASL_PLAINTEXT://172.16.0.201:9092</span><span class="token attr-name">advertised.listeners</span><span class="token punctuation">=</span><span class="token attr-value">SASL_PLAINTEXT://172.16.0.201:9092</span><span class="token comment" spellcheck="true"># 使用认证协议</span><span class="token attr-name">security.inter.broker.protocol</span><span class="token punctuation">=</span><span class="token attr-value">SASL_PLAINTEXT </span><span class="token comment" spellcheck="true"># SASL机制 </span><span class="token attr-name">sasl.enabled.mechanisms</span><span class="token punctuation">=</span><span class="token attr-value">PLAIN </span><span class="token attr-name">sasl.mechanism.inter.broker.protocol</span><span class="token punctuation">=</span><span class="token attr-value">PLAIN </span><span class="token comment" spellcheck="true"># 完成身份验证的类 </span><span class="token attr-name">authorizer.class.name</span><span class="token punctuation">=</span><span class="token attr-value">kafka.security.auth.SimpleAclAuthorizer </span><span class="token comment" spellcheck="true"># 如果没有找到ACL（访问控制列表）配置，则允许任何操作。 </span><span class="token attr-name">allow.everyone.if.no.acl.found</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 配置超级用户, 作用在集群之前的通信</span><span class="token attr-name">super.users</span><span class="token punctuation">=</span><span class="token attr-value">User:admin</span></code></pre><ul><li>修改 zookeeper.properties</li></ul><pre class=" language-sh"><code class="language-sh"># 开启认证authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider# 认证规则requireClientAuthScheme=sasl# 延长登录时间jaasLoginRenew=3600000</code></pre><ul><li>新增 kafka_server_jaas.conf 配置文件<ol><li>username 和 password 用于集群服务器之间的通信</li><li>定义 data 用户，密码为 123456 用于 KafKa 服务之间的通信</li></ol></li></ul><pre class=" language-sh"><code class="language-sh">KafkaServer {    org.apache.kafka.common.security.plain.PlainLoginModule required    username="admin"    password="admin"    user_admin="admin"    user_data="123456";};</code></pre><ul><li>新增 kafka_client_jaas.conf 配置文件<ol><li>这里的 username 和 password 对应的是配置文件 kafka_server_jaas.conf 自定义的用于 KafKa 服务之前的通信的用户名和密码</li></ol></li></ul><pre class=" language-sh"><code class="language-sh">KafkaClient {    org.apache.kafka.common.security.plain.PlainLoginModule required    username="data"    password="123456";};</code></pre><ul><li>新增 zookeeper_jaas.conf 配置文件<ol><li>username 和 password 用于集群服务器之间的通信</li></ol></li></ul><pre class=" language-sh"><code class="language-sh">Server {    org.apache.kafka.common.security.plain.PlainLoginModule required    username="admin"    password="admin"    user_data="123456";};</code></pre><h4 id="kafka-bin"><a href="#kafka-bin" class="headerlink" title="/kafka/bin"></a>/kafka/bin</h4><ul><li>修改 kafka-server-start.sh<ol><li>在 exec base_dir/kafka-run-class.sh EXTRA_ARGS kafka.Kafka “$@” 之前添加如下代码</li></ol></li></ul><pre class=" language-sh"><code class="language-sh">if [ "x$KAFKA_OPTS" ]; thenexport KAFKA_OPTS="-Djava.security.auth.login.config=/usr/local/kafka/config/kafka_server_jaas.conf"fi</code></pre><ul><li>修改 kafka-console-producer.sh<ol><li>在 exec (dirname 0)/kafka-run-class.sh kafka.tools.ConsoleProducer “$@” 文件之前添加如下代码</li></ol></li></ul><pre class=" language-sh"><code class="language-sh">if [ "x$KAFKA_OPTS" ]; thenexport KAFKA_OPTS="-Djava.security.auth.login.config=/usr/local/kafka/config/kafka_client_jaas.conf"fi</code></pre><ul><li>修改 kafka-console-consumer.sh<ol><li>在exec base_dir/kafka-run-class.sh EXTRA_ARGS org.apache.zookeeper.server.quorum.QuorumPeerMain “$@” 文件之前添加如下代码</li></ol></li></ul><pre class=" language-sh"><code class="language-sh">if [ "x$KAFKA_OPTS" ]; thenexport KAFKA_OPTS="-Djava.security.auth.login.config=/usr/local/kafka/config/kafka_client_jaas.conf"fi</code></pre><ul><li>修改 zookeeper-server-start.sh<ol><li>在 base_dir/kafka-run-class.sh EXTRA_ARGS org.apache.zookeeper.server.quorum.QuorumPeerMain “$@” 文件之前添加如下代码</li></ol></li></ul><pre class=" language-sh"><code class="language-sh">if [ "x$KAFKA_OPTS" ]; thenexport KAFKA_OPTS="-Djava.security.auth.login.config=/usr/local/kafka/config/zookeeper_jaas.conf"fi</code></pre><h4 id="SpringBoot-添加对应的配置"><a href="#SpringBoot-添加对应的配置" class="headerlink" title="SpringBoot 添加对应的配置"></a>SpringBoot 添加对应的配置</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">properties</span><span class="token punctuation">:</span><span class="token attr-name">    security</span><span class="token punctuation">:</span><span class="token attr-name">        protocol</span><span class="token punctuation">:</span> <span class="token attr-value">SASL_PLAINTEXT</span><span class="token attr-name">    sasl</span><span class="token punctuation">:</span><span class="token attr-name">        mechanism</span><span class="token punctuation">:</span> <span class="token attr-value">PLAIN</span><span class="token attr-name">        jaas</span><span class="token punctuation">:</span><span class="token attr-name">        config</span><span class="token punctuation">:</span> <span class="token attr-value">org.apache.kafka.common.security.plain.PlainLoginModule required username="data" password="123456";</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL_高级</title>
      <link href="/2022/10/03/mysql-gao-ji/"/>
      <url>/2022/10/03/mysql-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="高性能-MySQL"><a href="#高性能-MySQL" class="headerlink" title="高性能 MySQL"></a>高性能 MySQL</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><ul><li>不支持事务</li><li>不支持外键</li><li>表损坏之后不能恢复数据</li></ul><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><ul><li>支持外键</li><li>支持事务</li><li>数据损坏后一般能恢复（事务特性）</li></ul><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><ul><li>不支持外键</li><li>不支持事务</li><li>服务重启会导致数据丢失</li></ul><h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><ul><li>一组 MyISAM 组合组成的</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务：事务是一种机制，一种操作序列，把所有的命令作为一个整体，统一提交或者撤销的这样一个过程请求。</p><h4 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h4><ol><li>原子性：事务的操作，要么都发生，要么都不发生。通过 undo log 实现。</li><li>一致性：事务开始前和事务结束后，数据库的整体约束性没被破坏。通过其他三种特性来实现。</li><li>隔离性：不同事务操作数据库的时候，彼此独立，不能相互影响。通过读写锁和多版本并非控制实现。</li><li>持久性：事务的操作完成之后，对数据的修改应该是永久的，不管系统是否发生故障都不会有影响。通过 redo log 实现。</li></ol><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><ol><li><p>读取未提交。事务中发生了修改，即使没有提交，其它事务也是可见的。—— &gt; 会引起脏读。</p><p>例如：A 原来的值是 50。修改成了 100。但还没提交，另外一个事务 B 看到了这个修改，但此刻 A 发生了回滚还是 50 。但 B 却读到了 100。</p></li><li><p>读提交。对于一个事务从开始直到提交之前，所做的任务修改其它事务都不可见。—— &gt; 会引起不可重复读。</p><p>例如：A 原来是 50。提交修改 100 。另外一个事务 B 在这之前读取到 A 是 50。刚读完 A 就被修改成了 100。这个时候另外一个事务 C 在读 A 就是 100了。</p></li><li><p>可重读。（MySql 默认隔离级别）不管事务有没有提交，每次读取的结果集都相同。—— &gt; 会引起幻读。</p></li><li><p>序列化。隔离级别最严格，代价最高。但能避免脏读，不可重复读，幻读。</p></li></ol><p><strong>什么是幻读</strong></p><p>事务 A 按照一定条件查询数据，期间事务 B 按照相同的条件插入新的数据，事务 A 再次查询的时候，发现了事务 B 新插入的数据。</p><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>两个或者多个事务在同一资源上相互占用，并请求锁定对方占用的资源，而导致的恶性循环现象。</p><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>总是假设情况都是最好的，在使用的时候不会上锁，但更新操作的时候回去做判断，判断是否有其它线程更新了这个数据，适用于读取较多的情况，底层使用：版本号和 CAS 算法实现。</p><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>总是假设情况都是最坏的，在使用的时候每次处理数据都会上锁，只是把资源给一个线程使用，其它线程阻塞，用完后把资源转给其它线程。一般适应于写数据较多的情况。</p><ul><li><strong>版本号机制</strong></li></ul><p>在数据库表中加一个数据版本号 version 字段，表示被修改的次数。当数据被修改时 version 的值会加一。线程更新数据时，会读取这个字段的值并修改。提交更新时，若当前的 version 的值大于数据库当前版本，则更新操作。</p><h5 id="锁的常见形似"><a href="#锁的常见形似" class="headerlink" title="锁的常见形似"></a>锁的常见形似</h5><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">update</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">set</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre><p>select 语句不会加锁，但 select … for update 会加锁，且是悲观锁，如果查询条件使用到了主键索引，那么就是行锁，如果没有，那就是表锁。</p><h4 id="事务实现"><a href="#事务实现" class="headerlink" title="事务实现"></a>事务实现</h4><p>MySQL 在事务特性的实现上，主要使用了 <strong>日志文件，读写锁，多版本并发控制</strong> 这三项技术。</p><h5 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h5><p>和事务相关的日志文件总共有两类，分别是：<strong>redo log 和 undo log</strong></p><ul><li>redo log</li></ul><p>redo log 有两部分组成，分别是：redo log buffer 和 redo log。redo log buffer 在内存之中，redo log 在磁盘之中，在事务的操作过程之中，会将数据线写入到 redo log buffer，事务提交之后，会立即采取异步的方式将redo log buffer 中的数据写入 redo log 在磁盘中保存。</p><p>MySQL 这样设计的目的是为了提升对应的性能，写内存比写磁盘效率要高很多。</p><p><strong>如果这个时候数据库服务器宕机了，数据会不会丢失？</strong></p><p>这个情况分为两种：</p><p><strong>第一种：redo log buffer 数据刷入 redo log 后宕机</strong></p><p>针对这一中情况，数据并不会丢失，因为此时数据已经保存到了磁盘中，重启对应服务即可。</p><p><strong>第二种：redo log buffer 数据刷入 redo log 时宕机</strong></p><p>redo log buffer 数据刷入 redo log 和事务的提交是异步的操作，如果在 redo log buffer 数据刷入 redo log 时宕机，那么就意味着事务还未提交，此时的数据丢失，是可以接受的。</p><ul><li>undo log</li></ul><p>undo log 记录的是数据被修改前的数据，事务的每次写入和修改之前，都会将原始数据备份到 undo log 中，当事务发生回滚的时候，会通过 undo log 找到之前的数据。</p><blockquote><ul><li>bin log</li></ul><p>归档日志，以二进制形式存储在磁盘中，记录所有的数据库表的创建，修改，删除（不包括查询）操作。默认情况下是关闭的，永久存储。主要的作用是主从同步以及基于时间点的数据还原。</p><ul><li>relay log </li></ul><p>中继日志，主要是主从复制时起到一个中转作用。</p><ul><li>show query log</li></ul><p>慢查询日志，用于记录在 MySQL 执行过程中超过指定时间的查询语句，默认情况下是关闭的，默认时间是 10s。</p><ul><li>general query log</li></ul><p>一般查询日志，用来记录用户的所有操作，默认是关闭状态。</p><ul><li>error log</li></ul><p>错误日志，记录 MySQL 服务启动，运行，停止以及诊断和出错的信息，默认是开启状态。</p></blockquote><h5 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h5><ul><li>共享锁</li></ul><p>共享锁又叫读锁，多个请求会共享一把锁读数据。</p><ul><li>排他锁</li></ul><p>排他锁又叫写锁，写锁会排斥其他所有获取锁的请求，一旦阻塞，需要写入完成释放锁。</p><h5 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h5><ul><li>当前读</li></ul><p>像 select for update，update，insert，delete  这些操作都是当前读。它读取的是记录的最新版本，读取的时候还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p><ul><li>快照读</li></ul><p>像 select 就是快照读，即不加锁的非阻塞读。（快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。）快照读的实现是基于多版本并发控制。</p><p>MVCC 多版本并发控制指的是：维持一个数据的多个版本，使得读写操作没有冲突。这么一个概念，仅仅是一个理想概念。而快照读可以看着是这个概念的一个实现。相对而言，当前读就是悲观锁的具体实现。</p><p>MVCC 带来的好处：在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能 同时还可以解决脏读，幻读，不可重复读等事务隔离问题。</p><p>MVCC 模型的具体实现其实是有：<strong>四个隐式字段，undo 日志，读视图</strong></p><ul><li><p>隐式字段</p><ol><li>DB_ROW_ID 隐含的自增 ID（隐藏主键），如果数据表没有主键，InnoDB 会自动以DB_ROW_ID 产生一个聚簇索引。</li><li>DB_TRX_ID 最近修改(修改/插入)事务 ID，记录创建这条记录/最后一次修改该记录的事务ID。</li><li>DB_ROLL_PTR 回滚指针，指向这条记录的上一个版本（存储于 Rollback Segment 里）。</li><li>DELETED_BIT 记录被更新或删除并不代表真的删除，而是删除 Flag 变了。</li></ol></li><li><p>undo log</p></li></ul><ol><li><p>Insert undo log ：插入一条记录时，至少要把这条记录的主键值记下来，之后回滚的时候只需要把这个主键值对应的记录删掉就好了。</p></li><li><p>Update undo log：修改一条记录时，至少要把修改这条记录前的旧值都记录下来，这样之后回滚时再把这条记录更新为旧值就好了。</p></li><li><p>Delete undo log：删除一条记录时，至少要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录插入到表中就好了。</p><blockquote><p>删除操作都只是设置一下老记录的 DELETED_BIT，并不真正将过时的记录删除。</p><p>为了节省磁盘空间，InnoDB 有专门的 Purge 线程来清理 DELETED_BIT 为 True 的记录。为了不影响 MVCC 的正常工作，Purge 线程自己也维护了一个 Read View（这个 Read View 相当于系统中最老活跃事务的 Read View）；如果某个记录的 DELETED_BIT 为 True，并且DB_TRX_ID 相对于 Purge 线程的 Read Vew 可见，那么这条记录一定是可以被安全清除的。</p></blockquote></li></ol><p>对 MVCC 有帮助的实质上是 Update undo log。</p><blockquote><p><strong>undo log 的执行流程</strong></p><ol><li>当前数据库里有一条数据，name 为 Jerry，age 为 24岁，隐式主键是1，事务 ID 和回滚指针假设为 NULL；</li></ol><p><img src="/2022/10/03/mysql-gao-ji/image-20220726201402658.png" alt="image-20220726201402658"></p><ol start="2"><li><p>现在来了一个事务对该记录进行修改，修改 name 为 Tom。</p><ol><li>在事务修改数据的时候，数据库会对该行加排他锁。</li><li>然后把该行数据拷贝到 undo log 中，作为旧记录。</li><li>拷贝完毕后，修改 name 为 Tom，并修改隐藏字段的事务 ID 为当前事务的 ID，我们假设从 1 开始，之后递增，回滚指针指向拷贝到 undo log 的信息记录。</li><li>事务提交后，释放锁。</li></ol><p><img src="/2022/10/03/mysql-gao-ji/image-20220726201850769.png" alt="image-20220726201850769"></p></li><li><p>又来了一个事务，修改该记录信息，修改 age 为 30岁。</p><ol><li>在事务修改数据的时候，数据库会对该行加排他锁。</li><li>然后把该行数据拷贝到 undo log 中，作为旧记录，发现该行记录已经有 undo log了，那么最新的旧数据作为链表的表头，插在该行记录的 undo log 最前面。</li><li>修改该行 age 为 30岁，并且修改隐藏字段的事务 ID 为当前事务的 ID, 也就是 2，回滚指针指向刚刚拷贝到 undo log 的信息记录。</li><li>事务提交，释放锁</li></ol><p><img src="/2022/10/03/mysql-gao-ji/image-20220726202153541.png" alt="image-20220726202153541"></p></li></ol></blockquote><ul><li>读视图</li></ul><p>在数据库的事务进行快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的 ID。这个过程，会对该记录创建一个读视图。把它比作条件用来判断当前事务能够看到哪个版本的数据，既可能是当前最新的数据，也有可能是该行记录的undo log里面的某个版本的数据。</p><p>读视图遵循一个可见性算法，主要是将要被修改的数据的最新记录中的 DB_TRX_ID（即当前事务ID）取出来，与系统当前其他活跃事务的 ID 去对比（由读视图维护），如果 DB_TRX_ID 跟读视图的属性做了某些比较，不符合可见性，那就通过 DB_ROLL_PTR 回滚指针去取出 undo log 中的DB_TRX_ID 再比较，即遍历链表的 DB_TRX_ID（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的 DB_TRX_ID, 那么这个 DB_TRX_ID 所在的旧记录就是当前事务能看见的最新老版本。</p><h3 id="服务器性能"><a href="#服务器性能" class="headerlink" title="服务器性能"></a>服务器性能</h3><h4 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h4><p>对应服务器的性能分析，应该首先分析的是对应的应用程序造成的性能影响。</p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h5 id="Show-Profile"><a href="#Show-Profile" class="headerlink" title="Show Profile"></a>Show Profile</h5><p>用来分析当前会话中 SQL 语句执行资源的消耗情况，默认情况下是关闭的，使用的时候需要开启，开启会消耗一定的性能。</p><ul><li>查看是否开启</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'profiling'</span><span class="token punctuation">;</span></code></pre><ul><li>开启</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span> </code></pre><ul><li>查看执行结果</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> profiles<span class="token punctuation">;</span></code></pre><ul><li>查看资源消耗情况</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> profile cpu<span class="token punctuation">,</span>block io <span class="token keyword">for</span> query Query_ID<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- cpu 显示 CPU 信息</span><span class="token comment" spellcheck="true">-- block io 块IO 开销</span><span class="token comment" spellcheck="true">-- all 显示所有 </span><span class="token comment" spellcheck="true">-- Query_ID 'show profiles;' 查询的结果</span></code></pre><h5 id="Show-Status"><a href="#Show-Status" class="headerlink" title="Show Status"></a>Show Status</h5><p>查看 MySQL 服务器的状态</p><ul><li>显示数据库的链接数</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'connections'</span><span class="token punctuation">;</span></code></pre><ul><li>显示慢查询的次数</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'show_queries'</span><span class="token punctuation">;</span></code></pre><ul><li>查看 select 语句执行的次数(其它操作同理)</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'com_select'</span><span class="token punctuation">;</span></code></pre><h5 id="Show-Processlist"><a href="#Show-Processlist" class="headerlink" title="Show Processlist"></a>Show Processlist</h5><p>显示哪些线程正在运行，默认只列出100行，如果显示全部，可以使用：‘show full processlist’;</p><h3 id="MySQL-的设计"><a href="#MySQL-的设计" class="headerlink" title="MySQL 的设计"></a>MySQL 的设计</h3><h4 id="合适的数据类型"><a href="#合适的数据类型" class="headerlink" title="合适的数据类型"></a>合适的数据类型</h4><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><ul><li>TINYINT  8 位存储空间</li><li>SMALLINT 16 位存储空间</li><li>MEDIUMINT 24 位存储空间</li><li>INT 32 位存储空间</li><li>BIGINT 64 位存储空间</li></ul><p><strong>INT(22) 中的数字只规定了交互工具中显示的字符个数，对存储和计算来说没有实际意义。</strong></p><h5 id="实数类型"><a href="#实数类型" class="headerlink" title="实数类型"></a>实数类型</h5><ul><li>FLOAT 单精度，4字节存储</li><li>DOUBLE 双精度，8字节存储</li><li>DECIMAL  高精度，<em>CPU 不支持这种类型的计算</em></li></ul><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><ul><li>CHAR 定长存储</li><li>VARCHAR 变长存储</li></ul><p>一般情况下使用 VARCHAR 存储字符串，因为 VARCHAR 更能节省空间，但在 UPDATE 的时候，如果当前行变的比原来的更长，那么就需要额外的操作来完成。如果当前页面没有更多的存储空间来储存，MyISAM会将行拆成不同的片段存储；InnoDB则需要分裂页来使行可以放进页内。</p><p><strong>VARCHAR(5)和VARCHAR(200)存储”HELLO”的空间开销是一样的，但使用更短的VARCHAR(5)更有优势。</strong></p><p>因为更长的列会消耗更多的存储空间，而 MySQL 一般是分配固定大小的内存块来保存内部值。</p><h5 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h5><ul><li>DATETIME 存储区间为：1001 年到 9999 年，精度为秒，8 字节存储空间。与时区无关。</li><li>TIMESTAMP 存储区间为：1970 年到 2038 年，4字节存储空间，与时区有关。</li></ul><h5 id="位数据信息"><a href="#位数据信息" class="headerlink" title="位数据信息"></a>位数据信息</h5><ul><li>BIT 存储位置使用，范围 1 到 64。</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h5 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h5><ul><li>B+ 树</li></ul><p>B+ 树是基于 B 树和叶子节点顺序访问指针进行实现，它具有 B 树的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p><p>在 B+ 树，一个节点中的 key 从左到右非递减排列，进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p><p>插入删除操作记录会破坏平衡树的平衡性，因此在插入删除操作之后，需要对树进行一个分裂、合并、旋转等操作来维护平衡性。</p><ul><li>哈希</li></ul><p>哈希索引能以O(1)时间进行查找，但会有如下限制：</p><ol><li>无法用于排序和分组</li><li>只支持精确查找，无法用于部分查找和范围查找</li></ol><p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><h5 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h5><ol><li>索引大大减少了服务器需要扫描的数据量。</li><li>索引可以帮助服务器避免排序和临时表。</li><li>索引可以将随机 IO 变成顺序 IO。</li></ol><h5 id="索引策略"><a href="#索引策略" class="headerlink" title="索引策略"></a>索引策略</h5><ol><li>数据量小的表不需要建立索引，建立索引会增加额外的索引开销。</li><li>索引并不是越多越好，更多的索引意味着更多的维护成本和占用空间。</li><li>尽量考虑覆盖索引。</li><li>多个索引遵循最左前缀匹配。</li><li>不对索引字段进行逻辑操作。</li><li>尽量全值匹配。</li><li>like 查询，左侧尽量不要加 %。</li><li>注意 null/not null 可能对索引有影响。</li><li>尽量减少使用不等于。</li><li>字符类型务必加上引号。</li><li>OR 关键字左右尽量都为索引列。</li></ol><ul><li><strong>索引失效的条件</strong></li></ul><p>查看索引失效的语句：explain 执行该语句 key=null 。</p><ol><li>查询条件包含 or。</li><li>like 以 % 开头。</li><li>组合索引，但不使用第一列索引。</li><li>列类型是字符串，查询条件一定要用括号括起来，否则索引失效。</li><li>where 查询条件里使用了不等号。</li><li>where 查询条件里使用了函数。</li></ol><ul><li><strong>最左匹配原则</strong></li></ul><p>mysql会一直向右匹配直到遇到范围查询（&gt;、&lt;、between、like）就停止匹配了。</p><ol><li>建立 a,b,c,d 的索引，a=3 and b=4 and c&gt;5 and d=6 。（d 就用不到索引）但是如果 a=3 and b=4 and d=6 and c&gt;5 。则 a,b,c,d 都会用到索引。 </li><li>建立 a,b,c,d 的索引，c&gt;5 and b=4 and d=6 and a=3 也会全部用到 a,b,c,d 索引 。（查询优化器会重新编排）</li><li>建立 a,b,c 索引 那么只要查询条件有 a 即可用到 a,b,c 索引（如 a,b,c a,b a,c a）， 没有 a 就用不到。</li><li>索引 a 的字段类型是 int 。查询的时候 where a = ‘123’。会使用到索引。</li><li>索引 a 的字段类型是 varchar 。查询的时候 where a = 123。不会使用到索引。</li></ol><ul><li><strong>回表</strong></li></ul><p>回表，简单地说就是 MySQL 内部需要经过两次查询。</p><p>第一次先索引扫描，然后在通过主键去取索引中未能提供的数据。</p><ul><li><strong>簇集索引</strong> </li></ul><p>一般为 MySQL 的主键对应的索引，且只能有一个，存储的记录在物理上是连续的，主键索引树的叶子节点存储的是整行数据。</p><ul><li><strong>非簇集索引</strong></li></ul><p>非簇集索引也就是一般索引，存储的记录在物理上是非连续的，非主键索引的叶子节点存储的是主键的值。</p><p><strong>为什么重复率高的数据不适合建立索引？</strong></p><p>因为非簇集索引存储的是对主键的引用，如果非簇集索引的重复率比较高，那么每次查询的时候，都会先从索引中取一半的值，然后再根据主键去查询数据，这就明显增加了 IO 的操作次数，使得查询效率变慢。</p><p>（索引的叶子节点结构是 key value，key 是索引项，value 存放具体值，主键索引在 MySQL 中是簇集索引，key 是主键，value 是单条记录的所有值。但一张表为了避免数据太冗余，只能有一个簇集索引，所以非簇集索引的 value 值存放的是主键值，这样才能根据主键找到具体的数据。 ）</p><p><strong>如何判断是否出现了回表</strong></p><p>只有使用了索引，且 Extra 是 Using where 的情况下，才代表回表查询。</p><p><strong>如何解决回表</strong></p><p>覆盖索引（如果一个索引包含所需要查询的字段的值，我们就称之为覆盖索引）</p><p>一个查询语句的执行只用从索引中取得，不必在从数据表中读取。</p><h3 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h3><p>查询的性能优化这一块涉及到的东西比较多，但实际的工作之中更多的精力是放在对相关查询的处理上，更底层的原理更多的是作为了解。</p><h4 id="导致查询较慢的原因"><a href="#导致查询较慢的原因" class="headerlink" title="导致查询较慢的原因"></a>导致查询较慢的原因</h4><ol><li>查询不需要的记录</li><li>多表关联时返回全部的数据</li><li>总是取出全部列</li><li>重复查询相同的数据</li><li>使用不合理的索引</li></ol><h4 id="使用到-Where-条件的三种方式"><a href="#使用到-Where-条件的三种方式" class="headerlink" title="使用到 Where 条件的三种方式"></a>使用到 Where 条件的三种方式</h4><ol><li>在索引中使用 Where 条件过滤不匹配的记录</li><li>使用索引覆盖扫描来返回记录，直接从索引中过滤不需要的记录并返回命中的结果</li><li>从数据表中返回数据，然后过滤不满足条件的记录</li></ol><h4 id="复杂查询的优化"><a href="#复杂查询的优化" class="headerlink" title="复杂查询的优化"></a>复杂查询的优化</h4><ol><li>拆分复杂的查询</li><li>分解关联查询</li><li>优化 limit  查询</li></ol><blockquote><p>limit 查询优化的思路有两点：</p><ol><li>前端配合把每次查询对应的 ID 作为参数传给后端，后端在查询的时候根据这个 ID 作为条件过滤数据。</li><li>查询条件放到子查询之中，子查询只查主键 ID，然后使用子查询之中确定的主键关联查询对于的属性字段。</li></ol></blockquote><h4 id="查询的执行过程"><a href="#查询的执行过程" class="headerlink" title="查询的执行过程"></a>查询的执行过程</h4><ol><li>客户端发送一条查询给服务器</li><li>服务器先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果</li><li>服务端进行 SQL 解析，预处理，再由优化器生成对应的执行计划</li><li>根据优化器生成的执行计划，调用存储引擎的 API 来执行查询</li><li>将结果返回给客户端</li></ol><h4 id="查询优化器默认优化的类型"><a href="#查询优化器默认优化的类型" class="headerlink" title="查询优化器默认优化的类型"></a>查询优化器默认优化的类型</h4><ol><li>重新定义关联表的顺序</li><li>将外连接转化成内连接</li><li>使用等价变换规则</li><li>预估并转化为常数表达式</li><li>覆盖所有扫描</li><li>子查询优化</li><li>提前终止查询</li><li>等值传播</li><li>列表 IN() 的比较</li></ol><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><h5 id="分区表的类型"><a href="#分区表的类型" class="headerlink" title="分区表的类型"></a>分区表的类型</h5><ol><li>RANGE 分区：基于属于一个给定连续区间的列值，把多行分配给分区。</li><li>LIST 分区：类似于按 RANGE 分区，区别在于 LIST 分区是基于列值匹配一个离散值集合中的某个值来进行选择。</li><li>HASH 分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含 MySQL 中有效的、产生非负整数值的任何表达式。</li><li>KEY 分区：类似于按 HASH 分区，区别在于 KEY 分区只支持计算一列或多列，且 MySQL 服务器提供其自身的哈希函数。必须有一列或多列包含整数值。</li></ol><h5 id="分区表的原理"><a href="#分区表的原理" class="headerlink" title="分区表的原理"></a>分区表的原理</h5><ul><li>SELECT 查询</li></ul><p>当查询一个分区表的时候，分区层先打开并锁住所有底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据。</p><ul><li>INSERT 操作</li></ul><p>当写入一条记录时，分区层先打开并锁住所有底层表，然后确定哪个分区接收这条记录，再将记录写入对应底层表。</p><ul><li>DELETE 操作</li></ul><p>当删除一条记录时，分区层先打开并锁住所有底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作。</p><ul><li>UPDATE 操作</li></ul><p>当更新一条记录时，分区层先打开并锁住所有底层表，MySQL 先确定需要更新的记录在哪个分区，然后取出数据并更新，再判断更新后的数据应该放在哪个分区，最后对底层表进行写入操作，并对原数据所在的底层表进行删除操作。</p><h5 id="分区表的限制"><a href="#分区表的限制" class="headerlink" title="分区表的限制"></a>分区表的限制</h5><ol><li>一个表最多只能有1024个分区。</li><li>如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来。</li><li>分区表无法使用外键约束。</li><li>NULL值会使分区过滤无效。</li><li>所有分区必须使用相同的存储引擎。</li></ol><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><ul><li>定义</li></ul><p>视图是从一个或多个表中导出来的表，是一种虚拟存在的表。视图就像一个窗口，通过这个窗口可以看到系统专门提供的数据，这样用户可以不看整个数据库表中的数据，而只关心对自己有用的数据。</p><ul><li><p>语法</p><ul><li>单表创建视图</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> view_student <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><ul><li>多表创建视图</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> view_student_teacher <span class="token keyword">as</span> <span class="token keyword">select</span> class<span class="token punctuation">.</span>id <span class="token keyword">as</span> teacher_id<span class="token punctuation">,</span>teacher<span class="token punctuation">,</span>class<span class="token punctuation">,</span>student<span class="token punctuation">.</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name<span class="token punctuation">,</span>sex <span class="token keyword">from</span> class <span class="token keyword">left</span> <span class="token keyword">join</span> student <span class="token keyword">on</span> class<span class="token punctuation">.</span>id <span class="token operator">=</span> student<span class="token punctuation">.</span>class_id<span class="token punctuation">;</span></code></pre><ul><li>查看视图</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> view_student_teacher<span class="token punctuation">;</span></code></pre><ul><li>更新视图</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> view_student <span class="token keyword">set</span> name <span class="token operator">=</span><span class="token string">'小王'</span> <span class="token keyword">where</span> sex <span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">;</span></code></pre><ul><li>修改视图 (<strong>注意，当真实表中修改了某个存在视图中的字段时，这个视图也需要跟着变，否则会变成无效的视图</strong>)</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> view_student_teacher <span class="token keyword">as</span> <span class="token keyword">select</span> teacher<span class="token punctuation">,</span>class<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex <span class="token keyword">from</span> class <span class="token keyword">left</span> <span class="token keyword">join</span> student <span class="token keyword">on</span> class<span class="token punctuation">.</span>id<span class="token operator">=</span>student<span class="token punctuation">.</span>class_id<span class="token punctuation">;</span></code></pre><ul><li>删除视图</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">view</span> view_student_teacher<span class="token punctuation">;</span></code></pre></li></ul><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><ul><li>定义</li></ul><p>事先经过编译并存储在数据库中的一段 SQL 语句的集合，就是数据库 SQL 语言层面的代码封装与重用。</p><ul><li>语法</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $$<span class="token keyword">create</span>    <span class="token keyword">procedure</span> <span class="token string">'数据库名'</span><span class="token punctuation">.</span><span class="token string">'存储过程名'</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">IN</span> 变量名 类型<span class="token punctuation">,</span> <span class="token keyword">OUT</span> 变量名 类型<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">declare</span> 变量名 类型 <span class="token punctuation">[</span><span class="token keyword">default</span> 值<span class="token punctuation">]</span><span class="token punctuation">;</span>        存储过程的语句块<span class="token punctuation">;</span>    <span class="token keyword">end</span>$$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><ol><li>IN 类型的参数表示接受调用者传入的数据。</li><li>OUT 类型的参数表示向调用者返回数据。</li><li>INOUT 类型的参数即可以接受调用者传入的参数，也可以向调用者返回数据。</li></ol><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><ul><li>定义</li></ul><p>一种特殊的存储过程，在更改触发器所保护的数据时自动执行。</p><ul><li><p>语法</p><ul><li>只有一个执行语句的触发器</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> 触发器名 before<span class="token operator">|</span><span class="token keyword">after</span> 触发事件 <span class="token keyword">on</span> 表名 <span class="token keyword">for each row</span> 执行语句<span class="token punctuation">;</span></code></pre><ul><li>多个执行语句的触发器</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> 触发器名 before<span class="token operator">|</span><span class="token keyword">after</span> 触发事件 <span class="token keyword">on</span> 表名 <span class="token keyword">for each row</span> <span class="token keyword">begin</span>执行语句列表<span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p><em>举例</em>  (当 user 表添加一行数据，则会自动在 user_log 添加日志记录)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> trigger_test <span class="token keyword">after</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> <span class="token keyword">user</span> <span class="token keyword">for each row</span><span class="token keyword">insert</span> <span class="token keyword">into</span> user_logs <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><ul><li>定义</li></ul><p>全文索引是将存储在数据库中的整个信息中任意信息查找出来的一种技术实现方式。只所以有全文索引这样的一个概念，是因为在使用 like 模糊查询的时候，字段的索引会失效，在数据量比较大的情况下，查询效率会比较低下。</p><p>全文索引是通过倒排索引来实现的，而倒排索引实际是：在进行数据存储的时候，会先将对应的关键词和数据进行关联，保存到一张表内，然后在进行数据查询的时候，将查询的内容进行分词后在这张表内进行查询，然后匹配数据。</p><ul><li><p>语法</p><ul><li>创建全文索引</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> fulltext 索引名<span class="token punctuation">(</span>指定列<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 举例</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> fulltext idx_full_name<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>删除</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span class="token punctuation">;</span></code></pre><ul><li>使用全文索引 (全文索引的使用需要使用 match(指定全文索引列) against(‘对应的值’) )</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'卡卡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><h5 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h5><ul><li>分库</li></ul><p>按照系统之中的不同业务来进行拆分，例如把原有的系统库拆分成：用户库，订单库，积分库，商品库。</p><ul><li>分表</li></ul><p>将一些不常用的，数据较大或者长度较长的列拆分到一张表。</p><h5 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h5><ul><li>分库</li></ul><p>将表的数据量切分到不同的数据库服务器上，每个服务器具有相同的库和表，只是表中的数据集合不一样。</p><ul><li>分表</li></ul><p>一张表的数据量比较大，按照某种规则把数据切分到多张表去。</p><h5 id="分表策略"><a href="#分表策略" class="headerlink" title="分表策略"></a>分表策略</h5><ul><li>range 范围</li></ul><p>可以将表的主键按照 <code>0～100万</code> 切分为一张表，<code>100万 ～ 200万</code>切分成一张表。</p><p><em>优点：</em> 有利数据扩容，不需要迁移数据。</p><p><em>缺点：</em> 会存在数据热点问题。</p><ul><li>hash 取模</li></ul><p>指定的路由（一般是 Id）对分表总数进行取模，把数据分散到各个表内。</p><p><em>优点：</em> 不会存在数据热点问题。</p><p><em>缺点：</em> 如果后续数据需要扩容，对老数据的迁移会很麻烦。</p><ul><li>range + hash 取模</li></ul><p>先按照 range 来拆分，将来需要扩容的时候在采取 hash 取模的方式。</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>MySQL 的复制方式有两种，一种是基于行的复制，一种是基于语句的复制。两种方式都是通过在主库上记录二进制日志，在备库上重放日志的方式来实现异步数据的复制。这也就意味着在同一时间点备库上的数据可能与主库存在不一致，并且无法保证主备之间的延迟。</p><h4 id="复制解决的问题"><a href="#复制解决的问题" class="headerlink" title="复制解决的问题"></a>复制解决的问题</h4><ul><li>数据分布</li><li>负载均衡</li><li>高可用和故障切换</li></ul><h4 id="复制如何工作"><a href="#复制如何工作" class="headerlink" title="复制如何工作"></a>复制如何工作</h4><ol><li>在主库上把数据更改记录到二进制日志中</li><li>备库将主库的日志复制到自己的中继日志中</li><li>备库读取中继日志中的事件，将其重放到备库数据之上</li></ol><h4 id="复制的操作"><a href="#复制的操作" class="headerlink" title="复制的操作"></a>复制的操作</h4><ol><li>配置复制</li><li>创建复制账号</li><li>配置主库和备库</li><li>启动复制</li><li>开始复制</li></ol><h4 id="复制拓扑"><a href="#复制拓扑" class="headerlink" title="复制拓扑"></a>复制拓扑</h4><ul><li>一个 MySQL 备库实例只能有一个主库</li><li>每个备库必须有一个唯一的服务器 ID</li><li>一个主库可以有多个备库</li><li>如果打开了 log_slave_updates 选项，一个备库可以把主库上的数据变化传播到其他备库</li></ul><h5 id="一主多备模式"><a href="#一主多备模式" class="headerlink" title="一主多备模式"></a>一主多备模式</h5><p>存在少量写和大量读时，这种配置非常有用。</p><h5 id="主—主库模式"><a href="#主—主库模式" class="headerlink" title="主—主库模式"></a>主—主库模式</h5><p><strong>MySQL 不支持多主库复制，及一个备库有多个主库的配置</strong></p><h5 id="拥有备库的主—主模式"><a href="#拥有备库的主—主模式" class="headerlink" title="拥有备库的主—主模式"></a>拥有备库的主—主模式</h5><p>在主—主库模式下，为每个主库增加备份的数据库。</p><h5 id="主—分—备库模式"><a href="#主—分—备库模式" class="headerlink" title="主—分—备库模式"></a>主—分—备库模式</h5><p>在主库和备库之间增加分发数据库。</p><h5 id="树形模式"><a href="#树形模式" class="headerlink" title="树形模式"></a>树形模式</h5><p>在主—备模式下，为每个备库增加多个备库。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_多线程_总结</title>
      <link href="/2022/10/03/java-duo-xian-cheng-zong-jie/"/>
      <url>/2022/10/03/java-duo-xian-cheng-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="硬件支持"><a href="#硬件支持" class="headerlink" title="硬件支持"></a>硬件支持</h2><p>在硬件层面，围绕多线程的使用和支持，计算机做了下面几种处理：</p><ol><li>CPU 增加了缓存，以均衡与内存的速度差异。—》会导致可见性问题</li><li>操作系统增加了进程，线程，以分时复用 CPU ，进而均衡 CPU 和 IO 设备的速度差异。—》会导致原子性问题</li><li>编译程序优化了指令执行顺序，使得缓存能够得到更加合理地利用。—》会导致有序性问题</li></ol><h3 id="CPU-缓存引起的可见性问题"><a href="#CPU-缓存引起的可见性问题" class="headerlink" title="CPU 缓存引起的可见性问题"></a>CPU 缓存引起的可见性问题</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程A 对应 CPU1</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程B 对应 CPU2</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span></code></pre><p>当线程A 执行 i = 10 这段代码的时候，会先把初始值 0 加载到 CPU1 的高速缓存中，然后赋值为 10，那么 CPU1 的高速缓存中的 i 的值就是 10，这个时候数值还没写入到内存之中。</p><p>此时线程B 执行 j = i 的时候，它会先去内存中读取 i 的值并加载到 CPU2 的缓存中，但这个时候由于内存中 i 的值还是 0，因此 j = 0。</p><ul><li><strong>解决</strong></li></ul><p>JAVA 中解决可见性问题，使用的是 volatile 关键字。当一个共享变量被 volatile 修饰的时候，它会保证修改的值会立即更新到内存，当其它线程需要读取时，它会去内存中读取值。（<strong>普通的共享变量不能保证</strong>）</p><p>除此之外 synchronized 和 Lock 也能保证可见性，synchronized 和 Lock 能保证同一时刻线程获取锁后执行同步代码，并且释放锁之前会将变量的修改刷新到内存之中。</p><h3 id="操作系统引起的原子性问题"><a href="#操作系统引起的原子性问题" class="headerlink" title="操作系统引起的原子性问题"></a>操作系统引起的原子性问题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程A</span>i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程B</span>i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>这里 i += 1 需要三条 CPU 指令去完成。执行过程如下：</p><ol><li>将变量 i 从内存中读取到 CPU 寄存器。</li><li>在 CPU 寄存器中执行 i + 1 操作。</li><li>将最后的结果写入内存。（缓存机制可能会使得数据写入 CPU 的缓存而不是内存） </li></ol><p>由于 CPU 分时复用（线程切换）的存在，线程A 执行第一条指令后，就切换到线程B 执行，假设线程B 执行完成之后在切换到线程A 继续执行后续两条指令，将会导致写入内存的值是 2 而不是 3。</p><ul><li><strong>解决</strong></li></ul><p>使用 synchronized 和 Lock 来解决，synchronized 和 Lock 能保证同一时刻只有一个线程执行该代码块。</p><h3 id="指令重排引起的有序性问题"><a href="#指令重排引起的有序性问题" class="headerlink" title="指令重排引起的有序性问题"></a>指令重排引起的有序性问题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 语句1</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 语句2</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p><em>思考一个问题：在程序执行的时候，语句1 和语句2 会按照顺序执行吗？</em></p><p>不会。因为在执行程序的时候为了提高性能，编译器和处理器会对指令进行重排。指令重排分为下面三种：</p><ol><li>编译器指令重排，编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令集的重排，处理器会采用指令集并行技术来讲多条指令重叠执行，如果不存在数据依赖性，处理器会改变语句对应机器指令的执行顺序。</li><li>内存系统的重排，由于处理器使用缓存和读写缓冲区，这就使得加载和存储操作看上去可能是乱序执行。</li></ol><ul><li><strong>解决</strong></li></ul><p>使用 synchronized 和 Lock 来解决，synchronized 和 Lock 能保证同一时刻只有一个线程执行该代码块。</p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>一个类在可以被多个线程安全调用时就是线程安全的，线程安全不是一个非真即假的命题，可以根据安全程度进行下列的划分：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><p>不可变的对象一定是线程安全的。</p><p>不可变的类型：</p><ol><li>final 关键字修饰的基本数据类型</li><li>String 对象</li><li>枚举类型</li><li>Number 部分子类，但 Number 的原子类 AtomicInteger 和 AtomicLong 是可变的</li></ol><h3 id="绝对线程安全"><a href="#绝对线程安全" class="headerlink" title="绝对线程安全"></a>绝对线程安全</h3><p>不管运行时环境如何，调用者都不需要任何额外的同步措施。</p><h3 id="相对线程安全"><a href="#相对线程安全" class="headerlink" title="相对线程安全"></a>相对线程安全</h3><p>相对线程安全需要保证对这个对象单独的操作是线程安全的，在调用的时候不需要做额外的保障措施。但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><h3 id="线程兼容"><a href="#线程兼容" class="headerlink" title="线程兼容"></a>线程兼容</h3><p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用。</p><h3 id="线程对立"><a href="#线程对立" class="headerlink" title="线程对立"></a>线程对立</h3><p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。</p><h3 id="线程安全的实现"><a href="#线程安全的实现" class="headerlink" title="线程安全的实现"></a>线程安全的实现</h3><h4 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h4><p>synchronized 和 ReentrantLock来实现。</p><h4 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h4><ol><li>CAS</li><li>原子类 AtomicInteger</li><li>ABA （可以通过 AtomicStampedReference  类来解决）</li></ol><h4 id="无同步方案"><a href="#无同步方案" class="headerlink" title="无同步方案"></a>无同步方案</h4><p>如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p><ul><li>栈封闭</li></ul><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。</p><ul><li>线程本地存储</li></ul><p>如果可以把共享的数据限制在同一个线程之内，这样就无须同步也能保证线程之间不出现数据竞争的问题。可以使用 ThreadLocal 来实现线程本地存储功能。</p><ul><li>可重入代码</li></ul><p>在代码执行的任何时刻中断它，转而去执行另外一段代码(包括递归调用它本身)，而在控制权返回后，原来的程序不会出现任何错误。</p><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>线程是程序执行时的最小单位，它是进程的一个执行流，是 CPU 调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多 CPU 环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。</p><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><ol><li>新建：创建后尚未启动。</li><li>可运行：可能正在运行，也可能正在等待 CPU 时间片。</li><li>阻塞：等待获取一个排它锁，如果线程释放了锁就会结束此状态。</li><li>无限期等待：等待其它线程显示唤醒，否则不会被分配 CPU 时间片。</li><li>限期等待：无需等待其它线程显示地唤醒，在一定时间之后会被系统自动唤醒。</li><li>死亡：线程结束任务之后结束，或者产生异常结束。</li></ol><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承  Thread 类"></a>继承  Thread 类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程名："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"输出的结果："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程名："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"输出的结果："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyRunnable myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程名："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"输出的结果："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        MyCallable myCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用-ExecutorService-实现"><a href="#使用-ExecutorService-实现" class="headerlink" title="使用 ExecutorService 实现"></a>使用 ExecutorService 实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Executor</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程名："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"输出的结果："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        Executor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future submit <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer sum <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>##　JAVA中的锁</p><h3 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h3><ul><li>乐观锁</li></ul><p>对于同一个数据的并发操作，乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。底层采用 CAS 算法实现。</p><p><strong>实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 乐观锁</span><span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 需要保证多个线程使用的是同一个AtomicInteger</span>atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行自增1</span></code></pre><ul><li>悲观锁</li></ul><p>对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。例如：synchronized 关键字和 Lock 的实现类都是悲观锁。</p><p><strong>实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// synchronized</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 操作同步资源</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ReentrantLock</span><span class="token keyword">private</span> ReentrantLockLock<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 需要保证多个线程使用的是同一个锁</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyPublicRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 操作同步资源</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><ul><li>概念</li></ul><p>阻塞或唤醒一个 Java 线程需要操作系统切换 CPU 状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在很多场景下，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><ul><li>优缺点</li></ul><p>自旋锁不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是 10 次，可以使用 -XX:PreBlockSpin 来更改）没有成功获得锁，就应当挂起线程。</p><p>底层的实现原理同样也是 CAS，AtomicInteger 中调用 unsafe 进行自增操作的源码中的 do-while 循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><ul><li>公平锁</li></ul><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。</p><p>公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU 唤醒阻塞线程的开销比非公平锁大。</p><ul><li>非公平锁</li></ul><p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。</p><p>非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU 不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者类），不会因为之前已经获取过还没释放而阻塞。Java 中ReentrantLock 和 synchronized 都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p><p><strong>例子</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法1执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法2执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同一个线程在调用 doOthers() 时可以直接获得当前对象的锁，进入 doOthers() 进行操作。</p><h3 id="独享锁和共享锁"><a href="#独享锁和共享锁" class="headerlink" title="独享锁和共享锁"></a>独享锁和共享锁</h3><ul><li>独享锁</li></ul><p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程A 对数据A 加上排它锁后，则其他线程不能再对数据A 加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。Javd 中的 synchronized 和 Lock 的实现类就是互斥锁。</p><ul><li>共享锁</li></ul><p>共享锁是指该锁可被多个线程所持有。如果线程A 对数据A 加上共享锁后，则其他线程只能对数据A 再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p><p>独享锁与共享锁是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p><h2 id="sychronized"><a href="#sychronized" class="headerlink" title="sychronized"></a>sychronized</h2><h3 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a>对象锁</h3><p>对象锁一般包含两种形式：synchronized (this) 和 synchronized 修饰普通方法。</p><ul><li>synchronized (this)</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 同步代码块形式——锁为this,两个线程使用的锁是一样的,线程1必须要等到线程0释放了该锁后，才能执行</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-xml"><code class="language-xml">我是线程Thread-0Thread-0结束我是线程Thread-1Thread-1结束</code></pre><p>通过代码和运行结果可以看出线程 t1 和线程 t2 使用的是同一个对象锁（SynchronizedDemo 对象的锁），那么线程 t2 就必须在线程 t1 运行之后再获取资源。</p><ul><li>synchronized 修饰普通方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-xml"><code class="language-xml">我是线程Thread-0Thread-0结束我是线程Thread-1Thread-1结束</code></pre><p>synchronized 修饰普通方法，默认锁对象是 this。</p><h3 id="类锁"><a href="#类锁" class="headerlink" title="类锁"></a>类锁</h3><p>先把上面两个对象锁的代码简单改造一下，看看运行结果。</p><ul><li>synchronized (this) 加类锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 同步代码块形式——锁为this,两个线程使用的锁是一样的,线程1必须要等到线程0释放了该锁后，才能执行</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-xml"><code class="language-xml">我是线程Thread-0我是线程Thread-1Thread-0结束Thread-1结束</code></pre><ul><li>synchronized 修饰普通方法加类锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-xml"><code class="language-xml">我是线程Thread-0我是线程Thread-1Thread-0结束Thread-1结束</code></pre><p>类锁的实现一般包含两种形式，一种是 synchronized (对象) 和 synchronized 修饰静态方法</p><ul><li>synchronized (对象)</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 同步代码块形式——锁为this,两个线程使用的锁是一样的,线程1必须要等到线程0释放了该锁后，才能执行</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SynchronizedDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-xml"><code class="language-xml">我是线程Thread-0Thread-0结束我是线程Thread-1Thread-1结束</code></pre><ul><li>synchronized 修饰静态方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedDemo synchronizedDemo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>synchronizedDemo2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-xml"><code class="language-xml">我是线程Thread-0Thread-0结束我是线程Thread-1Thread-1结束</code></pre><h3 id="JVM-中锁的优化"><a href="#JVM-中锁的优化" class="headerlink" title="JVM 中锁的优化"></a>JVM 中锁的优化</h3><p>synchronized 的底层是两个字节码 monitorenter 和 monitorexit ，这两个字节码指令会让对象在执行的时候，使计数器做加 1 和 减 1 操作，但这两个字节码的执行是依赖于底层操作系统 Mutex Lock 来实现的，而 Mutex Lock 操作非常昂贵，因此在 JDK1.6 中开始对锁的实现引入了大量的优化。</p><p>主要的优化有：</p><p>同时在 JDK1.6 中，synchronized 同步锁一共有四种状态，分别是：无锁 → 偏向锁 → 轻量级锁 → 重量级锁。它会随着竞争逐渐升级，并且这个过程不可逆。</p><h4 id="自旋锁-1"><a href="#自旋锁-1" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>在之前的 synchronized 实现中，当多线程竞争锁时，当一个线程获取锁时，它会阻塞所有正在竞争的线程，这样对性能带来了极大的影响。并且挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作对系统的并发性能带来了很大的压力。同时在很多情况下，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和回复阻塞线程并不值得。</p><p>自旋锁在 JDK1.4 中是默认关闭的，在 JDK1.6 中是默认开启的，自旋锁是让没有获取到锁的线程等待一段时间，并且这段时间内不放弃 CPU 的执行时间，其中默认自旋次数为 10 次。</p><h4 id="自适应自旋锁"><a href="#自适应自旋锁" class="headerlink" title="自适应自旋锁"></a>自适应自旋锁</h4><p>为了避免线程锁在线程自旋刚结束就释放掉了锁，JDK1.6 引入了自适应自旋锁，它是由前一次在同一个锁上的自旋 时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么 JVM 会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间。相反，如果对于某个锁自旋很少成功获取锁。那以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。</p><h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>在加同步锁时，尽可能的将同步块的作用范围限制到尽量小的范围(只在共享数据的实际作用域中才进行同步）但如果在连串的一系列操作都对同一个对象反复加锁和解锁，JVM 检测到这样一连串的操作都是对同一个对象加锁，那么 JVM 会将加锁同步的范围扩展(粗化)到整个一系列操作的外部，及只需要加锁一次就可以了。</p><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>JVM 会判断程序中的同步明显会不会逃逸出去从而被其他线程访问到，如果不会那 JVM 就把它们当作栈上数据对待，认为这些数据是线程独有的，不需要加同步。此时就会进行锁消除。</p><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>轻量级锁是相对于重量级锁而言的。使用轻量级锁时，不需要申请互斥量，仅仅将 Mark Word 中的部分字节 CAS 更新指向线程栈中的 Lock Record，如果更新成功，则轻量级锁获取成功，记录锁状态为轻量级锁；否则，说明已经有线程获得了轻量级锁，目前发生了锁竞争（不适合继续使用轻量级锁），接下来膨胀为重量级锁。</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>当一个线程访问加了同步锁的代码块时，会在对象头中存储当前线程的 ID<strong>，</strong>后续这个线程进入和退出这段加了同步锁的代码块时，不需要再次加锁和释放锁。而是直接比较对象头里面是否存储了指向当前线程的偏向锁。如果相等表示偏向锁是偏向于当前线程的，就不需要再尝试获得锁了。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>实例化一个对象其实可以分为三个步骤：</p><ul><li>分配内存空间。</li><li>初始化对象。</li><li>将内存空间的地址赋值给对应的引用。</li></ul><p>但是由于操作系统可以对指令进行重排，所以上面的过程就可能发生变化，在多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。为了防止这个过程的重排序，可以将变量设置成 volatile 类型的变量可。</p><blockquote><p>虚拟机为防止指令重排使用内存屏障技术来实现。</p></blockquote><h3 id="volatile-特性"><a href="#volatile-特性" class="headerlink" title="volatile 特性"></a>volatile 特性</h3><ul><li>volatile 不能保证完全的原子性，只能保证单次的读/写操作具有原子性。如 i++ 这样的操作。采用 volatile 修饰时并不能保证原子性，如果需要，可以使用 AtomicInteger 或 synchronized 来操作。</li></ul><blockquote><p>i++ 其实是一个复合操作，主要步骤为：</p><ul><li>读取i的值。</li><li>对i加1。</li><li>将i的值写回内存。</li></ul></blockquote><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>当类的定义为 final 的时候，表明这个类不能被继承，同时这个类中所有的方法都隐式为 final。</p><h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><ul><li>private 方法是隐式的 final</li><li>final 方法是可以被重载的</li></ul><h3 id="修饰参数"><a href="#修饰参数" class="headerlink" title="修饰参数"></a>修饰参数</h3><p>当参数声明为 final 的时候，意味着方法中无法更改参数引用指向的对象。常用于匿名内部类传递参数。</p><h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><ul><li>变量的值不能再被更改</li><li>static final 修饰变量的时候，必须在定义的时候赋值。</li></ul><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p>在多线程的环境下，为了保证线程的安全，final 采用了重排序的指令操作。包括下面几种方式：</p><h4 id="final-修饰基本数据类型"><a href="#final-修饰基本数据类型" class="headerlink" title="final 修饰基本数据类型"></a>final 修饰基本数据类型</h4><ul><li>写操作：禁止 final 域写与构造方法重排序，即禁止 final 域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的 final 域全部已经初始化过。</li><li>读操作：禁止初次读对象的引用与读该对象包含的 final 域的重排序。</li></ul><h4 id="final-修饰引用数据类型"><a href="#final-修饰引用数据类型" class="headerlink" title="final 修饰引用数据类型"></a>final 修饰引用数据类型</h4><ul><li>额外的约束：禁止在构造函数对一个 final 修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序。</li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>CAS 是一条 CPU 的原子指令，作用是让 CPU 先进行比较两个值是否相等，然后原子地更新某个位置的值。（CAS 操作需要输入两个数值，一个旧值(期望操作前的值)和一个新值，在操作期间先比较下在旧值有没有发生变化，如果没有发生变化，才交换成新值，发生了变化则不交换。）</p><p>CAS 是乐观锁，使用的时候会存在如下几个问题。</p><ul><li>ABA 问题</li></ul><p>如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时则会发现它的值没有发生变化，但是实际上却变化了。</p><p><strong>解决思路：</strong> </p><ol><li>使用版本号，在变量前追加版本号，每次变量更新的时候把版本号加一。</li><li>使用 AtomicStampedReference 来解决，这个类的 compareAndSet 方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</li></ol><ul><li>循环时长开销大</li></ul><p>如果 JVM 能支持处理器提供的 pause 指令，那么效率会有一定的提升。</p><ul><li>只能保证一个共享变量的原子操作</li></ul><p><strong>解决思路</strong> ：</p><ol><li>使用 AtomicReference 类来保证引用对象之间的原子性。</li></ol><h3 id="延伸的原子类"><a href="#延伸的原子类" class="headerlink" title="延伸的原子类"></a>延伸的原子类</h3><ol><li>AtomicBoolean ：原子更新布尔类型</li><li>AtomicInteger ：原子更新整型</li><li>AtomicLong ：原子更新长整型</li><li>AtomicIntegerArray ：原子更新整型数组里的元素</li><li>AtomicLongArray ：原子更新长整型数组里的元素</li><li>AtomicReferenceArray ：原子更新引用类型数组里的元素</li><li>AtomicReference ：原子更新引用类型</li><li>AtomicStampedReference ：原子更新引用类型, 内部使用Pair来存储元素值及其版本号</li><li>AtomicMarkableReferce ：原子更新带有标记位的引用类型</li><li>AtomicIntegerFieldUpdater ：原子更新整型的字段的更新器</li><li>AtomicLongFieldUpdater ：原子更新长整型字段的更新器</li><li>AtomicStampedFieldUpdater ：原子更新带有版本号的引用类型</li><li>AtomicReferenceFieldUpdater ：上面已经说过此处不在赘述</li></ol><h2 id="AOS"><a href="#AOS" class="headerlink" title="AOS"></a>AOS</h2><p>AQS 是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的大量的同步器，如：ReentrantLock，Semaphore，ReentrantReadWriteLock 都是基于 AOS 实现的。</p><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><blockquote><p>CLH 队列是一个虚拟的双向队列 (虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系)。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点 (Node) 来实现锁的分配。</p></blockquote><p>AQS 使用一个 Int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</p><h3 id="资源的共享方式"><a href="#资源的共享方式" class="headerlink" title="资源的共享方式"></a>资源的共享方式</h3><ul><li>Exclusive (独占)</li></ul><p>只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁。（公平锁：按照线程在队列中的排队顺序，先到者先拿到锁；非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的。）</p><ul><li>Share (共享)</li></ul><p>多个线程可同时执行。</p><h3 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h3><p>底层的设计使用的是模板方法模式，如果需要自定义同步器一般方式为：</p><ol><li>继承 AbstractQueuedSynchronizer 并重写指定的方法，将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</li></ol><p>需要重写的模板方法：</p><pre class=" language-java"><code class="language-java"><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span><span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></code></pre><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><ul><li>ReentrantLock 实现了 Lock 接口。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable </code></pre><ul><li>ReentrantLock 属性</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7373984872572414699L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步队列</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>ReentrantLock 构造函数</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认非公平策略</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可以传递参数确定采用公平策略或者是非公平策略，参数为true表示公平策略，否则，采用非公平策略:</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>ReentrantLock 内部有三个内部类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Sync</span><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span><span class="token comment" spellcheck="true">// NonfairSync</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span><span class="token comment" spellcheck="true">// FairSync</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span></code></pre><h3 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 序列号</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>5179523762034025860L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取锁</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 非公平方式获取</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取状态</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 表示没有线程正在竞争该锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 比较并设置状态成功，状态0表示锁没有被占用</span>                <span class="token comment" spellcheck="true">// 设置当前线程独占</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 成功</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当前线程拥有该锁</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增加重入次数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置状态</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 成功</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 失败</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 试图在共享模式下获取对象状态，此方法应该查询是否允许它在共享模式下获取对象状态，如果允许，则获取它</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当前线程不为独占线程</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出异常</span>        <span class="token comment" spellcheck="true">// 释放标识</span>        <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 已经释放，清空独占</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置标识</span>        <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> free<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断资源是否被当前线程占有</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// While we must in general read state before owner,</span>        <span class="token comment" spellcheck="true">// we don't need to do so to check if current thread is owner</span>        <span class="token keyword">return</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新生一个条件</span>    <span class="token keyword">final</span> ConditionObject <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Methods relayed from outer class</span>    <span class="token comment" spellcheck="true">// 返回资源的占用线程</span>    <span class="token keyword">final</span> Thread <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回状态</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 资源是否被占用</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        * Reconstitutes the instance from a stream (that is, deserializes it).        */</span>    <span class="token comment" spellcheck="true">// 自定义反序列化逻辑</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// reset to unlocked state</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>　　</code></pre><p><img src="/2022/10/03/java-duo-xian-cheng-zong-jie/Sync.png" alt="image"></p><h3 id="NonfairSync"><a href="#NonfairSync" class="headerlink" title="NonfairSync"></a>NonfairSync</h3><p>主要是实现了 Sync 类中抽象的 lock 方法，表示采用非公平策略获取锁。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 非公平锁</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 版本号</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7316153563782823691L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获得锁</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 比较并设置状态成功，状态0表示锁没有被占用</span>            <span class="token comment" spellcheck="true">// 把当前线程设置独占了锁</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 锁已经被占用，或者set失败</span>            <span class="token comment" spellcheck="true">// 以独占模式获取对象，忽略中断</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="FairSyn"><a href="#FairSyn" class="headerlink" title="FairSyn"></a>FairSyn</h3><p>主要是实现了 Sync 类中抽象的 lock 方法，表示采用公平策略获取锁。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 公平锁</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 版本序列化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3000897897090466540L<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以独占模式获取对象，忽略中断</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        * Fair version of tryAcquire.  Don't grant access unless        * recursive call or no waiters or is first.        */</span>    <span class="token comment" spellcheck="true">// 尝试公平获取锁</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前线程</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取状态</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态为0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不存在已经等待更久的线程并且比较并且设置状态成功</span>                <span class="token comment" spellcheck="true">// 设置当前线程独占</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态不为0，即资源已经被线程占据</span>            <span class="token comment" spellcheck="true">// 下一个状态</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 超过了int的表示范围</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置状态</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal 是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用 ThreadLocal 来维护变量时, ThreadLocal 会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况。</p><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>DateFormat<span class="token operator">></span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>DateFormat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> DateFormat <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用</span>DateUtils<span class="token punctuation">.</span>df<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//10,核心线程数，线程池中始终存活的线程数。</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//30,最大线程数，线程池中允许的最大线程数，当线程池的任务队列满了之后可以创建的最大线程数。</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//最大线程数可以存活的时间，当线程中没有任务执行时，最大线程就会销毁一部分，最终保持核心线程数量的线程。</span>                          TimeUnit unit<span class="token punctuation">,</span>                          BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//100,一个阻塞队列，用来存储线程池等待执行的任务，均为线程安全。</span>                          ThreadFactory threadFactory<span class="token punctuation">,</span>                          RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>        maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>        maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>        keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>当接收到 30 个比较耗时的任务时，10 个核心线程数（corePoolSize）都在工作，剩余的 20 个去队列（workQueue）里排队。</li><li>这个线程池最多接收的任务：maximumPoolSize + workQueue。</li></ol><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><ol><li>当线程数小于核心线程数（corePoolSize）时，创建线程。</li><li>当线程数大于等于核心线程数（corePoolSize），且任务队列（workQueue）未满时，将任务放入任务队列（workQueue）。</li><li>当线程数大于等于核心线程数（corePoolSize），且任务队列（workQueue）已满：若线程数小于最大线程数（maximumPoolSize ），创建线程；若线程数等于最大线程数（maximumPoolSize ），抛出异常，拒绝任务。</li></ol><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><ol><li>ThreadPoolExecutor.AbortPolicy：丢弃任务并抛出 RejectedExecutionException 异常。（ThreadPoolExecutor 线程池默认策略）</li><li>ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新提交被拒绝的任务。</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程（提交任务的线程）处理该任务。</li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li>setCorePoolSize 方法</li></ul><p>在运行期线程池使用方调用此方法设置 corePoolSize 之后，线程池会直接覆盖原来的 corePoolSize 值，并且基于当前值和原始值的比较结果采取不同的处理策略。</p><ol><li>对于当前值小于当前工作线程数的情况，说明有多余的 worker 线程，此时会向当前 worker 线程发起中断请求以实现回收，多余的 worker 在下次的时候也会被回收；</li><li>对于当前值大于原始值且当前队列中有待执行任务，则线程池会创建新的 worker 线程来执行队列任务。</li></ol><ul><li>setMaximumPoolSize 方法</li></ul><ol><li>首先是参数合法性校验。</li><li>然后用传递进来的值，覆盖原来的值。</li><li>判断工作线程是否是大于最大线程数，如果大于，则对空闲线程发起中断请求</li></ol><p>我们一般使用的是 Spring 包装的类 ThreadPoolTaskExecutor。对应的源码里面也有写到 setCorePoolSize 和 setMaximumPoolSize 在运行的时候是可以修改的。</p><ul><li>setQueueCapacity 方法</li></ul><p>在 ThreadPoolTaskExecutor 方法之中，setQueueCapacity 直接对其赋值，如果也要实现和上面一样的效果，我们往下看看，发现有一个 createQueue 的方法，返回一个 BlockingQueue 的实现类，内部为 LinkedBlockingQueue 构造方法，在 LinkedBlockingQueue 源码之中，可以发现 capacity 对修饰为 final 的了。如果想要实现上述支持动态修改的模式，那么可以重写 LinkedBlockingQueue 方法，允许 capacity  为可以修改即可。然后在实现修改的时候，保证线程安全。</p><h3 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h3><ul><li><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>线程池的线程数量达 corePoolSize 后，即使线程池没有可执行任务时，也不会释放线程。</li><li>线程池里的线程数量不超过 corePoolSize，这导致了 maximumPoolSize和 keepAliveTime 将会是个无用参数。</li><li>使用了无界队列, 所以 FixedThreadPool 永远不会拒绝, 即饱和策略失效。</li></ol><ul><li><h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>初始化的线程池中只有一个线程，如果该线程异常结束，会重新创建一个新的线程继续执行任务，唯一的线程可以保证所提交任务的顺序执行。</li><li>使用了无界队列, 所以 SingleThreadPool 永远不会拒绝, 即饱和策略失效。</li></ol><ul><li><h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                    60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>在没有任务执行时，当线程的空闲时间超过 keepAliveTime，会自动释放线程资源，当提交新任务时，如果没有空闲线程，则创建新线程执行任务。</li><li>主线程调用 SynchronousQueue 的 offer() 方法放入任务, 倘若此时线程池中有空闲的线程尝试读取 SynchronousQueue 的任务, 即调用了SynchronousQueue 的 poll()，那么主线程将该任务交给空闲线程。</li><li>当线程池为空或者没有空闲的线程，则创建新的线程执行任务。</li><li>执行完任务的线程倘若在 60s 内仍空闲, 则会被终止，因此长时间空闲的CachedThreadPool 不会持有任何线程资源。</li></ol><h3 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h3><h4 id="为何线程池不允许使用-Executors-去创建，而是通过-ThreadPoolExecutor-的方式？"><a href="#为何线程池不允许使用-Executors-去创建，而是通过-ThreadPoolExecutor-的方式？" class="headerlink" title="为何线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式？"></a>为何线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式？</h4><p>其中最主要的原因是：在 Executors 的方法内存在下面的风险：</p><ul><li>newFixedThreadPool 和 newSingleThreadExecutor</li></ul><p>主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至内存溢出。</p><ul><li>newCachedThreadPool 和 newScheduledThreadPool</li></ul><p>主要问题是线程数最大数是 Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至内存溢出的风险。</p><h4 id="配置线程池需要考虑的因素"><a href="#配置线程池需要考虑的因素" class="headerlink" title="配置线程池需要考虑的因素"></a>配置线程池需要考虑的因素</h4><p>从任务的优先级，任务的执行时间长短，任务的性质( CPU密集 IO密集)，任务的依赖关系这四个角度分析，并且近可能地使用有界的工作队列。</p><p>例如：</p><ol><li>CPU密集型: 尽可能少的线程，Ncpu+1。</li><li>IO密集型: 尽可能多的线程，Ncpu*2，比如数据库连接池。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVA 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Secret</title>
      <link href="/2022/10/03/springboot-secret/"/>
      <url>/2022/10/03/springboot-secret/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Secret"><a href="#SpringBoot-Secret" class="headerlink" title="SpringBoot_Secret"></a>SpringBoot_Secret</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 添加对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>定义实体类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义实体类 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>自定义注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Signature</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>自定义加密工具类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义加密方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignatureUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SECRET <span class="token operator">=</span> <span class="token string">"1qaz@WSX#$%&amp;"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sign</span><span class="token punctuation">(</span>String body<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> params<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CharSequenceUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            params<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">.</span><span class="token function">comparingByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>paramEntry <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        String paramValue <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>paramEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>paramEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>paramValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String pathValues <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>pathValues<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SecureUtil<span class="token punctuation">.</span><span class="token function">sha256</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> DEFAULT_SECRET<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><ul><li>自定义 AOP 切面</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义 Aop 切面，对所有的参数进行按规则签名 */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignatureAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SIGN_HEADER <span class="token operator">=</span> <span class="token string">"X-SIGN"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(@com.example.springbootsecret.comment.Signature * *(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">verifySignPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"verifySignPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sign <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>SIGN_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// must have sign in header</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CharSequenceUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"no signature in header: "</span> <span class="token operator">+</span> SIGN_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// check signature</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String generatedSign <span class="token operator">=</span> <span class="token function">generatedSignature</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sign<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>generatedSign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"invalid signature"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"invalid signature"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">generatedSignature</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// @RequestBody</span>        String bodyParam <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">ContentCachingRequestWrapper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bodyParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ContentCachingRequestWrapper<span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// @RequestParam</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> requestParameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @PathVariable</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> null<span class="token punctuation">;</span>        ServletWebRequest webRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> uriTemplateVars <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">)</span> webRequest<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>HandlerMapping<span class="token punctuation">.</span>URI_TEMPLATE_VARIABLES_ATTRIBUTE<span class="token punctuation">,</span> RequestAttributes<span class="token punctuation">.</span>SCOPE_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uriTemplateVars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            paths <span class="token operator">=</span> uriTemplateVars<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SignatureUtils<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>bodyParam<span class="token punctuation">,</span> requestParameterMap<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><ul><li>对请求进行封装</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 对请求进行封装 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> HttpServletRequest request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> HttpServletResponse response<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isFirstRequest <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">isAsyncDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest requestWrapper <span class="token operator">=</span> request<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirstRequest <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">ContentCachingRequestWrapper</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            requestWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentCachingRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>requestWrapper<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><ul><li>过滤请求</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 注册过滤 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignatureConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RequestFilter <span class="token function">requestCachingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">requestCachingFilterRegistration</span><span class="token punctuation">(</span>RequestFilter requestCachingFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FilterRegistrationBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requestCachingFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h2><ul><li>定义请求方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Signature</span> <span class="token comment" spellcheck="true">// 方法体上要加这个注解</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">myController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Swagger</title>
      <link href="/2022/10/03/springboot-swagger/"/>
      <url>/2022/10/03/springboot-swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Swagger"><a href="#SpringBoot-Swagger" class="headerlink" title="SpringBoot_Swagger"></a>SpringBoot_Swagger</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 添加对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>定义配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义 Swagger 的配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableOpenApi</span> <span class="token comment" spellcheck="true">// 启用 Swagger3</span><span class="token annotation punctuation">@EnableKnife4j</span> <span class="token comment" spellcheck="true">// 开启 knife4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">openApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"Test Group"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span>ApiOperation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Swagger API"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"Test Api"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"http://swagger.com"</span><span class="token punctuation">,</span> <span class="token string">"swagger@gmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>定义实体类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义实体类 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户实体类"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 实体类上使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserParam</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"ID"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 实体类的属性上使用</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"性别"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>定义访问接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义请求方法 */</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"UserController"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用在请求的实体类上，对类的说明</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"新增方法"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对接口的说明</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"userParam"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"Body"</span><span class="token punctuation">,</span> dataTypeClass <span class="token operator">=</span> UserParam<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对请求参数的说明</span>    <span class="token keyword">public</span> Boolean <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserParam userParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询方法"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对接口的说明</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserParam<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UserParam<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserParam userParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ka"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Validation</title>
      <link href="/2022/05/24/springboot-validation/"/>
      <url>/2022/05/24/springboot-validation/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Validation"><a href="#SpringBoot-Validation" class="headerlink" title="SpringBoot_Validation"></a>SpringBoot_Validation</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 文件中添加架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>定义实体类<code>QuartSearchCondition</code> 在对应字段上添加校验规则</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartSearchCondition</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * id     */</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 字段名     */</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"name 不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 中文名     */</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"chineseName 不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String chineseName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 字段值，以json形式存储     * 如：     * ["green","garnett","nick","james","thompson","tom","cally","towns","lavin","wigins"]     * {"gte":10,"lte":50}     */</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"value 不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询方式：     * 1  match  分词     * 2  terms  多个完全匹配任一个     * 3  term    完全匹配     * 4  range  两者之间     * 5  wildcard  模糊     * 6  being 字段不为空     */</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"conditionMode 不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer conditionMode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 字段间关系 1 must  2 mustNot  3 should     */</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"conditionType 不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer conditionType<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 报表id     */</span>    <span class="token keyword">private</span> Integer jobId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li><code>Controller</code> 层直接使用，数据就会校验</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartSearchController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getQuartSearchValue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getQuartSearchValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> QuartSearchCondition quartSearchCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"传参为：{}"</span><span class="token punctuation">,</span> quartSearchCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>quartSearchCondition<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"传参为空！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getQuartSearch"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getQuartSearch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> QuartSearchCondition quartSearchCondition<span class="token punctuation">,</span> BindingResult result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"传参为：{}"</span><span class="token punctuation">,</span> quartSearchCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ObjectError<span class="token operator">></span> allErrors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>ObjectError allError <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>allError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Thread</title>
      <link href="/2022/05/24/springboot-thread/"/>
      <url>/2022/05/24/springboot-thread/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Thread"><a href="#SpringBoot-Thread" class="headerlink" title="SpringBoot_Thread"></a>SpringBoot_Thread</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>定义配置文件</li></ul><pre class=" language-xml"><code class="language-xml">spring:  task:    execution:      pool:        core-size: 10        max-size: 20        queue-capacity: 40        keep-alive: 60      thread-name-prefix: thread-</code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>定义<code>ThreadConfig</code> 的配置</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.task.execution.pool.core-size}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer coreSize<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.task.execution.pool.max-size}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer maxSize<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.task.execution.pool.queue-capacity}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer queueCapacity<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.task.execution.pool.keep-alive}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer keepAlive<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.task.execution.thread-name-prefix}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String threadNamePrefix<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * ThreadPoolTaskExcutor 运行原理     * 当线程池的线程数小于 corePoolSize，则新建线程入池处理请求     * 当线程池的线程数等于 corePoolSize，则将任务放入 Queue 中，线程池中的空闲线程会从 Queue 中获取任务并处理     * 当Queue中的任务数超过 queueCapacity，则新建线程入池处理请求，但如果线程池线程数达到 maxPoolSize，将会通过 RejectedExecutionHandler 做拒绝处理     * 当线程池的线程数大于 corePoolSize 时，空闲线程会等待 keepAliveTime 长时间，如果无请求可处理就自行销毁     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"getAsyncExecutor"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 核心线程数：线程池创建时候初始化的线程数         */</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>coreSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 最大线程数：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程         */</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 缓冲队列：用来缓冲执行任务的队列         */</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>queueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 允许线程的空闲时间60秒：当超过了核心线程之外的线程在空闲时间到达之后会被销毁         */</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span>keepAlive<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池         */</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span>threadNamePrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 缓冲队列满了之后的拒绝策略：在新线程中执行任务，而是有调用者所在的线程来执行         */</span>        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AsyncUncaughtExceptionHandler <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>定义<code>IThreadService</code>接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IThreadService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sysData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>定义 <code>ThreadServiceImpl</code> 实现类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 注意这两个方法在实现山的异同 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IThreadService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> Executor executor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"getAsyncExecutor"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CountDownLatch mainMonitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CountDownLatch childMonitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mainMonitor<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"完成任务"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    childMonitor<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            childMonitor<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mainMonitor<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务释放"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"getAsyncExecutor"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sysData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 执行异步任务："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><ul><li><code>Controller</code>层使用</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 注意这两个方法在使用上的异同 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> IThreadService threadService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getData"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        threadService<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/sysData"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sysData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadService<span class="token punctuation">.</span><span class="token function">sysData</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Redis</title>
      <link href="/2022/05/24/springboot-redis/"/>
      <url>/2022/05/24/springboot-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Redis"><a href="#SpringBoot-Redis" class="headerlink" title="SpringBoot_Redis"></a>SpringBoot_Redis</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 文件添加对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.71<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>配置文件添加对应的配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 单机的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Redis服务器地址</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 122.112.166.49    <span class="token comment" spellcheck="true"># Redis服务器连接端口</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token comment" spellcheck="true"># Redis数据库索引（默认为0）</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> Galaxyeye01    <span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制）</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">50</span>        <span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">3000</span>        <span class="token comment" spellcheck="true"># 连接池中的最大空闲连接</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token comment" spellcheck="true"># 连接池中的最小空闲连接</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token comment" spellcheck="true"># 集群的配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#Redis服务器地址</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 172.16.3.231<span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">,</span>172.16.3.232<span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">,</span>172.16.3.233<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token comment" spellcheck="true">#Redis服务器连接端口</span>    <span class="token comment" spellcheck="true">#port: 6379</span>    <span class="token comment" spellcheck="true">#Redis数据库索引（默认为0）</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> galaxyeye    <span class="token comment" spellcheck="true">#连接池最大连接数（使用负值表示没有限制）</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#max-active: 50</span>        <span class="token comment" spellcheck="true">#连接池最大阻塞等待时间（使用负值表示没有限制）</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">3000</span>        <span class="token comment" spellcheck="true">#连接池中的最大空闲连接</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token comment" spellcheck="true">#连接池中的最小空闲连接</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true">#连接超时时间（毫秒）</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li>实现<code>FastJson</code> 的序列化</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RedisSerializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FastJsonRedisSerializer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerializationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> SerializerFeature<span class="token punctuation">.</span>WriteClassName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerializationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li>定义<code>RedisConfig</code> 配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 实例化 RedisTemplate 对象     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>LettuceConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FastJsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> fastJsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>fastJsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>fastJsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置白名单---非常重要********</span>        ParserConfig<span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAccept</span><span class="token punctuation">(</span><span class="token string">"com.example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><ul><li>定义<code>IRedisService</code> 的接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**         * 在字符串后边追加 字符串         * @param key         * @param appendValue         * @return         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">append</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String appendValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 缓存基本的对象，Integer、String、实体类等         * @param key      缓存的健值         * @param value    缓存的值         * @return         缓存的对象         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> T value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 缓存基本的对象，Integer、String、实体类等         * @param key      缓存的健值         * @param value    缓存的值         * @param timeout  时间         * @param timeUnit 时间颗粒度         * @return         缓存的对象         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> T value<span class="token punctuation">,</span> Integer timeout<span class="token punctuation">,</span> TimeUnit timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 缓存基本的对象，Integer、String、实体类等         * @param key      缓存的健值         * @param value    缓存的值         * @param timeout  时间         * @return         缓存的对象         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> T value<span class="token punctuation">,</span> Duration timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的基本对象。         *         * @param key 缓存键值         * @return 缓存键值对应的数据         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 设置过期时间         * @param key           key值         * @param timeout       时间         * @param timeUnit      时间单位         * @return         */</span>    Boolean <span class="token function">setExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Long timeout<span class="token punctuation">,</span> TimeUnit timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 删除单个对象         * @param key         */</span>    <span class="token keyword">void</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 删除集合对象         * @param collection         */</span>    <span class="token keyword">void</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span>Collection collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 缓存List数据         *         * @param key      缓存的键值         * @param dataList 待缓存的List数据         * @return         缓存的对象         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheList</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的list对象         *         * @param key 缓存的键值         * @return 缓存键值对应的数据         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getCacheList</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 缓存Set         *         * @param key     缓存键值         * @param dataSet 缓存的数据         * @return 缓存数据的对象         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> BoundSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>T<span class="token operator">></span> dataSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的set         *         * @param key         * @return         */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> Set<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getCacheSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 缓存Map         *         * @param key         * @param dataMap         * @return         */</span>    <span class="token keyword">void</span> <span class="token function">hashPutAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 在hash中新增一个值         * @param key         * @param field         * @param value         */</span>    <span class="token keyword">void</span> <span class="token function">hashPut</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 当field不存在时put         * @param key         * @param field         * @param value         */</span>    <span class="token keyword">void</span> <span class="token function">hashPutIfAbsent</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的Map         *         * @param key         */</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hashGetAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获取键值为key的hash中的field字段的值         * @param key         * @param field         */</span>    Object <span class="token function">hashGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获取键值为key的hash表中所有字段         * @param key         */</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">hashKeys</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获取键值为key的hash表中所有value         * @param key         */</span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">hashValues</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 给hash表中指定字段（整形）增加increment         */</span>    Long <span class="token function">hashIncrement</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> <span class="token keyword">long</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 给hash表中指定字段（Double）增加increment         */</span>    Double <span class="token function">hashIncrement</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> <span class="token keyword">double</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 判断hashKey是否存在         * @param key         * @param hashKey         * @return 存在返回true，不存在返回false         */</span>    Boolean <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 根据key删除一个或多个字段         * @param key         * @param fields         */</span>    <span class="token keyword">void</span> <span class="token function">hashDelete</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的基本对象列表         *         * @param pattern 字符串前缀         * @return 对象列表         */</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 自增         * @param key         * @return     自增后的值         */</span>    Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 自增 num         * @param key         * @return   自增后的值         */</span>    Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 返回RedisTemplate         *         * @return RedisTemplate         */</span>    RedisTemplate <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 执行lua脚本，返回执行结果         * @param redisScript         * @param key         * @param value         * @return         */</span>    Object <span class="token function">execute</span><span class="token punctuation">(</span>DefaultRedisScript redisScript<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><ul><li>实现<code>IRedisService</code> 的接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IRedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 在字符串后边追加 字符串         * @param key         * @param appendValue         * @return         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">append</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String appendValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> operations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> appendValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operations<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 缓存基本的对象，Integer、String、实体类等         * @param key      缓存的健值         * @param value    缓存的值         * @return         缓存的对象         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> operations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operations<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 缓存基本的对象，Integer、String、实体类等         * @param key      缓存的健值         * @param value    缓存的值         * @param timeout  时间         * @param timeUnit 时间颗粒度         * @return         缓存的对象         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> T value<span class="token punctuation">,</span> Integer timeout<span class="token punctuation">,</span> TimeUnit timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> operations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operations<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 缓存基本的对象，Integer、String、实体类等         * @param key      缓存的健值         * @param value    缓存的值         * @param timeout  时间         * @return         缓存的对象         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> T value<span class="token punctuation">,</span> Duration timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> operations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operations<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的基本对象。         *         * @param key 缓存键值         * @return 缓存键值对应的数据         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getCacheObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> operation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operation<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 设置过期时间         * @param key           key值         * @param timeout       时间         * @param timeUnit      时间单位         * @return         */</span>    <span class="token keyword">public</span> Boolean <span class="token function">setExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Long timeout<span class="token punctuation">,</span> TimeUnit timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 删除单个对象         * @param key         */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 删除集合对象         * @param collection         */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span>Collection collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 缓存List数据         *         * @param key      缓存的键值         * @param dataList 待缓存的List数据         * @return         缓存的对象         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheList</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListOperations listOperations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> listOperations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                listOperations<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> listOperations<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的list对象         *         * @param key 缓存的键值         * @return 缓存键值对应的数据         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getCacheList</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> listOperations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long size <span class="token operator">=</span> listOperations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listOperations<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dataList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 缓存Set         *         * @param key     缓存键值         * @param dataSet 缓存的数据         * @return 缓存数据的对象         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> BoundSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">setCacheSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>T<span class="token operator">></span> dataSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BoundSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> setOperations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">boundSetOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> iterable <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterable<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            setOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iterable<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> setOperations<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的set         *         * @param key         * @return         */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Set<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getCacheSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>T<span class="token operator">></span> dataSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BoundSetOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> T<span class="token operator">></span> setOperations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">boundSetOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        Long size <span class="token operator">=</span> setOperations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dataSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>setOperations<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dataSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 缓存Map         *         * @param key         * @param dataMap         * @return         */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hashPutAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> dataMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 在hash中新增一个值         * @param key         * @param field         * @param value         */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hashPut</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 当field不存在时put         * @param key         * @param field         * @param value         */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hashPutIfAbsent</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的Map         *         * @param key         */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hashGetAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获取键值为key的hash中的field字段的值         * @param key         * @param field         */</span>    <span class="token keyword">public</span> Object <span class="token function">hashGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获取键值为key的hash表中所有字段         * @param key         */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">hashKeys</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获取键值为key的hash表中所有value         * @param key         */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">hashValues</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 给hash表中指定字段（整形）增加increment         */</span>    <span class="token keyword">public</span> Long <span class="token function">hashIncrement</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> <span class="token keyword">long</span> increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 给hash表中指定字段（Double）增加increment         */</span>    <span class="token keyword">public</span> Double <span class="token function">hashIncrement</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> <span class="token keyword">double</span> increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 判断hashKey是否存在         * @param key         * @param hashKey         * @return 存在返回true，不存在返回false         */</span>    <span class="token keyword">public</span> Boolean <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 根据key删除一个或多个字段         * @param key         * @param fields         */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hashDelete</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 获得缓存的基本对象列表         *         * @param pattern 字符串前缀         * @return 对象列表         */</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 自增         * @param key         * @return     自增后的值         */</span>    <span class="token keyword">public</span> Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 自增 num         * @param key         * @return   自增后的值         */</span>    <span class="token keyword">public</span> Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 返回RedisTemplate         *         * @return RedisTemplate         */</span>    <span class="token keyword">public</span> RedisTemplate <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**         * 执行lua脚本，返回执行结果         * @param redisScript         * @param key         * @param value         * @return         */</span>    <span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>DefaultRedisScript redisScript<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><ul><li><code>Controller</code>层使用</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> IRedisService redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"getRedis/01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getRedis_01</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 获取这个参数为 key 的缓存数据         * 这里实际的操作的时候，需要判断缓存数据是否存在，然后根据不同的情况做不同的业务操作         */</span>        Object cacheObject <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getCacheObject</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cacheObject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 最后业务执行完，需要在缓存里设置数据，第一个参数为对应的 key 值，第二个参数为对应的值         */</span>        redisService<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Logback</title>
      <link href="/2022/05/24/springboot-logback/"/>
      <url>/2022/05/24/springboot-logback/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Logback"><a href="#SpringBoot-Logback" class="headerlink" title="SpringBoot_Logback"></a>SpringBoot_Logback</h1><p><code>SpringBoot</code> 中，架包 <code>spring-boot-starter-web</code> 已经包含了 <code>logback</code> 的日志信息。因此只需要在新建的项目中加上对应的日志配置文件即可，文件名必须为：<code>logback-spring.xml</code>。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token comment" spellcheck="true">&lt;!--配置文件说明：共有一个父标签、两种属性、三个节点:1.一个父标签：configuration2. 两种属性：contextName和property3. 三个节点：appender、root、logger主要就是appender追加到哪里：控制台/文件，然后采用哪种pattern（在property定义了pattern格式）然后就是logger和root配置，指定日志输出级别，以及引用哪种appender--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根节点&lt;configuration>包含的属性：        scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。        scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。        debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback-springboot-logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg %n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern-color<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%yellow(%d{yyyy-MM-dd HH:mm:ss.SSS}) [%thread] %highlight(%-5level) %green(%logger{50}) - %highlight(%msg) %n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--文件路径输出说明，会自动生成文件夹及log文件，但是由于我这个是多模块，默认生成在父目录下的logs文件夹下面，所以要在子模块下生成要再加一个路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter">--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;level>ERROR&lt;/level>--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;/filter>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出-带颜色 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE-WITH-COLOR<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern-color}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 文件输出 --></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            &lt;fileNamePattern>${LOG_HOME}/%d.%i.log&lt;/fileNamePattern>            &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                &lt;maxFileSize>10MB&lt;/maxFileSize>            &lt;/timeBasedFileNamingAndTriggeringPolicy>            &lt;maxHistory>30&lt;/maxHistory>        &lt;/rollingPolicy>        &lt;encoder>            &lt;pattern>${pattern}&lt;/pattern>        &lt;/encoder>    &lt;/appender>--></span>    <span class="token comment" spellcheck="true">&lt;!--输出到info--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO-FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${LOG_HOME}/info/%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只打印INFO日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到error--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR-FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${LOG_HOME}/error/%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只打印ERROR日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到warn--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN-FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${LOG_HOME}/warn/%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>append</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>append</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只打印WARN日志 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>WARN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 异步输出 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ASYNC-INFO<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>256<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加附加的appender,最多只能添加一个 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO-FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ASYNC-ERROR<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>256<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加附加的appender,最多只能添加一个 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR-FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ASYNC-WARN<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>256<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 添加附加的appender,最多只能添加一个 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN-FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--相当于全局的配置--></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定最基础的日志输出级别 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE-WITH-COLOR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO-FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR-FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN-FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1. root和logger是父子的关系。       Logger的appender根据参数additivity决定是否要叠加root的appender，logger的级别是其自身定义的级别，和root的级别没什么关系。        2. logger对单个包或类添加配置，相当于局部配置，root相当于全局配置       如果logger里面配置了additivity="false"，就会覆盖root的，只打印一遍；       但是additivity="true"，就会向上层再次传递，不会覆盖，而是打印两遍！    --></span>    <span class="token comment" spellcheck="true">&lt;!--相当于局部配置：    配置特定类/包使用不同的日志输出器appender：TestControoler2的会输出两遍，additivity="true"--></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;logger name="com.apple.controller.TestController2" level="INFO" additivity="true">         &lt;appender-ref ref="CONSOLE"/>     &lt;/logger>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Log4j2</title>
      <link href="/2022/05/24/springboot-log4j2/"/>
      <url>/2022/05/24/springboot-log4j2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Log4j2"><a href="#SpringBoot-Log4j2" class="headerlink" title="SpringBoot_Log4j2"></a>SpringBoot_Log4j2</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>pom.xml 文件引入对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lmax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>disruptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li>添加配置文件，文件名为：<code>log4j2-spring.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--></span><span class="token comment" spellcheck="true">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --></span>    <span class="token comment" spellcheck="true">&lt;!--变量配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Properties</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里定义两个格式化输出格式，分别用于文件日志和控制台日志（带颜色）--></span>        <span class="token comment" spellcheck="true">&lt;!-- %date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_PATTERN<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger [%L] : %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_PATTERN_HIGHLIGHT<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%date{yyyy-MM-dd HH:mm:ss:SSS} %highlight{%5level} [%thread] %style{%logger}{bright,cyan} [%style{%L}{bright,blue}] : %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义日志存储的路径，不要配置相对路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE_PATH<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义日志归档压缩包名字，通常设置为项目名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE_NAME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>springboot-log4j2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--*********************控制台日志***********************--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--输出日志的格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_PATTERN_HIGHLIGHT}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--*********************文件日志***********************--></span>        <span class="token comment" spellcheck="true">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Filelog<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${FILE_PATH}/test.log<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_PATTERN}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${FILE_PATH}/info.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_PATTERN}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RollingFileWarn<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${FILE_PATH}/warn.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_PATTERN}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${FILE_PATH}/error.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_PATTERN}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。--></span>    <span class="token comment" spellcheck="true">&lt;!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--监控系统信息--></span>        <span class="token comment" spellcheck="true">&lt;!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Logger</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Filelog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RollingFileWarn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li><code>Application</code> 添加对应的代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootLog4j2Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"Log4jContextSelector"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootLog4j2Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Filter_Handler_Listener</title>
      <link href="/2022/05/24/springboot-filter-handler-listener/"/>
      <url>/2022/05/24/springboot-filter-handler-listener/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Filter-Handler-Listener"><a href="#SpringBoot-Filter-Handler-Listener" class="headerlink" title="SpringBoot_Filter_Handler_Listener"></a>SpringBoot_Filter_Handler_Listener</h1><p>SpringBoot 中使用这三个模块，不需要额外引入对应的架包，直接代码编程即可。</p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li>定义代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * * 使用注解标注过滤器 * @WebFilter将一个实现了javax.servlet.Filter接口的类定义为过滤器 * 属性filterName 声明过滤器的名称,可选 * 属性urlPatterns指定要过滤 的URL模式,这是一个数组参数，可以指定多个。也可使用属性value来声明.(指定要过滤的URL模式是必选属性) * * * 如果不使用注解，可以使用如下形式 *   private IDataTopicService iDataTopicService; * *   public SpringBootFilter(IDataTopicService iDataTopicService) { *       this.iDataTopicService = iDataTopicService; *   } */</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName<span class="token operator">=</span><span class="token string">"SpringBootFilter"</span><span class="token punctuation">,</span> urlPatterns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/*"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init :: 过滤器的初始方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doFilter :: 在这里执行过滤器的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy :: 过滤器的销毁方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><ul><li>定义代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootHandler</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandle :: 在请求处理之前进行调用（Controller方法调用之前）这里是拦截的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandle :: 请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion: 在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringBootHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/getHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><ul><li>定义代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sessionCreated :: 监听 Listener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span>HttpSessionEvent se<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sessionDestroyed :: 销毁 Listener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Feign</title>
      <link href="/2022/05/24/springboot-feign/"/>
      <url>/2022/05/24/springboot-feign/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Feign"><a href="#SpringBoot-Feign" class="headerlink" title="SpringBoot_Feign"></a>SpringBoot_Feign</h1><p><strong>对应服务以<code>Nacos</code> 为注册中心</strong></p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>pom.xml 文件中引入对应的配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-dependencies.version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-dependencies.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用spring loadbalancer，弃用ribbon --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot-dependencies.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul><li>配置文件添加配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>provide  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">loadbalancer</span><span class="token punctuation">:</span>      <span class="token key atrule">retry</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 172.16.0.127<span class="token punctuation">:</span><span class="token number">8848</span></code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul><li><code>Controller</code> 层正常定义接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProvideController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义一个方法，对外提供     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getProvide"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getProvide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><ul><li><code>Application</code> 添加注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">// 这个注解在 SpringBoot 2.5.0 以上可以省略</span><span class="token comment" spellcheck="true">//@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootNacosProvideApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootNacosProvideApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><ul><li>pom.xml 文件里添加对应的配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>2020.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-dependencies.version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-dependencies.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SpringCloud --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置中心客户端--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用spring loadbalancer，弃用ribbon --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot-dependencies.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><ul><li>添加对应的配置文件</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">loadbalancer</span><span class="token punctuation">:</span>      <span class="token key atrule">retry</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 172.16.0.127<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">provide</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>provide  <span class="token key atrule">main</span><span class="token punctuation">:</span>    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span>      <span class="token key atrule">com.example.springbootnacosconsumer.client</span><span class="token punctuation">:</span> debug</code></pre><h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><ul><li>定义消费者接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"${spring.provide.url}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProvideService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getProvide"</span><span class="token punctuation">)</span>    String <span class="token function">getProvide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="第四步-1"><a href="#第四步-1" class="headerlink" title="第四步"></a>第四步</h3><ul><li><code>Controller</code> 层直接调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> IProvideService provideService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 远程接口的方法就可以在这里使用了     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getConsumer"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> provideService<span class="token punctuation">.</span><span class="token function">getProvide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><ul><li><code>Application</code> 添加注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">// @EnableFeignClients 这个注解必须要有</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment" spellcheck="true">// 这个注解在 SpringBoot 2.5.0 以上可以省略</span><span class="token comment" spellcheck="true">//@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootNacosConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootNacosConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://rstyro.github.io/blog/2020/10/26/SpringCloud-Alibaba%E4%B9%8BNacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0%E4%B8%8E%E5%A4%9A%E7%A7%8D%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">SpringCloud-Alibaba之Nacos服务注册发现与多种消费方式</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_MybatisPlus_03</title>
      <link href="/2022/05/24/springboot-mybatisplus-03/"/>
      <url>/2022/05/24/springboot-mybatisplus-03/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-MybatisPlus-03"><a href="#SpringBoot-MybatisPlus-03" class="headerlink" title="SpringBoot_MybatisPlus_03"></a>SpringBoot_MybatisPlus_03</h1><p>在使用 SpringBoot 集成 MybatisPlus 的时候，有些注解常常使用到，这些注解要么是 SpringBoot 的，要么是 MybatisPlus 的，一般很难区分开，那么本篇就主要总结一下常使用的注解和使用场景。</p><blockquote><ol><li><strong>@PathVariable</strong>：直接从 URL 中获取参数值，使用 @PathVariable(“ “) 注解,对应的 URL 数据为：<a href="http://localhost:8080/get/1" target="_blank" rel="noopener">http://localhost:8080/get/1</a> 。</li><li><strong>@RequestParam</strong>：通过请求的 URL 参数获取对应的数值，使用 @RequestParam(“ “)注解，对应的 URL 数据为：<a href="http://localhost:8080/get/page?area_mark=AI。这里有一件事需要注意，那就是如果" target="_blank" rel="noopener">http://localhost:8080/get/page?area_mark=AI。这里有一件事需要注意，那就是如果</a> URL 里的参数是 area_mark，那么 @RequestParam(“area_mark”) 这里应该是这样的，也就是说这两块是对应的。</li><li><strong>@component</strong>：实现 bean 的注入。@component （把普通 pojo 实例化到 spring 容器中，相当于配置文件中的 <bean id class>）泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于 @Controller、@Services 等的时候），我们就可以使用 @Component 来标注这个类。</bean></li><li><strong>@PropertySource</strong>：加载指定的属性文件（*.properties）到 Spring 的 Environment 中。可以配合 @Value 和@ConfigurationProperties 使用。@PropertySource 和 @Value组合使用，可以将自定义属性文件中的属性变量值注入到当前类的使用@Value注解的成员变量中。@PropertySource 和 @ConfigurationProperties组合使用，可以将属性文件与一个Java类绑定，将属性文件中的变量值注入到该Java类的成员变量中。</li><li><strong>@Slf4j</strong>：用作日志输出的，一般会在项目每个类的开头加入该注解。相当于：private final Logger logger = LoggerFactory.getLogger(当前类名.class);</li><li><strong>@validated</strong>：校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</li><li><strong>@Configuration</strong>： 用于定义配置类，可替换 xml 配置文件，被注解的类内部包含有一个或多个被 @Bean 注解的方法，这些方法将会被 AnnotationConfigApplicationContext 或 AnnotationConfigWebApplicationContext 类进行扫描，并用于构建 Bean 定义，初始化 Spring 容器。</li><li><strong>@Data</strong>：自动封装类的 set 和 get 方法。</li><li><strong>@AllArgsConstructor</strong>：自动封装了类的有参构造方法。</li><li><strong>@NoArgsConstructor</strong>：自动封装了类的无参构造方法。</li><li><strong>@TableName</strong>：指定对应的类对应 MYSQL 中的那张表。</li><li><strong>@TableId(value = “id”, type = IdType.AUTO)</strong>：指定对应表ID的生成形式。</li><li><strong>@JsonIgnore</strong>：表示当前返回的Json数据，不包涵对应的属性字段。</li><li><strong>@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”, timezone = “GMT+8”)</strong>：返回的的数据，指定对应的数据格式。</li><li><strong>@TableField(exist = false)</strong>：表示对应的字段不是数据库的字段。</li></ol></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_MybatisPlus_02</title>
      <link href="/2022/05/24/springboot-mybatisplus-02/"/>
      <url>/2022/05/24/springboot-mybatisplus-02/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-MybatisPlus-02"><a href="#SpringBoot-MybatisPlus-02" class="headerlink" title="SpringBoot_MybatisPlus_02"></a>SpringBoot_MybatisPlus_02</h1><p>承接第一篇的文章，我们一般在实际的开发中，都会从前端拿数据，而 SpringBoot 和前端做业务交互的时候，一般的数据格式为 Json。</p><p>那么接下来涉及到的：增，删，改，查的业务，都是在模拟前端的数据交互。</p><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><p>使用框架底层新增方法，对应 <code>controller</code> 层代码。</p><p><strong>需要注意的点：</strong></p><ol><li>主键的生成策略自增。<code>@TableId(type = AUTO )</code></li><li>实体类和数据库表关系的映射。<code>@TableName(value = "user")</code></li></ol><p>可以参考的文章：<a href="https://www.cnblogs.com/mark5/p/14268122.html" target="_blank" rel="noopener">链接地址</a></p><ul><li>代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServerImpl userServer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 如果不加这个注解，那么返回的就不是对应后端方法接受的数据</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token comment" spellcheck="true">// 这里模拟前端传过来的数据，默认数据不只一条，那么就放在 LList&lt;Map&lt;String , Object>> listMap 里接受</span>    <span class="token comment" spellcheck="true">// 前端传过来的参数使用 @RequestBody 接受一下</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> Object<span class="token operator">>></span> listMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先判断前端传过来的数据是不是空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listMap <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> listMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 因为数据可能不只一条，所以就要遍历循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token operator">:</span> listMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把数据转成 Json 格式</span>            JSONObject jsonMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把 Json 格式的数据封装成实体类型</span>            User user <span class="token operator">=</span> jsonMap<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 直接调用原生的方法保存</span>            userServer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>Postman</code> 测试情况</li></ul><p><img src="/2022/05/24/springboot-mybatisplus-02/image-20211030213115926.png" alt="image-20211030213115926"></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除数据采用的是逻辑删除，并不是正真意义上的删除。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>新增数据库的字段，并赋值给一个默认值</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">ADD</span> deleted <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul><li>类中添加字段，并添加对应的注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 表示逻辑删除的注解</span><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span></code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul><li>配置项中添加对应的配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> flag  <span class="token comment" spellcheck="true"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span>      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true"># 逻辑已删除值(默认为 1)</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 逻辑未删除值(默认为 0)</span></code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><ul><li><code>controller</code> 层书写对应的代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    userServer<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对应的请求 <code>URL</code> 格式为：<code>http://localhost:8080/delete/1</code> ，注意请求的方式为：<code>delete</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/id"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUserByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    userServer<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对应的请求 <code>URL</code> 格式为：<code>http://localhost:8080/delete/id?id=2</code> ，注意请求的方式为：<code>delete</code>。</p><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p><img src="/2022/05/24/springboot-mybatisplus-02/image-20211024120110627.png" alt="image-20211024120110627"></p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>更新数据操作，有两个点需要注意：</p><ol><li>自动填充字段</li><li>数据库乐观锁的版本号</li></ol><h3 id="自动填充字段"><a href="#自动填充字段" class="headerlink" title="自动填充字段"></a>自动填充字段</h3><h4 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h4><ul><li>在数据库里添加两个时间字段</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span> <span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span> <span class="token punctuation">;</span></code></pre><h4 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h4><ul><li>在实体类中添加对应的字段</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span></code></pre><h4 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h4><ul><li>自定义实现类 <code>MyMetaObjectHandler</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"insert into start ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update into start ......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数据库乐观锁的版本号"><a href="#数据库乐观锁的版本号" class="headerlink" title="数据库乐观锁的版本号"></a>数据库乐观锁的版本号</h3><h4 id="第一步-2"><a href="#第一步-2" class="headerlink" title="第一步"></a>第一步</h4><ul><li>数据库里添加对应的字段</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">ADD</span> version <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h4 id="第二步-2"><a href="#第二步-2" class="headerlink" title="第二步"></a>第二步</h4><ul><li>实体类中添加对应的字段</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Version</span><span class="token keyword">private</span> Integer version<span class="token punctuation">;</span></code></pre><h4 id="第三步-2"><a href="#第三步-2" class="headerlink" title="第三步"></a>第三步</h4><ul><li>自定义 <code>MybatisPlusConfig</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">// 这里扫描注解可以放在配置项中</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.example.springboot_mybatisplus.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="controller-层设计方法"><a href="#controller-层设计方法" class="headerlink" title="controller 层设计方法"></a><code>controller</code> 层设计方法</h3><p>这里没有使用框架提供的更新方法，而是根据实际的业务需要自定义了更新方法。</p><h4 id="service-层接口层方法的声明"><a href="#service-层接口层方法的声明" class="headerlink" title="service 层接口层方法的声明"></a><code>service</code> 层接口层方法的声明</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserServer</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserByIdAndObject</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="service-层方法的实现"><a href="#service-层方法的实现" class="headerlink" title="service 层方法的实现"></a><code>service</code> 层方法的实现</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServerImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>UserMapper<span class="token punctuation">,</span> User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserServer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserByIdAndObject</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="controller-层方法的编写"><a href="#controller-层方法的编写" class="headerlink" title="controller 层方法的编写"></a><code>controller</code> 层方法的编写</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">// 更新方法，根据传进来的 Id 和数据进行匹配更新</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把数据转成 Json 格式</span>    JSONObject jsonMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把 Json 格式的数据封装成实体类型</span>    User user <span class="token operator">=</span> jsonMap<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用自定义的更新方法,但这个更新，对应版本号的值不会改变</span>    <span class="token comment" spellcheck="true">// 版本号的更新仅支持 updateById(id) 与 update(entity, wrapper) 方法</span>    <span class="token comment" spellcheck="true">// 在 update(entity, wrapper) 方法下, wrapper 不能复用!!!</span>    userServer<span class="token punctuation">.</span><span class="token function">updateUserByIdAndObject</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里要更新的数据 Id 是直接通过地址传过来的。对应的测试情况为：</p><p><img src="/2022/05/24/springboot-mybatisplus-02/Users/Micky/Desktop/%E6%8A%80%E6%9C%AF/SpringBoot_%E5%8D%9A%E5%AE%A2/pictures/image-20211031112839734.png" alt="image-20211031112839734"></p><h3 id="需要注意的地方-1"><a href="#需要注意的地方-1" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><h5 id="自动填充字段-1"><a href="#自动填充字段-1" class="headerlink" title="自动填充字段"></a>自动填充字段</h5><p><img src="/2022/05/24/springboot-mybatisplus-02/image-20211024115945302.png" alt="image-20211024115945302"></p><h5 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h5><p><img src="/2022/05/24/springboot-mybatisplus-02/image-20211024120026246.png" alt="image-20211024120026246"></p><p>另外就是：</p><blockquote><ol><li>版本号的更新仅支持 updateById(id) 与 update(entity, wrapper) 方法。</li><li>在 update(entity, wrapper) 方法下, wrapper 不能复用!!!</li></ol></blockquote><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>如果说直接根据对应的 Id 查询到单条数据，那么直接调用框架提供的方法就可以了，而实际的业务场景中，往往需要根据某一个属性去查询对应的信息，而这个属性还不一定是 Id，并且查询的数据往往不止一条，那么这个时候，框架提供的方法就不能满足了。</p><h3 id="自定义属性查询"><a href="#自定义属性查询" class="headerlink" title="自定义属性查询"></a>自定义属性查询</h3><h4 id="第一步-3"><a href="#第一步-3" class="headerlink" title="第一步"></a>第一步</h4><ul><li>在 Mapper 层自定义对应的方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where name = #{name}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="第二步-3"><a href="#第二步-3" class="headerlink" title="第二步"></a>第二步</h4><ul><li>在 service 层接口中声明这个方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="第三步-3"><a href="#第三步-3" class="headerlink" title="第三步"></a>第三步</h4><ul><li>在 service 层实现这个方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="第四步-1"><a href="#第四步-1" class="headerlink" title="第四步"></a>第四步</h4><ul><li>在 controller 层实现调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/name"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">// 采用 @RequestParam 接收参赛</span><span class="token comment" spellcheck="true">// 由于考虑到查询到的数据可能不止一条，数据接收使用 List</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 直接调用对应的方法即可</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> user <span class="token operator">=</span> userServer<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><ul><li>PostMan 的测试</li></ul><p><img src="/2022/05/24/springboot-mybatisplus-02/image-20211031115003448.png" alt="image-20211031115003448"></p><p>除了这种，还有一种需要场景也是很常见的，那就是分页数据的查询。</p><h3 id="分页查询数据-IPage"><a href="#分页查询数据-IPage" class="headerlink" title="分页查询数据_IPage"></a>分页查询数据_IPage</h3><h4 id="第一步-4"><a href="#第一步-4" class="headerlink" title="第一步"></a>第一步</h4><ul><li>在 config 层的 <code>MybatisPlusConfig</code> 实现分页插件</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PaginationInterceptor paginationInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span>    <span class="token comment" spellcheck="true">// paginationInterceptor.setOverflow(false);</span>    <span class="token comment" spellcheck="true">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span>    <span class="token comment" spellcheck="true">// paginationInterceptor.setLimit(500);</span>    <span class="token comment" spellcheck="true">// 开启 count 的 join 优化,只针对部分 left join</span>    paginationInterceptor<span class="token punctuation">.</span><span class="token function">setCountSqlParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsqlParserCountOptimize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> paginationInterceptor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="第二步-4"><a href="#第二步-4" class="headerlink" title="第二步"></a>第二步</h4><ul><li>在 mapper 层定义方法 (注意这里的方法返回值)</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where name = #{name}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> IPage<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByNamePage</span><span class="token punctuation">(</span>Page<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="第三步-4"><a href="#第三步-4" class="headerlink" title="第三步"></a>第三步</h4><ul><li>在 service 的接口中声明方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> IPage<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByNamePage</span><span class="token punctuation">(</span>Page<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> page<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="第四步-2"><a href="#第四步-2" class="headerlink" title="第四步"></a>第四步</h4><ul><li>在 service 层中实现方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> IPage<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByNamePage</span><span class="token punctuation">(</span>Page<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> page<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByNamePage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="第五步-1"><a href="#第五步-1" class="headerlink" title="第五步"></a>第五步</h4><ul><li>在 controller 层中实现调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/page"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">// 注意这里方法的返回值，是采用 IPage&lt;User> 接收的，并指明了类型</span><span class="token keyword">public</span> IPage<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByNamePage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 直接调用对应的方法</span>    IPage<span class="token operator">&lt;</span>User<span class="token operator">></span> userPage <span class="token operator">=</span> userServer<span class="token punctuation">.</span><span class="token function">getUserByNamePage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userPage<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h4><ul><li>测试结果</li></ul><p><img src="/2022/05/24/springboot-mybatisplus-02/image-20211031121452145.png" alt="image-20211031121452145"></p><h4 id="需要注意的地方-2"><a href="#需要注意的地方-2" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h4><blockquote><ol><li>方法的返回值是 <code>IPage&lt;User&gt;</code> 其中 <code>User</code> 是对应的实体类。</li><li>在 Mapper 层传参的时候，需要指定参数在数据库里对应的类型，例如下面这样的一种情况：<img src="/2022/05/24/springboot-mybatisplus-02/E:%5C%E6%96%87%E6%A1%A3%5CSpringBoot_%E5%8D%9A%E5%AE%A2%5Cpictures%5CareaMark.png" alt="img"></li><li>在使用 <code>Page</code> 这个方法的时候，<code>controller</code> 层直接使用即可。<img src="/2022/05/24/springboot-mybatisplus-02/E:%5C%E6%96%87%E6%A1%A3%5CSpringBoot_%E5%8D%9A%E5%AE%A2%5Cpictures%5Cpage" alt="img"></li></ol></blockquote><h3 id="分页查询数据-Pagehelper"><a href="#分页查询数据-Pagehelper" class="headerlink" title="分页查询数据_Pagehelper"></a>分页查询数据_Pagehelper</h3><h4 id="第一步-5"><a href="#第一步-5" class="headerlink" title="第一步"></a>第一步</h4><ul><li>在pom.xml 文件里引入对应的架包</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="第二步-5"><a href="#第二步-5" class="headerlink" title="第二步"></a>第二步</h4><ul><li>在 mapper 层定义方法 (注意这里的方法返回值)</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> <span class="token function">getAllPage</span><span class="token punctuation">(</span>DataArea dataArea<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> PageRequestDataVO<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> page<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="第三步-5"><a href="#第三步-5" class="headerlink" title="第三步"></a>第三步</h4><ul><li>在对应的 xml 层书写对应的 sql</li></ul><pre class=" language-xml"><code class="language-xml">SELECTa.*,CASEWHEN ( a.id IN ( SELECT b.area_id FROM data_topic b WHERE b.deleted = 0 ) ) THEN'1' ELSE '0'END AS 'relation'FROMdata_area aWHEREa.deleted = 0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataArea.name !<span class="token punctuation">=</span> null and dataArea.name !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    AND (a.area_mark LIKE  concat('%', #{dataArea.name}, '%') or a.name  LIKE  concat('%', #{dataArea.name}, '%'))<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page.startTime !<span class="token punctuation">=</span> null and page.startTime !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> and page.endTime !<span class="token punctuation">=</span> null and page.endTime !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    and ( a.update_time  BETWEEN  #{page.startTime} AND #{page.endTime} )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>ORDER BYa.create_time DESC</code></pre><h4 id="第四步-3"><a href="#第四步-3" class="headerlink" title="第四步"></a>第四步</h4><ul><li>在 service 的接口中声明方法</li></ul><pre class=" language-java"><code class="language-java">PageInfo<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> <span class="token function">getAllPage</span><span class="token punctuation">(</span>PageRequestDataVO<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> pageRequestDataVO<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="第五步-2"><a href="#第五步-2" class="headerlink" title="第五步"></a>第五步</h4><ul><li>在 service 层中实现方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> PageInfo<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> <span class="token function">getAllPage</span><span class="token punctuation">(</span>PageRequestDataVO<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> pageRequestDataVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意这里是以对应实体类接收对应的参数</span>    DataArea dataArea <span class="token operator">=</span> pageRequestDataVO<span class="token punctuation">.</span><span class="token function">getObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dataArea<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里封装对应的查询页面参数</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageRequestDataVO<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageRequestDataVO<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> allPage <span class="token operator">=</span> topicAreaMapper<span class="token punctuation">.</span><span class="token function">getAllPage</span><span class="token punctuation">(</span>dataArea<span class="token punctuation">,</span> pageRequestDataVO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里把返回的查询结果，封装成页面数据格式</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>allPage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="第六步-1"><a href="#第六步-1" class="headerlink" title="第六步"></a>第六步</h4><ul><li>在 controller 层中实现调用</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token keyword">public</span> ResponseVoWithData <span class="token function">getAllPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> PageRequestDataVO<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> pageRequestDataVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里注意接收对应查询结果的实体类</span>    PageInfo<span class="token operator">&lt;</span>DataArea<span class="token operator">></span> allPage <span class="token operator">=</span> dataAreaService<span class="token punctuation">.</span><span class="token function">getAllPage</span><span class="token punctuation">(</span>pageRequestDataVO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ResponseVoWithData<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>allPage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h4><ul><li><p>查询结果</p><ul><li>请求参数</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"pageNum"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token property">"obj"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"监控"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"startTime"</span><span class="token operator">:</span> <span class="token string">"2021-12-22"</span><span class="token punctuation">,</span>    <span class="token property">"endTime"</span><span class="token operator">:</span> <span class="token string">"2022-12-25"</span><span class="token punctuation">}</span></code></pre></li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">758</span><span class="token punctuation">,</span>                <span class="token property">"areaMark"</span><span class="token operator">:</span> <span class="token string">"monitor"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"监控"</span><span class="token punctuation">,</span>                <span class="token property">"remark"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>                <span class="token property">"operator"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>                <span class="token property">"updateTime"</span><span class="token operator">:</span> <span class="token string">"2022-01-14 11:33:56"</span><span class="token punctuation">,</span>                <span class="token property">"relation"</span><span class="token operator">:</span> <span class="token string">"1"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"pageNum"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"startRow"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"endRow"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"pages"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"prePage"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"nextPage"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"isFirstPage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"isLastPage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"hasPreviousPage"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"hasNextPage"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"navigatePages"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>        <span class="token property">"navigatepageNums"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token number">1</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"navigateFirstPage"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"navigateLastPage"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_MybatisPlus_01</title>
      <link href="/2022/05/24/springboot-mybatisplus-01/"/>
      <url>/2022/05/24/springboot-mybatisplus-01/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-MybatisPlus-01"><a href="#SpringBoot-MybatisPlus-01" class="headerlink" title="SpringBoot_MybatisPlus_01"></a>SpringBoot_MybatisPlus_01</h1><ul><li>说明</li></ul><p>第一篇主要为入门，这篇文章主要参考 MybatisPlus 官网。地址为：<a href="https://mp.baomidou.com/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B" target="_blank" rel="noopener">MybatisPlus </a></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在数据库中建立指定的表，并添加测试数据。</p><ul><li>SQL </li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>在 SpringBoot 项目中添加指定依赖。</p><ul><li>配置文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- MySQL 数据库依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Mybatisplus 依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>添加对应的数据库配置</p><ul><li>数据库配置</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/testmysql<span class="token punctuation">?</span>useSSL=false<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=GMT%2B8    <span class="token key atrule">username</span><span class="token punctuation">:</span> MyUser    <span class="token key atrule">password</span><span class="token punctuation">:</span> oadat</code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>定义对于的实体类</p><ul><li>实体类的定义</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token comment" spellcheck="true">/** *这个实体类映射的表 */</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 配置主键自增     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO <span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>定义 mapper 层的接口（相当于 Dao 层）</p><ul><li>定义 mapper 层的接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>UserMapper<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>这个时候，其实 <code>UserMapper</code> 接口内是有封装好的方法可以直接使用的，但根据传统的开发经验，肯定还有对应的 <code>service</code> 层封装，所以接下来就在官网给的参考用例基础上多加了一层代码。</strong></p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>定义 <code>service</code> 层的代码</p><ul><li>service 层代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserServer</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServerImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>UserMapper<span class="token punctuation">,</span> User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserServer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这个时候就可以测试 <code>UserServerImpl</code> 类中的方法了。</p><p>不过这个时候有个需要注意的地方，那就是：</p><p><img src="/2022/05/24/springboot-mybatisplus-01/image-20211024115901263.png" alt="image-20211024115901263"></p><p>其实这里就可以直接在 <code>controller</code> 层测试对应的方法了。但这里为了更加贴合实际的业务场景，会在第二篇的文章里做一个详细的介绍。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_01</title>
      <link href="/2022/05/24/springboot-01/"/>
      <url>/2022/05/24/springboot-01/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-01"><a href="#SpringBoot-01" class="headerlink" title="SpringBoot_01"></a>SpringBoot_01</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为 SpringBoot 都是以 Json 数据为交互的，所以在学习 SpringBoot 之前，需要对 Json 的数据格式有一个初步的了解。</p><p>Json 数据格式，包括 JsonObject ，是一种 { } 样式的数据格式。JsonArray 是一种 [ ] 样式的数据格式。两种数据格式都是依托 json 数据而来的，并且可以相互转换。</p><p>同时需要注意的是在 JAVA 中 List 的数据格式也是 [ ]，同理 Map 的数据格式是 { }。</p><h2 id="返回后台数据"><a href="#返回后台数据" class="headerlink" title="返回后台数据"></a>返回后台数据</h2><ul><li>代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当 HTTP 的请求为：<code>http://localhost:8080/hello</code> 的时候，返回的数据是 <code>sayHello</code> 方法中 <code>return</code> 的返回值 <code>hello</code>。</p><h2 id="返回到指定的-HTML"><a href="#返回到指定的-HTML" class="headerlink" title="返回到指定的 HTML"></a>返回到指定的 HTML</h2><ul><li>代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hellos"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hellos"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>配置文件</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>  <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/  <span class="token key atrule">check-template-location</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">suffix</span><span class="token punctuation">:</span>  .html  <span class="token comment" spellcheck="true">#encoding: UTF-8</span>  <span class="token comment" spellcheck="true">#content-type: text/html</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> HTML5</code></pre><p>在指定的目录 <code>templates</code> 下有一个 HTML 文件，文件名为 <code>hellos.html</code> 。这个时候当请求为：<code>http://localhost:8080/hello</code> 返回的就是文件 <code>hellos.html</code> 里面的内容。</p><h2 id="二者差异的说明"><a href="#二者差异的说明" class="headerlink" title="二者差异的说明"></a>二者差异的说明</h2><ul><li>在 SpringBoot 的项目中，如果 <code>controller</code> 层使用注解 <code>@Controller</code> 和 <code>@ResponseBody</code> 那么返回的数据为方法返回的数据类型。（这里 <code>@Controller</code> 和 <code>@ResponseBody</code> 这两个注解相当于 <code>@RestController</code> 这个注解。）</li><li>在 SpringBoot 的项目中，如果 <code>controller</code> 层使用注解 <code>@Controller</code> ，并且返回的方法需要找到指定的前端界面，需要引用架包 <code>spring-boot-starter-thymeleaf</code> ，并在配置文件中指定对应的配置，这个时候 <code>controller</code> 层的方法才会找到对应的前端界面。</li></ul><h2 id="关于注解的说明"><a href="#关于注解的说明" class="headerlink" title="关于注解的说明"></a>关于注解的说明</h2><p>先看一段代码</p><ul><li>代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Book<span class="token operator">>></span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/book/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        books<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">getBookByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> results <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>注解的说明</li></ul><blockquote><ol><li><code>@RestController</code> 将返回的对象数据直接以 Json 的形式写入到 <code>HTTP</code> 的响应（<code>Response</code>）中。</li><li><code>@RequestMapping</code> 指定请求的注解。</li><li><code>@PostMapping</code>实际上就等价于 <code>@RequestMapping(method = RequestMethod.POST)</code>，同样的 <code>@DeleteMapping</code> ,<code>@GetMapping</code>也都一样。</li><li><code>@PathVariable</code> 取url地址中的参数。</li><li><code>@RequestBody</code> 可以将 HttpRequest body 中的 JSON 类型数据反序列化为合适的 Java 类型。</li><li><code>ResponseEntity</code> 表示整个 HTTP Response 状态码，标头和正文内容。我们可以使用它来自定义 HTTP Response 的内容。</li></ol><blockquote><p><strong><code>@RequestBody</code> 和 <code>@RequestParam</code></strong></p><ul><li><code>@RequestBody</code> 主要用来接收前端传递给后端的 Json 字符串中的数据，常使用的请求是 Post 请求。需要注意的是 <code>@RequestBody</code> 接收的请求实体里的数据。</li><li><code>@RequestParam</code>  接收的是参数里的数据，参数可以是元素，数组，集合，对象。</li><li>也就是说如果参数放在请求实体中，<code>application/json</code> 传入后台的话，那么后台要用 <code>@RequestBody</code> 才能接收到，如果不放在请求实体中的话，那么后台接受前台传过来的参数时，要用 <code>@RequestParam</code> 来接收。</li><li>需要注意的是，如果参数设置了 <code>@RequestParam(xxx)</code>，那么前端必须有对应的 <code>xxx</code>名字。否则数据接收不到，请求会报错。</li><li>如果后端参数是一个对象，且该参数是以 <code>@RequestBody</code> 修饰的，那么前端传递 json 参数时，必须满足一下要求：<ol><li>后端 <code>@RequestBody</code> 注解的类在装配到目标类（即 <code>@RequestBody</code> 后面的类）时，会根据 json 字符串中的 key 来匹配对应实体类的属性，如果匹配一致且 json 中的该 key 的值符合实体类的对应属性类型要求，会调用实体类的 setter 方法将值赋值给该属性。</li><li>json 字符中，如果 value 为 “” 的话，后端对应属性如果是 String 类型，那么接收的就是 “”。如果后端属性类型是 Integer，Double 类型，那么接收的就是 null。</li><li>json 字符串如果 value 为 null 的话，后端对应收到的就是 null。</li><li>如果某个参数没有 value 的话，不要在传 json 给后端。</li><li><code>@RequestBody</code> 是通过无参构造器 new 的对象，然后通过 set 方法设置，如果实体类中添加了有参构造器，没有加无参构造器，接收参数时会异常。</li></ol></li><li>例子：</li></ul><p><img src="/2022/05/24/springboot-01/image-20211017130442647.png" alt="image-20211017130442647"></p><p><img src="/2022/05/24/springboot-01/image-20211017130527516.png" alt="image-20211017130527516"></p><p><img src="/2022/05/24/springboot-01/image-20211017130604979.png" alt="image-20211017130604979"></p><p><img src="/2022/05/24/springboot-01/image-20211017131012324.png" alt="image-20211017131012324"></p></blockquote></blockquote><p>更多的注解使用，也会在后续的文章中说明添加。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL_调优</title>
      <link href="/2021/09/02/mysql-diao-you/"/>
      <url>/2021/09/02/mysql-diao-you/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-调优"><a href="#MySQL-调优" class="headerlink" title="MySQL_调优"></a>MySQL_调优</h1><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><ol><li>尽量避免全表扫描，在 Where 和 Order By 涉及到的列上建立索引。</li><li>在经常使用的字段上建立索引。</li><li>索引中不要包含有 null 值的列。</li></ol><h3 id="避免在索引上使用计算"><a href="#避免在索引上使用计算" class="headerlink" title="避免在索引上使用计算"></a>避免在索引上使用计算</h3><p><strong>原因：</strong></p><p>如果索引是计算的一部分，那么查询将不会使用索引，而是全表扫描。</p><h3 id="程序中尽量使用参数化的SQL语句"><a href="#程序中尽量使用参数化的SQL语句" class="headerlink" title="程序中尽量使用参数化的SQL语句"></a>程序中尽量使用参数化的SQL语句</h3><p><strong>原因：</strong></p><ol><li>避免 SQL 注入漏洞攻击。</li><li>数据库在第一次会对参数化的 SQL 进行预编译，这样以后在执行这条 SQL 的时候会直接使用预编译的结果，从而大大提高执行速度。</li></ol><h3 id="用-Where-关键字替换-Having"><a href="#用-Where-关键字替换-Having" class="headerlink" title="用 Where 关键字替换 Having"></a>用 Where 关键字替换 Having</h3><p><strong>原因：</strong></p><p>Having 会检索出所有的结果之后才对结果集进行过滤，而 Where 则是在聚合前筛选。</p><h3 id="使用表的别名"><a href="#使用表的别名" class="headerlink" title="使用表的别名"></a>使用表的别名</h3><p><strong>原因：</strong></p><p>多个表进行链接时，使用表的别名，可以减少解析时间。</p><h3 id="用-Union-All-替换-Union"><a href="#用-Union-All-替换-Union" class="headerlink" title="用 Union All 替换 Union"></a>用 Union All 替换 Union</h3><p><strong>原因：</strong></p><p>使用 Union 关键字进行聚合，即使结果集中不存在重复的记录，也会再次进行合并，然后输出结果排序。</p><h3 id="查询-Select-语句优化"><a href="#查询-Select-语句优化" class="headerlink" title="查询 Select 语句优化"></a>查询 Select 语句优化</h3><ol><li>不要使用 select * from ,用具体的字段代替 * 。</li><li>避免在 Where 子句中进行 null 值判断，因为这将导致数据库放弃使用索引而进行全表扫描。</li><li>如果必须使用 like 语句，请使用 like “aaa%” （会使用索引）样式，因为 like “%aaa%” 样式的不会使用索引。</li><li>不要在列上进行计算，列上进行计算，不会使用索引。</li><li>不要使用 Not In 和 &lt;&gt; 。因为这两个关键字都不会使用索引。可以使用 Not Exists 和 (a &gt; 1 or a &lt; 1)替换。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL教程Vol_006</title>
      <link href="/2021/09/02/mysql-jiao-cheng-vol-006/"/>
      <url>/2021/09/02/mysql-jiao-cheng-vol-006/</url>
      
        <content type="html"><![CDATA[<p>其实在实际的使用过程中会发现，有些时候对于建好的数据库表单需要：</p><ul><li>增加字段</li><li>删除字段</li><li>修改字段</li></ul><p>而这些操作又需要保证不影响原本的表单结构。</p><p>那么接下来就简单学习一下吧！</p><h3 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">table</span><span class="token punctuation">`</span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>col_name<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><code>table</code> 是要添加字段的数据表的表名。</li><li><code>col_name</code> 是要添加的字段的名称。</li><li><code>INT NOT NULL</code> 是表明添加的这个字段的类型是 <code>INT</code> 的数据类型，<code>NOT NULL</code> 表明添加的这个字段不能为空。</li><li>如果添加的是其它的数据类型，只需要把 <code>INT</code> 改成对应的数据类型即可。</li><li>关键字是 <code>ADD</code> 。</li></ol><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">table</span><span class="token punctuation">`</span> <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>col_name<span class="token punctuation">`</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><code>table</code> 是要删除字段的数据表的表名。</li><li><code>col_name</code> 是要删除的字段的名称。</li><li>关键字是 <code>DROP</code> 。</li></ol><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><h4 id="修改字段类型"><a href="#修改字段类型" class="headerlink" title="修改字段类型"></a>修改字段类型</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">table</span><span class="token punctuation">`</span> <span class="token keyword">MODIFY</span> <span class="token punctuation">`</span>field<span class="token punctuation">`</span> NEW<span class="token operator">-</span>FIELD<span class="token operator">-</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><code>table</code> 是要修改字段的数据表的表名。</li><li><code>field</code> 是要修改的字段的名称。</li><li><code>NEW-FIELD-TYPE</code> 要修改的字段的类型。</li><li>关键字是 <code>MODIFY</code> 。</li></ol><h4 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">table</span><span class="token punctuation">`</span> CHANGE <span class="token punctuation">`</span>old_name<span class="token punctuation">`</span> <span class="token punctuation">`</span>new_name<span class="token punctuation">`</span> new_type <span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><code>table</code> 是要修改字段的数据表的表名。</li><li><code>old_name</code> 是要修改的旧字段的名称。</li><li><code>new_name</code> 是要修改的新字段的名称。</li><li><code>new_type</code> 是新的数据类型。</li><li>关键字是 <code>CHANGE</code> 。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL教程Vol_005</title>
      <link href="/2021/09/02/mysql-jiao-cheng-vol-005/"/>
      <url>/2021/09/02/mysql-jiao-cheng-vol-005/</url>
      
        <content type="html"><![CDATA[<h4 id="问题1：构造一个触发器-audit-log，在向-employees-表中插入一条数据的时候，触发插入相关的数据到-film-表中。"><a href="#问题1：构造一个触发器-audit-log，在向-employees-表中插入一条数据的时候，触发插入相关的数据到-film-表中。" class="headerlink" title="问题1：构造一个触发器 audit_log，在向 employees 表中插入一条数据的时候，触发插入相关的数据到 film 表中。"></a>问题1：构造一个触发器 audit_log，在向 employees 表中插入一条数据的时候，触发插入相关的数据到 film 表中。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：构造一个触发器 audit_log，在向 employees 表中插入一条数据的时候，触发插入相关的数据到 film 表中。</p><p><strong>分析后的语句</strong>：在向 employees 表中添加数据的时候，也向表 film 中添加数据。这个同步的动作，有触发器来自动操作。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 向 employees 表中添加数据 </span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 向 film 表中添加数据 </span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> film <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 把这两个动作关联起来？</span><span class="token comment" spellcheck="true">-- 通过触发器来构成？</span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> audit_log <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> employees <span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span>        <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> film    <span class="token keyword">VALUES</span>        <span class="token punctuation">(</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token string">'AA'</span><span class="token punctuation">,</span> <span class="token string">'01AA'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><p>创建触发器的固定语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> <span class="token operator">&lt;</span>触发器名称<span class="token operator">></span> <span class="token operator">&lt;</span>触发时机<span class="token operator">></span> <span class="token operator">&lt;</span>触发事件<span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">FOR EACH ROW</span><span class="token operator">&lt;</span>触发后执行的语句<span class="token operator">></span><span class="token punctuation">;</span></code></pre></li><li><p>就是记住这种通用的语法结构即可。</p></li></ol><h4 id="问题2：删除-salaries-表内-emp-no-重复的记录，只保留最小的-id-对应的记录。"><a href="#问题2：删除-salaries-表内-emp-no-重复的记录，只保留最小的-id-对应的记录。" class="headerlink" title="问题2：删除 salaries 表内 emp_no 重复的记录，只保留最小的 id 对应的记录。"></a>问题2：删除 salaries 表内 emp_no 重复的记录，只保留最小的 id 对应的记录。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：删除 salaries 表内 emp_no 重复的记录，只保留最小的 emp_no  对应的记录。</p><p><strong>分析后的语句</strong>：删除表 salaries 内的数据，数据必须是重复的，条件是只保留最小的 emp_no  对应的记录。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除表 salaries 内的数据</span><span class="token keyword">DELETE</span> <span class="token keyword">from</span> salaries <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 只保留最小的 emp_no 对应的记录？</span><span class="token comment" spellcheck="true">-- 先把最小的 emp_no 的记录的数据给查出来</span><span class="token keyword">select</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries <span class="token number">d</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 这样查出来的数据就一条，显然不满足。</span><span class="token comment" spellcheck="true">-- 那么如果显示多条的最小记录数据？</span><span class="token comment" spellcheck="true">-- 如果查最小的 emp_no 记录，并且以 emp_no 分组，那么数据也就符合条件了。</span><span class="token keyword">select</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries <span class="token number">d</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 拿到了以 emp_no 为分组的全部最小记录数据，保留这些数据即可。</span><span class="token comment" spellcheck="true">-- 而 UPDATE 或 DELETE 中子查询不能为同一张表，所以应该做适当的改造。</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries <span class="token number">d</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">DELETE</span> <span class="token keyword">from</span> salaries <span class="token keyword">where</span> emp_no <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries <span class="token number">d</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>在只查询中最好给别名，否则容易出错。</li></ol><h4 id="问题3：查找排除当前最大、最小-salary-之后的员工的平均工资avg-salary。"><a href="#问题3：查找排除当前最大、最小-salary-之后的员工的平均工资avg-salary。" class="headerlink" title="问题3：查找排除当前最大、最小 salary 之后的员工的平均工资avg_salary。"></a>问题3：查找排除当前最大、最小 salary 之后的员工的平均工资avg_salary。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：查找排除当前最大、最小 salary 之后的员工的平均工资 avg_salary。</p><p><strong>分析后的语句</strong>：找到员工的平均工资，条件是去掉最大值和最小值的员工工资。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找员工的平均工资</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> salary <span class="token keyword">from</span> salaries <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查找工资的最大值</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查找工资的最小值</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 只需要保证要查询的数据条件不在这两个子查询中即可</span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> salary <span class="token keyword">from</span> salaries s <span class="token keyword">where</span> s<span class="token punctuation">.</span>salary <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">.</span>salary <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>其实还是子查询。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL教程Vol_004</title>
      <link href="/2021/09/02/mysql-jiao-cheng-vol-004/"/>
      <url>/2021/09/02/mysql-jiao-cheng-vol-004/</url>
      
        <content type="html"><![CDATA[<p>一直在学习查询，今天看点其它的，就当放松一下了。</p><h4 id="问题1：将-employees-表的所有员工的-last-name-和-first-name-拼接起来作为Name，中间以一个空格区分。"><a href="#问题1：将-employees-表的所有员工的-last-name-和-first-name-拼接起来作为Name，中间以一个空格区分。" class="headerlink" title="问题1：将 employees 表的所有员工的 last_name 和 first_name 拼接起来作为Name，中间以一个空格区分。"></a>问题1：将 employees 表的所有员工的 last_name 和 first_name 拼接起来作为Name，中间以一个空格区分。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：将 employees 表的所有员工的 last_name 和 first_name 拼接起来作为name，中间以一个空格区分。</p><p><strong>分析后的语句</strong>：拼接 last_name 和 first_name ，中间加空格。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 拼接 last_name 和 first_name </span>CONCAT<span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 中间加空格？</span><span class="token comment" spellcheck="true">-- 需要注意的是这里的空格是`' '`这样写的。</span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">select</span> CONCAT<span class="token punctuation">(</span><span class="token number">e</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">)</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> employees <span class="token number">e</span> <span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>SQL 中拼接两个属性字段使用 CONCAT() 关键字。</li><li>空格是 <code>' '</code> 表示。</li></ol><h4 id="问题2：创建一个-actor-name-表，将-actor-表中的所有-first-name以及-last-name-导入改表。"><a href="#问题2：创建一个-actor-name-表，将-actor-表中的所有-first-name以及-last-name-导入改表。" class="headerlink" title="问题2：创建一个 actor_name 表，将 actor 表中的所有 first_name以及 last_name 导入改表。"></a>问题2：创建一个 actor_name 表，将 actor 表中的所有 first_name以及 last_name 导入改表。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：创建一个 actor_name 表，将 actor 表中的所有 first_name以及 last_name 导入改表。</p><p><strong>分析后的语句</strong>：创建一个 actor_name 表，这个表应该有两个属性字段，分别是 first_name 和 last_name ，并且这两个属性字段里需要有值，值来至表 actor 。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建一个 actor_name 表，字段为 last_name 和 first_name </span><span class="token comment" spellcheck="true">-- 然后在把 actor 表里面的这两个字段的值导出来。</span><span class="token comment" spellcheck="true">-- 在把导出的数据导入到新建的 actor_name 表内。</span><span class="token comment" spellcheck="true">-- 感觉有点麻烦 ？</span><span class="token comment" spellcheck="true">-- 能不能简单点 ？</span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">create</span> <span class="token keyword">table</span> actor_name<span class="token keyword">select</span> first_name<span class="token punctuation">,</span>last_name <span class="token keyword">from</span> actor<span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>没什么好说的，格式就是这样的。</li></ol><h4 id="问题3：针对表-actor-结构创建索引-，-对-first-name-创建唯一索引"><a href="#问题3：针对表-actor-结构创建索引-，-对-first-name-创建唯一索引" class="headerlink" title="问题3：针对表 actor 结构创建索引 ， 对 first_name 创建唯一索引"></a>问题3：针对表 actor 结构创建索引 ， 对 first_name 创建唯一索引</h4><p>，对 last_name 创建普通索引。</p><p><strong>分析问题</strong></p><p><strong>原话</strong>：针对表 actor 结构创建索引 ， 对 first_name 创建唯一索引，对 last_name 创建普通索引。</p><p><strong>分析后的语句</strong>：对 first_name 创建唯一索引，对 last_name 创建普通索引。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建唯一索引</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> uniq_idx_firstname <span class="token keyword">ON</span> actor<span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_lastname <span class="token keyword">ON</span> actor<span class="token punctuation">(</span>last_name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>索引：可以简单的理解成是数据库中的一种数据结构，使用索引的目的是为了提高查询速度。</li><li>唯一索引：索引的值必须唯一。</li><li>普通索引：可以相对唯一索引理解，允许有重复的值。</li><li>创建唯一索引的语法：<code>CREATE UNIQUE INDEX &lt;唯一索引值&gt; ON &lt;表名&gt;(列名);</code></li><li>创建普通索引的语法：<code>CREATE INDEX &lt;唯一索引值&gt; ON &lt;表名&gt;(列名);</code></li></ol><h4 id="问题4：针对表-actor-创建视图-，只包含-first-name-和-last-name-，并对这两列重新命名。"><a href="#问题4：针对表-actor-创建视图-，只包含-first-name-和-last-name-，并对这两列重新命名。" class="headerlink" title="问题4：针对表 actor 创建视图 ，只包含 first_name 和 last_name ，并对这两列重新命名。"></a>问题4：针对表 actor 创建视图 ，只包含 first_name 和 last_name ，并对这两列重新命名。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：针对表 actor 创建视图 ，只包含 first_name 和 last_name ，并对这两列重新命名。</p><p><strong>分析后的语句</strong>：创建一个视图，包含 first_name 和 last_name，但名字不是first_name 和 last_name。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建视图</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> actor_view<span class="token punctuation">(</span>first_name_v<span class="token punctuation">,</span>last_name_v<span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">select</span> first_name<span class="token punctuation">,</span>last_name <span class="token keyword">from</span> actor<span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><p>创建视图的语法 :</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> <span class="token operator">&lt;</span>视图名称<span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>视图列名<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>视图列名<span class="token operator">></span>，<span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token operator">&lt;</span><span class="token keyword">select</span> 语句<span class="token operator">></span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="问题5：针对表-salaries-创建-emp-no-的索引-，并使用强制索引查询对应的数据。"><a href="#问题5：针对表-salaries-创建-emp-no-的索引-，并使用强制索引查询对应的数据。" class="headerlink" title="问题5：针对表 salaries 创建 emp_no 的索引  ，并使用强制索引查询对应的数据。"></a>问题5：针对表 salaries 创建 emp_no 的索引  ，并使用强制索引查询对应的数据。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：针对表 salaries 创建 emp_no 的索引  ，并使用强制索引查询对应的数据。</p><p><strong>分析后的语句</strong>：创建 emp_no 的索引  ，然后使用这个索引查询。</p><ul><li>语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建 emp_no 的索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_emp_no <span class="token keyword">ON</span> salaries<span class="token punctuation">(</span>emp_no<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用这个索引强制查询</span><span class="token keyword">FORCE</span> <span class="token keyword">INDEX</span> <span class="token punctuation">(</span>idx_emp_no<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 完整语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salaries <span class="token keyword">FORCE</span> <span class="token keyword">INDEX</span> <span class="token punctuation">(</span>idx_emp_no<span class="token punctuation">)</span></code></pre><p><strong>解释说明</strong></p><ol><li>使用强制索引查询的语法：<code>FORCE INDEX (&lt;索引名&gt;)</code></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL教程Vol_003</title>
      <link href="/2021/09/02/mysql-jiao-cheng-vol-003/"/>
      <url>/2021/09/02/mysql-jiao-cheng-vol-003/</url>
      
        <content type="html"><![CDATA[<h4 id="问题-01：获取所有部门中当前员工薪水最高的相关信息，给出dept-no-emp-no-以及其对应的-salary。"><a href="#问题-01：获取所有部门中当前员工薪水最高的相关信息，给出dept-no-emp-no-以及其对应的-salary。" class="headerlink" title="问题_01：获取所有部门中当前员工薪水最高的相关信息，给出dept_no , emp_no 以及其对应的 salary。"></a>问题_01：获取所有部门中当前员工薪水最高的相关信息，给出dept_no , emp_no 以及其对应的 salary。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：获取所有部门中当前员工薪水最高的相关信息，给出 dept_no,<br>emp_no 以及其对应的 salary。</p><p><strong>分析后的语句</strong>：查找员工的dept_no，emp_no 和 salary，条件是所有部门，薪水最高。</p><ul><li>查询语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找员工的 dept_no，emp_no 和 salary</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>dept_no <span class="token keyword">from</span> dept_emp <span class="token number">a</span> <span class="token keyword">select</span> <span class="token number">b</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries <span class="token number">b</span><span class="token comment" spellcheck="true">-- 如何把这两张表给关联起来？</span><span class="token comment" spellcheck="true">-- 寻找这两张表的关系。</span><span class="token comment" spellcheck="true">-- 可以通过建表语句，寻找表结构信息。</span><span class="token comment" spellcheck="true">-- 发现在这两张表中存在 `a.emp_no = b.emp_no` 这样的一种关联</span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>dept_no<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>emp_no <span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> dept_emp <span class="token number">a</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> salaries <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>emp_no <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>emp_no <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> dept_no <span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>这里使用 <code>GROUP BY</code> 分组语句，将每个部门分成一个组，然后在使用<code>max() 函数</code>查出每个组内薪水最高的。</li></ol><h4 id="问题-02：从-titles-表获取按照-title-进行分组，每组个数大于等于-2，"><a href="#问题-02：从-titles-表获取按照-title-进行分组，每组个数大于等于-2，" class="headerlink" title="问题_02：从 titles 表获取按照 title 进行分组，每组个数大于等于 2，"></a>问题_02：从 titles 表获取按照 title 进行分组，每组个数大于等于 2，</h4><p>给出 title 以及对应的数目 t。</p><p><strong>分析问题</strong></p><p><strong>原话</strong>：从 titles 表获取按照 title 进行分组，每组个数大于等于 2，<br>给出 title 以及对应的数目 t。</p><p><strong>分析后的语句</strong>：查找 title 和 title 的数目，条件 title 的数目大于 2 。</p><ul><li>查询语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找 title 和 title 的数目</span><span class="token keyword">select</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token keyword">as</span> ti <span class="token keyword">from</span> titles<span class="token comment" spellcheck="true">-- 如何分组？</span><span class="token comment" spellcheck="true">-- 使用 GROUP BY 关键字</span><span class="token comment" spellcheck="true">-- 如何判断分组后的数目大于 2 ？</span><span class="token comment" spellcheck="true">-- 如何在使用 GROUP BY 关键字分组后判断分组数目大于 2 ？</span><span class="token comment" spellcheck="true">-- 使用关键字 HAVING </span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">select</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token keyword">as</span> ti <span class="token keyword">from</span> titles t <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> t<span class="token punctuation">.</span>title <span class="token keyword">HAVING</span> ti <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><code>GROUP BY HAVING</code>  这是采用 <code>GROUP BY</code> 分组后在进行判断的完整语法结构。</li><li>其中 <code>HAVING</code> 必须在 <code>GROUP BY</code> 之后使用。</li><li>有 <code>GROUP BY</code> 才能使用 <code>HAVING</code> 。<code>HAVING</code> 不能单独使用。</li></ol><h4 id="问题-03：查找-employees-表所有-emp-no-为奇数，且-last-name-不为Mary-的员工信息，并按照-hire-date-逆序排列。"><a href="#问题-03：查找-employees-表所有-emp-no-为奇数，且-last-name-不为Mary-的员工信息，并按照-hire-date-逆序排列。" class="headerlink" title="问题_03：查找 employees 表所有 emp_no 为奇数，且 last_name 不为Mary 的员工信息，并按照 hire_date 逆序排列。"></a>问题_03：查找 employees 表所有 emp_no 为奇数，且 last_name 不为Mary 的员工信息，并按照 hire_date 逆序排列。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：查找 employees 表所有 emp_no 为奇数，且 last_name 不为Mary 的员工信息，并按照 hire_date 逆序排列。</p><p><strong>分析后的语句</strong>：查找员工信息从 employees 表，条件是 emp_no  为奇数，last_name  不等于 Mary ，并按照 hire_date 逆序排序。</p><ul><li>查询语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找查找员工信息从 employees 表</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token number">e</span><span class="token comment" spellcheck="true">-- emp_no  为奇数？</span><span class="token comment" spellcheck="true">-- 结合数学上求奇数的思路，对2取余数为1。</span><span class="token comment" spellcheck="true">-- 那是否可以设计成 emp_no % 2 = 1 ？</span><span class="token comment" spellcheck="true">-- last_name  不等于 Mary ？</span><span class="token comment" spellcheck="true">-- ‘不等于’ 。采用操作符 '!=' 。</span><span class="token comment" spellcheck="true">-- hire_date 逆序排序 ?</span><span class="token comment" spellcheck="true">-- ORDER BY DESC 关键字。</span><span class="token comment" spellcheck="true">--完整的语句：</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token number">e</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>emp_no <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">e</span><span class="token punctuation">.</span>last_name <span class="token operator">!=</span> <span class="token string">'Mary '</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">e</span><span class="token punctuation">.</span>hire_date <span class="token keyword">DESC</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>不等于 <code>!=</code> 一定要用这样的格式，中间不能有空格。写成 <code>! =</code> 这样是不正确的。</li></ol><h4 id="问题-04：获取薪水第二多的员工的-emp-no-以及其对应的薪水-salary。"><a href="#问题-04：获取薪水第二多的员工的-emp-no-以及其对应的薪水-salary。" class="headerlink" title="问题_04：获取薪水第二多的员工的 emp_no 以及其对应的薪水 salary。"></a>问题_04：获取薪水第二多的员工的 emp_no 以及其对应的薪水 salary。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：获取薪水第二多的员工的 emp_no 以及其对应的薪水 salary。</p><p><strong>分析后的语句</strong>：查找员工的 emp_no 和 salary ，条件是 salary 为第二。</p><ul><li>查询语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找员工的 emp_no 和 salary</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> s<span class="token punctuation">.</span>salary <span class="token keyword">from</span> salaries s<span class="token comment" spellcheck="true">-- salary 为第二？</span><span class="token comment" spellcheck="true">-- 平时遇到的都是最大或者最小，比最大的小一点点怎么判断设计？</span><span class="token comment" spellcheck="true">-- 先看如何取最大值，一般使用 max(salary)。</span><span class="token comment" spellcheck="true">-- 如果把最大值取出来，’SELECT MAX(salary) from salaries‘。</span><span class="token comment" spellcheck="true">-- 工资表剩余的工资都是小于这个最大值的数据，只是这个时候没显示。</span><span class="token comment" spellcheck="true">-- 如何让这些数据显示 ？</span><span class="token comment" spellcheck="true">-- 先添加条件判断 ’s.salary &lt; (SELECT MAX(salary) from salaries)‘。那么前面的查询就简单了。’select * from salaries s where s.salary &lt; (SELECT MAX(salary) from salaries)‘。</span><span class="token comment" spellcheck="true">-- 然后在从这些比最大值小的数据中取最大值，那么这个第二次取到的最大值不就是第二的数据了。只需要把上面的语句改成 ’select MAX(salary) from salaries s where s.salary &lt; (SELECT MAX(salary) from salaries)‘ 即可。</span><span class="token comment" spellcheck="true">-- 整个查询的条件是 salary 为第二，而第二的数据也已经查出来了，那么只需要在条件判断里设计成 salary 等于刚刚查出来的数据即可。</span><span class="token comment" spellcheck="true">-- 完整的语句：</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> s<span class="token punctuation">.</span>salary <span class="token keyword">from</span> salaries s <span class="token keyword">where</span> s<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries s <span class="token keyword">where</span> s<span class="token punctuation">.</span>salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> salaries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>这里的难点其实就是如何找出第二的数据。认真看上面的分析思路，会发现涉及到了很对的子查询。其实对子查询而言，就从最里层开始分析，在复杂的子查询也是有最基础的查询拼接而成的。</li><li>找到最基础的查询，先把满足条件的一部分数据查询出来。</li><li>在找到各个查询的关联，到这一步问题基本上就解决的差不多了。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL教程Vol_002</title>
      <link href="/2021/09/02/mysql-jiao-cheng-vol-002/"/>
      <url>/2021/09/02/mysql-jiao-cheng-vol-002/</url>
      
        <content type="html"><![CDATA[<p>学习知识最好的方式是什么？</p><p>那就是用起来，只有用起来，知识才能是自己的。至于用的好不好，精不精，那不重要。</p><p>原因很简单：时间跨度拉长，熟练程度自然而然就上去了。所以这不是问题。</p><p>而学习技术最好的使用方式就是去解决问题。这里也就是上面说的“先用起来”。解决不同场景下的问题，技术能力慢慢就积累上去了。</p><p>那。。。我们下面直接看问题。</p><p>接下来我们将通过不同场景下的问题，一遍一遍去学习 <code>Mysql</code> 数据库的查询语句。至于中间出现的 ‘建表语句’, ‘插入语句’ 不是这里的重点，切记。</p><h4 id="问题-01：查找入职员工的入职时间排名倒数第三的员工所有信息。"><a href="#问题-01：查找入职员工的入职时间排名倒数第三的员工所有信息。" class="headerlink" title="问题_01：查找入职员工的入职时间排名倒数第三的员工所有信息。"></a>问题_01：查找入职员工的入职时间排名倒数第三的员工所有信息。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：查找职员工的入职时间排名倒数第三的员工所有信息。</p><p><strong>分析后的语句</strong>：查找员工信息，条件是入职时间排名倒数第三。</p><ul><li>查询语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查找员工信息，根据入职时间 </span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees  <span class="token keyword">where</span> hire_date <span class="token operator">=</span> <span class="token comment" spellcheck="true">--排名倒数第三 </span><span class="token keyword">select</span> <span class="token punctuation">(</span>?<span class="token punctuation">)</span> <span class="token keyword">from</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hire_date <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true">--怎么把这两条语句关联起来？</span><span class="token comment" spellcheck="true">--‘？’ 应该是什么字段？</span><span class="token comment" spellcheck="true">--根据第一条语句的条件‘入职时间’来判断，‘？’这个字段应该也是入职时间。</span><span class="token comment" spellcheck="true">--完整的语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> hire_date <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">DISTINCT</span> hire_date <span class="token keyword">from</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hire_date <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li>通过分析问题的思路可以知道，这是一个典型的套用‘子查询’处理的方式。所谓的‘子查询’的意思就是：先把复杂的问题给分解成一个一个小的问题，先把小的问题给解决了，然后在找各个小问题之前的联系，思路就是上面的分析过程。</li><li><code>DISTINCT</code> 这个关键字是‘去除重复的数据’。例如你查出来的字段有两条，数值都是 <code>1</code>，那么加上这个关键字后就只显示一条。</li><li><code>ORDER BY hire_date DESC</code>  是根据对应的字段 <code>hire_date</code> 降序排序。同理 <code>ORDER BY hire_date ASC</code></li><li><code>LIMIT</code> 这个关键字是限制显示条数。<code>LIMIT 2,1</code> 的意思是从第二条开始，查询一条数据。这里需要注意的是开始字段是从零开始的。即 <code>0,1,2,3</code>。</li></ol><p><strong>对于以上关键字的使用，记住通用的使用规则就可以了。</strong></p><h4 id="问题-02：查找所有已经分配部门的员工的-last-name-和-first-name。"><a href="#问题-02：查找所有已经分配部门的员工的-last-name-和-first-name。" class="headerlink" title="问题_02：查找所有已经分配部门的员工的 last_name 和 first_name。"></a>问题_02：查找所有已经分配部门的员工的 last_name 和 first_name。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：查找所有已经分配部门的员工的 last_name 和 first_name 。</p><p><strong>分析后的语句</strong>：查找员工的last_name 和 first_name，条件是已经分配了部门的员工。（那就应该有未分配部门的员工）</p><ul><li>查询语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查找员工的last_name 和 first_name</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>dept_no <span class="token keyword">from</span> employees <span class="token number">e</span><span class="token comment" spellcheck="true">--已经分配了部门的员工（那就应该有未分配部门的员工）</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span>dept_no <span class="token keyword">from</span> dept_emp <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>dept_no <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--如何把这两张表给关联起来？</span><span class="token comment" spellcheck="true">--寻找这两张表的关系。</span><span class="token comment" spellcheck="true">--可以通过建表语句，寻找表结构信息。</span><span class="token comment" spellcheck="true">--发现在这两张表中存在 `e.emp_no = d.emp_no` 这样的一种关联</span><span class="token comment" spellcheck="true">--完整的语句：</span><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>dept_no <span class="token keyword">from</span> employees <span class="token number">e</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept_emp <span class="token number">d</span> <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span>emp_no <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>emp_no <span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>dept_no <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p><strong>解释说明</strong></p><ol><li><code>LEFT JOIN ON</code> 是表与表关联的语句。可以理解成把 <code>employees</code> 和 <code>dept_emp</code> 这两张表给关联起来，而关联的条件就是 <code>e.emp_no = d.emp_no</code> 。并且查询出来的结果包含左表 <code>employees</code>  的所有信息。（本来两个表关系查询，那么最后查出来的数据应该是两个表中都共有的，但采用 <code>LEFT JOIN ON</code> 关联后，如果左表 <code>employees</code> 中有部分数据是右表 <code>dept_emp</code> 没有的，那么也会显示出来。）同理 <code>RIGHT JOIN ON</code> 是以右边的表为准的；<code>INNER JOIN ON</code> 只能查出来两张表共有的数据。</li></ol><h4 id="问题-03-查找所有员工当前的薪水-salary-情况，对于相同的薪水只显示一次-并按照逆序显示。"><a href="#问题-03-查找所有员工当前的薪水-salary-情况，对于相同的薪水只显示一次-并按照逆序显示。" class="headerlink" title="问题_03:查找所有员工当前的薪水 salary 情况，对于相同的薪水只显示一次,并按照逆序显示。"></a>问题_03:查找所有员工当前的薪水 salary 情况，对于相同的薪水只显示一次,并按照逆序显示。</h4><p><strong>分析问题</strong></p><p><strong>原话</strong>：查找所有员工当前的薪水 salary 情况，对于相同的薪水只显示一次,并按照逆序显示 。</p><p><strong>分析后的语句</strong>：查找员工的薪水 salary ，条件是相同的薪水只显示一次，并按照逆序显示。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查找员工的薪水 salary </span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>salary <span class="token keyword">from</span> salaries <span class="token number">a</span><span class="token comment" spellcheck="true">--相同的薪水只显示一次？</span><span class="token comment" spellcheck="true">--这个思路有两个点，一个点是上面之前提到的 `DISTINCT` 这个关键字。</span><span class="token comment" spellcheck="true">--另外一个就是 采用 `GROUP BY` 分组，把相同的薪水分到同一个组内。</span><span class="token comment" spellcheck="true">--按照逆序显示。这个之前上文已经提到了，使用 `ORDER BY DESC`。</span><span class="token comment" spellcheck="true">--完整的语句：</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>salary <span class="token keyword">from</span> salaries <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>to_date <span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>salary <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>salary <span class="token keyword">DESC</span><span class="token punctuation">;</span> </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL教程Vol_001</title>
      <link href="/2021/09/02/mysql-jiao-cheng-vol-001/"/>
      <url>/2021/09/02/mysql-jiao-cheng-vol-001/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>这是一部简洁的 <code>Mysql</code> 教程。</p><p>我们在一开始就默认你已经在本地安装好了 <code>Mysql</code> 服务，无论是 <code>Windowns</code> 系统还是 <code>Linux</code> 系统，并要开始学习。</p><p>如果你还没有安装，网上有很多详细的教程，根据教程安装即可，很快的，不会耽误你很多时间。</p><p>如果你使用的是 <code>Windowns</code> 系统，那么这里推荐你使用 <code>Navicat</code> 这个客户端。</p><p>如果你使用的是 <code>Linux</code> 系统，那么直接使用 <code>Linux</code> 系统自带的命令行界面操作即可。</p><p>好了，这里就是你前期将要准备的，很简单的内容。</p><p>是不是很简洁？</p><h1 id="课程说明"><a href="#课程说明" class="headerlink" title="课程说明"></a>课程说明</h1><p>在即将开始的教程里，我们将省去啰里啰嗦的理论，直接上手使用。因为无论是技术还是工具只有先使用起来，才能慢慢明白一些理论上的东西，而不是。。。你懂的。</p><p>这里就是我们说的简洁。</p><p>没有难懂理论，直接从使用开始。当然那些晦涩的理论并不代表它不重要，那些被屏蔽的知识，完全可以在后续工作中遇到了在学习。理论上除非是专门从事数据库工作，否则即使你工作已经三年，可能还是遇不到。</p><p>既然如此，为什么一开始，就要被那些理论给难住和吓到呢！</p><p>在你开始下面的教程学习之前，我们希望你能够明白以下的几个点：</p><ol><li>对于基本的东西还是需要记忆的，例如最基本建表语句，查询语句等。</li><li>很多东西，第一次记住了，过不多久就忘了很正常，使用的多了自然就明白了。</li><li>本教程在后面将涉及大量的 <code>SQL</code> 查询操作，那是因为这块比较常用，并且变化形式也多。而建表，删除，掌握最基本的就可以了。</li></ol><p>好了，让我们开始吧！</p><p><strong>我们默认使用的 <code>Mysql</code> 服务安装在了 <code>Windows</code> 系统中，并且使用 <code>Navicate</code>  作为连接工具。</strong></p><h1 id="建数据库"><a href="#建数据库" class="headerlink" title="建数据库"></a>建数据库</h1><ul><li>建表语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span><span class="token keyword">IF</span>    <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>db_name<span class="token punctuation">`</span> <span class="token keyword">DEFAULT</span> CHARACTER     <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_unicode_ci<span class="token punctuation">;</span></code></pre><p>执行上面的语句，你就建好了一个数据库名为 <code>db_name</code> 数据库，当然这个名字你可以修改成任何你喜欢的，不过我们还是建议你起的简单点。</p><p>上面就是简单的建表语句，记住就可以了。需要你修改的就是 <code>db_name</code> 的名字。这里先不要有太多的疑问，我们抓紧往下走。这里不是重点。</p><h1 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h1><ul><li>建表语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span></code></pre><p>执行上面的语句，你就建好了一个表名为 <code>table_name</code> 数据库表，当然这个名字你可以修改成任何你喜欢的。需要注意的是这一步的操作，需要在刚刚新建的数据库 <code>db_name</code> 里去执行。</p><p>这里我来解释一下这条语句：</p><p>你创建了一个表名为 <code>table_name</code> 的数据库表，它里面有两个属性，一个是 <code>id</code> 它是整数类型，也就是说可以填入：<code>1</code> , <code>2</code> , <code>3</code> 这些数字；另外一个属性是 <code>name</code> ,也就是说你可以填入 “张三” , “李四” 这样的字符; <code>PRIMARY KEY (</code>id<code>)</code> 的意思是指定 <code>id</code> 为主键，也就是后面插入数据的时候 <code>id</code> 的值必须唯一。</p><p>以上这些是了解，那么还是老规矩，先记住这条建表语句。</p><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><ul><li>插入语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行上面的语句后，你就在自己新建的表 <code>table_name</code> 里添加了一条数据。</p><p>这里需要强调的是 表名后面括号里的属性 <code>(id,name)</code> 需要和 <code>VALUSE</code> 后面的字段一一对应。否则的话，那数据不就不匹配了。当然了，你也可以只指定一个属性，插入一个值也是可以的。</p><h1 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h1><ul><li>查询语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name</code></pre><p>执行上面的语句，你就能查到自己刚刚在数据库表 <code>table_name</code> 插入的全部数据了。</p><p>如果你想查部分的数据那也是可以的，不过由于查询的语句变换的形式比较多，这里我们不做详细的说明了，接下来的内容会涉及到。</p><h1 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h1><ul><li>删除语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">01</span><span class="token punctuation">;</span></code></pre><p>就这样，你把刚刚插入的数据给删除了。当然你也可以通过另外一个属性删除，那么只需要指定 <code>WHERE name= 'AA'</code> 如下的形式就可以了。</p><h1 id="休息中。。。"><a href="#休息中。。。" class="headerlink" title="休息中。。。"></a>休息中。。。</h1><p>好了，你已经学会了，成就大师级的，能力杠杠的。</p><p>哈哈哈。。。</p><p>上面的五条语句，就是最基本的 <code>Mysql</code> 操作语句，这里需要你记住上面五条语句。以后任何形式的变化，你都可以不怕了，世界任你行。你行你就上。</p><p>记住，一定要记住。</p><p>接下来我们将开始学习查询语句。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL教程Vol_000</title>
      <link href="/2021/09/02/mysql-jiao-cheng-vol-000/"/>
      <url>/2021/09/02/mysql-jiao-cheng-vol-000/</url>
      
        <content type="html"><![CDATA[<h1 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h1><h2 id="建表语句-01"><a href="#建表语句-01" class="headerlink" title="建表语句_01"></a>建表语句_01</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>brith_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>gender<span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> employees <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> brith_date<span class="token punctuation">,</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span>hire_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'AA'</span><span class="token punctuation">,</span><span class="token string">'QQ'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> employees <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> brith_date<span class="token punctuation">,</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span>hire_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'BB'</span><span class="token punctuation">,</span><span class="token string">'WW'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> employees <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> brith_date<span class="token punctuation">,</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span>hire_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'CC'</span><span class="token punctuation">,</span><span class="token string">'EE'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-02"><a href="#建表语句-02" class="headerlink" title="建表语句_02"></a>建表语句_02</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept_emp <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> dept_no<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept_emp <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> dept_no<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token string">'02'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept_emp <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> dept_no<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-03"><a href="#建表语句-03" class="headerlink" title="建表语句_03"></a>建表语句_03</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> salaries <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> salary<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> salaries <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> salary<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> salaries <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> salary<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-04"><a href="#建表语句-04" class="headerlink" title="建表语句_04"></a>建表语句_04</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>dept_manager<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept_manager <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> dept_no<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept_manager <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> dept_no<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token string">'02'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> dept_manager <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> dept_no<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-05"><a href="#建表语句-05" class="headerlink" title="建表语句_05"></a>建表语句_05</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>titles<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> titles <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> title<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> titles <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> title<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token string">'02'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> titles <span class="token punctuation">(</span>emp_no<span class="token punctuation">,</span> title<span class="token punctuation">,</span>from_date<span class="token punctuation">,</span>to_date<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-06"><a href="#建表语句-06" class="headerlink" title="建表语句_06"></a>建表语句_06</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>film<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>filmid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>description<span class="token punctuation">`</span> <span class="token keyword">text</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>filmid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> film <span class="token punctuation">(</span>filmid<span class="token punctuation">,</span> title<span class="token punctuation">,</span>description<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"01AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> film <span class="token punctuation">(</span>filmid<span class="token punctuation">,</span> title<span class="token punctuation">,</span>description<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token string">"02BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> film <span class="token punctuation">(</span>filmid<span class="token punctuation">,</span> title<span class="token punctuation">,</span>description<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"03CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-07"><a href="#建表语句-07" class="headerlink" title="建表语句_07"></a>建表语句_07</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>category<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>lastupdate<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> category <span class="token punctuation">(</span>categoryid<span class="token punctuation">,</span> name<span class="token punctuation">,</span>lastupdate<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> category <span class="token punctuation">(</span>categoryid<span class="token punctuation">,</span> name<span class="token punctuation">,</span>lastupdate<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> category <span class="token punctuation">(</span>categoryid<span class="token punctuation">,</span> name<span class="token punctuation">,</span>lastupdate<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">3</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-08"><a href="#建表语句-08" class="headerlink" title="建表语句_08"></a>建表语句_08</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>film_category<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>filmid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>lastupdate<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。</span><span class="token keyword">insert</span> <span class="token keyword">into</span> film_category <span class="token punctuation">(</span>filmid<span class="token punctuation">,</span> categoryid<span class="token punctuation">,</span>lastupdate<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">1</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> film_category <span class="token punctuation">(</span>filmid<span class="token punctuation">,</span> categoryid<span class="token punctuation">,</span>lastupdate<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token string">'02'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">2</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> film_category <span class="token punctuation">(</span>filmid<span class="token punctuation">,</span> categoryid<span class="token punctuation">,</span>lastupdate<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>INTERVAL <span class="token number">3</span> DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建表语句-09"><a href="#建表语句-09" class="headerlink" title="建表语句_09"></a>建表语句_09</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>department<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--这里插入语句只给出三条实例，多条数据的插入同理。insert into department (dept_no, dept_name) values (01,'01');insert into department (dept_no, dept_name) values (02,'02');insert into department (dept_no, dept_name) values (03,'03');</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis_基础知识</title>
      <link href="/2021/09/02/redis-ji-chu-zhi-shi/"/>
      <url>/2021/09/02/redis-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-基础知识"><a href="#Redis-基础知识" class="headerlink" title="Redis 基础知识"></a>Redis 基础知识</h1><h2 id="Redis-基础数据结构"><a href="#Redis-基础数据结构" class="headerlink" title="Redis 基础数据结构"></a>Redis 基础数据结构</h2><p><strong>string</strong></p><ol><li>使用场景</li></ol><p>存储 key-value 键值对。</p><ol><li>常用命令</li></ol><pre class=" language-shell"><code class="language-shell">set   [key]  [value]   给指定key设置值（set 可覆盖老的值）get  [key]   获取指定key 的值del  [key]   删除指定keyexists  [key]  判断是否存在指定keymset  [key1]  [value1]  [key2]  [value2] ...... 批量存键值对mget  [key1]  [key2] ......   批量取keyexpire [key]  [time]    给指定key 设置过期时间  单位秒setex    [key]  [time]  [value]  等价于 set + expire 命令组合setnx  [key]  [value]   如果key不存在则set 创建，否则返回0incr   [key]           如果value为整数 可用 incr命令每次自增1incrby  [key] [number]  使用incrby命令对整数值 进行增加 number</code></pre><p><strong>list</strong></p><ol><li>使用场景</li></ol><p>消息队列。</p><ol><li>常用命令</li></ol><pre class=" language-shell"><code class="language-shell">rpush  [key] [value1] [value2] ......    链表右侧插入rpop    [key]  移除右侧列表头元素，并返回该元素lpop   [key]    移除左侧列表头元素，并返回该元素llen  [key]     返回该列表的元素个数lrem [key] [count] [value]  删除列表中与value相等的元素，count是删除的个数。 count>0 表示从左侧开始查找，删除count个元素，count<0 表示从右侧开始查找，删除count个相同元素，count=0 表示删除全部相同的元素(PS:   index 代表元素下标，index 可以为负数， index= 表示倒数第一个元素，同理 index=-2 表示倒数第二 个元素。)lindex [key] [index]  获取list指定下标的元素 （需要遍历，时间复杂度为O(n)）lrange [key]  [start_index] [end_index]   获取list 区间内的所有元素 （时间复杂度为 O（n））ltrim  [key]  [start_index] [end_index]   保留区间内的元素，其他元素删除（时间复杂度为 O（n））</code></pre><p><strong>hash</strong></p><ol><li>使用场景</li></ol><p>系统对象的存储。</p><ol><li>常用命令</li></ol><pre class=" language-shell"><code class="language-shell">hset  [key]  [field] [value]    新建字段信息hget  [key]  [field]    获取字段信息hdel [key] [field]  删除字段hlen  [key]   保存的字段个数hgetall  [key]  获取指定key 字典里的所有字段和值 （字段信息过多,会导致慢查询 慎用：亲身经历 曾经用过这个这个指令导致线上服务故障）hmset  [key]  [field1] [value1] [field2] [value2] ......   批量创建hincr  [key] [field]   对字段值自增hincrby [key] [field] [number] 对字段值增加number</code></pre><p><strong>set</strong></p><ol><li>使用场景</li></ol><p>需要存放的数据不能重复。</p><ol><li>常用命令</li></ol><pre class=" language-shell"><code class="language-shell">sadd  [key]  [value]  向指定key的set中添加元素smembers [key]    获取指定key 集合中的所有元素sismember [key] [value]   判断集合中是否存在某个valuescard [key]    获取集合的长度spop  [key]   弹出一个元素srem [key] [value]  删除指定元素</code></pre><p><strong>zset</strong></p><ol><li>使用场景</li></ol><p>需要对数据根据某个权重进行排序的场景。</p><ol><li>常用命令</li></ol><pre class=" language-shell"><code class="language-shell">zadd [key] [score] [value] 向指定key的集合中增加元素zrange [key] [start_index] [end_index] 获取下标范围内的元素列表，按score 排序输出zrevrange [key] [start_index] [end_index]  获取范围内的元素列表 ，按score排序 逆序输出zcard [key]  获取集合列表的元素个数zrank [key] [value]  获取元素再集合中的排名zrangebyscore [key] [score1] [score2]  输出score范围内的元素列表zrem [key] [value]  删除元素zscore [key] [value] 获取元素的score</code></pre><h2 id="Redis-设置过期时间"><a href="#Redis-设置过期时间" class="headerlink" title="Redis 设置过期时间"></a>Redis 设置过期时间</h2><p>设置过期时间：Expire 。</p><p>移除过期时间：Persist。</p><p>过期键删除策略：</p><ol><li>立即删除。设置键的过期时间时，创建一个回调事件，当过期时间到达，有回调事件删除。</li><li>惰性删除。每次从 Dict 字典按 Key 取值时，先检查 Key 是否已经过期，如果过期了在删除它。</li><li>定时删除。每隔一段时间对 Expires 字典进行检查，删除里面的过期键。</li></ol><p>实际使用为：惰性删除 + 定期删除策略。</p><h2 id="Redis-内存淘汰策略"><a href="#Redis-内存淘汰策略" class="headerlink" title="Redis 内存淘汰策略"></a>Redis 内存淘汰策略</h2><ol><li>从已设置过期时间的数据集中选择最近最少使用的数据淘汰。</li><li>从已设置过期时间的数据集中选择将要过期的数据淘汰。</li><li>从已设置过期时间的数据集中选择任意数据淘汰。</li><li>移除最近最少使用的 Key 。</li><li>从数据集中任意选择数据集淘汰。</li></ol><h2 id="Redis-常见的三种问题"><a href="#Redis-常见的三种问题" class="headerlink" title="Redis 常见的三种问题"></a>Redis 常见的三种问题</h2><ul><li>缓存穿透</li></ul><p>用户查询数据库不存在的数据，数据也不会在缓存中存储。当用户发起请求，它永远不会访问缓存，数据库压力就会增大。</p><p><strong>解决方案：</strong></p><ol><li>参数检验，上层拦截。</li><li>查询结果为空也做缓存，但有效期设置较短，避免影响正常数据的使用。</li></ol><ul><li>缓存击穿</li></ul><p>热点数据存储到期，多个线程同时请求热点数据，缓存刚好过期，所有并发都会访问数据库。</p><p><strong>解决方案：</strong></p><ol><li>设置热点键。</li></ol><ul><li>缓存雪崩</li></ul><p>数据未加载到缓存或者缓存大范围失效，导致请求查询数据库。</p><p><strong>解决方案：</strong></p><ol><li>事前：高可用缓存。</li><li>事中：缓存降级。</li><li>事后：Redis 备份和快速预热。</li></ol><h2 id="Redis-实现分布式锁"><a href="#Redis-实现分布式锁" class="headerlink" title="Redis 实现分布式锁"></a>Redis 实现分布式锁</h2><p><strong>加锁</strong></p><ol><li><p>使用 setnx 命令保证互斥性。</p><p>setnx key value</p></li><li><p>需要设置锁的过期时间。</p><p>setnx key seconds value</p><p>expire key seconds </p></li><li><p>setnx 和设置过期时间需要保证原子性，避免设置 setnx 成功之后在设置过期时间客户端奔溃导致死锁。</p></li><li><p>加锁 Value 值作为唯一标识，可以采用 UUID 作为唯一标识，加锁成功后需要把唯一标识返回给客户端进行解锁操作。</p></li><li><p>jedis.set(String key, String value, String nxxx, String expx, int time)，这个set()方法一共有五个形参：  </p><p>第一个为key，我们使用key来当锁，因为key是唯一的。  </p><p>第二个为value，我们传的是requestId，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。requestId可以使用UUID.randomUUID().toString()方法生成。  </p><p>第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；  </p><p>第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。  </p><p>第五个为time，与第四个参数相呼应，代表key的过期时间。 </p></li></ol><p><strong>解锁</strong></p><ol><li>需要拿加锁成功的唯一标识进行解锁，从而保证加锁和解锁的是同一个客户端。</li><li>解锁操作需要比较唯一标识是否相等，相等在执行删除操作。</li></ol><p>（这两个操作可以使用 Lua 脚本方式来实现）</p><h2 id="Redis-实现分布式锁遇到的问题"><a href="#Redis-实现分布式锁遇到的问题" class="headerlink" title="Redis 实现分布式锁遇到的问题"></a>Redis 实现分布式锁遇到的问题</h2><ol><li><p>锁未释放，导致线程池满了。</p><p><strong>解决方案：</strong>释放掉对应的锁。</p></li><li><p>Setnx 命令原理：当 Key 不存在时将 Key 的值设置成 Value，返回值 1。若给定的 Key 已经存在，则 Setnx 不做任何操作，返回值为 0。</p><p><strong>解决方案：</strong>加锁的时候传递一个参数，将这个参数作为 Key 的 Value。每次解锁的时候判断 Value 是否相等即可。</p></li><li><p>数据库事务，获取锁的等待时间远超数据库事务的超时时间，程序就会报异常。</p><p><strong>解决方案：</strong>将数据库事务设置成手动提交，回滚事务。</p></li><li><p>锁过期了，业务还没执行完。</p><p><strong>解决方案：</strong>调用 redisson 方法的 API 。redisson 在加锁成功后，会注册一个定时任务监听这个锁，每隔 10 秒就去查看这个锁，如果还持有锁，就对过期时间进行续期。默认过期时间 30 秒。</p></li><li><p>主从复制。集群环境下，master 已经加锁成功，并已经复制给 slave 节点，当宕机了后，完成主备切换后，新的请求在新的 master 继续加锁。这就导致同一时间内，多个请求对分布式锁完成加锁，导致脏数据产生。</p><p><strong>解决方案：</strong>暂无。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_基础知识</title>
      <link href="/2021/09/02/mysql-ji-chu-zhi-shi/"/>
      <url>/2021/09/02/mysql-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><h2 id="MySQL-基础知识"><a href="#MySQL-基础知识" class="headerlink" title="MySQL 基础知识"></a>MySQL 基础知识</h2><ol><li><p>视图：有查询结果生成的一张虚拟表。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> view_name <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li><li><p>存储过程：一组为了完成特定功能的 SQL 语句集。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名<span class="token punctuation">(</span>参数<span class="token punctuation">,</span>参数<span class="token punctuation">,</span>…<span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">//代码</span><span class="token keyword">end</span></code></pre></li><li><p>触发器：有事件引发的操作。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> 触发器名 before<span class="token operator">|</span><span class="token keyword">after</span> 触发事件 <span class="token keyword">on</span> 表名 <span class="token keyword">for each row</span> 执行语句<span class="token punctuation">;</span></code></pre></li></ol><h2 id="MySQL-的常用引擎"><a href="#MySQL-的常用引擎" class="headerlink" title="MySQL 的常用引擎"></a>MySQL 的常用引擎</h2><p>MySQL 的引擎包括：ISAM ，MyIASM ，Innodb ，HEAP，MERGE 等。</p><p>ISAM 执行读取操作的速度很快，且不占用大量的内存和存储资源，但不支持事务处理，并且不能够容错。</p><p>MyIASM 强调了快速读取数据的操作，但不能在表损坏之后恢复数据。</p><p>Innodb 适合处理多重并发，并且支持事务操作，且具有自动恢复数据，同时又支持外键。默认的搜索引擎。如果更新和查询都比较频繁，会存在锁表的可能。</p><p>查看 MySQL 提供了什么存储引擎：show engines;</p><p>查看当前表使用了什么引擎：show create table tb_content;</p><p>MyIASM 使用的索引是 B+ 树，但数据结构中存储的内容实际上是数据的地址，索引和数据是分开的。</p><p>Innodb 使用的索引也是 B+ 树，数据结构中存储的是实际的数据。</p><h2 id="MySQL-中的事务"><a href="#MySQL-中的事务" class="headerlink" title="MySQL 中的事务"></a>MySQL 中的事务</h2><p>事务：一个最小的不可再分的工作单元。</p><p>事务具有四大特性：</p><ol><li>原子性：最小单元，不可再分。</li><li>一致性：同时成功或者同时失败。</li><li>隔离性：两个事务之间必须隔离。</li><li>持久性：对数据的修改是永久的。</li></ol><h2 id="MySql-事务隔离级别"><a href="#MySql-事务隔离级别" class="headerlink" title="MySql 事务隔离级别"></a>MySql 事务隔离级别</h2><ol><li><p>读取未提交。事务中发生了修改，即使没有提交，其它事务也是可见的。—— &gt; 会引起脏读。</p><p>例如：A 原来的值是 50。修改成了 100。但还没提交，另外一个事务 B 看到了这个修改，但此刻 A 发生了回滚还是 50 。但 B 却读到了 100。</p></li><li><p>读提交。对于一个事务从开始直到提交之前，所做的任务修改其它事务都不可见。—— &gt; 会引起不可重复读。</p><p>例如：A 原来是 50。提交修改 100 。另外一个事务 B 在这之前读取到 A 是 50。刚读完 A 就被修改成了 100。这个时候另外一个事务 C 在读 A 就是 100了。</p></li><li><p>可重读。（MySql 默认隔离级别）不管事务有没有提交，每次读取的结果集都相同。—— &gt; 会引起幻读。</p></li><li><p>序列化。隔离级别最严格，代价最高。但能避免脏读，不可重复读，幻读。</p></li></ol><h2 id="MySQL-如何定位并优化查询慢的-SQL"><a href="#MySQL-如何定位并优化查询慢的-SQL" class="headerlink" title="MySQL 如何定位并优化查询慢的 SQL"></a>MySQL 如何定位并优化查询慢的 SQL</h2><ol><li>根据日志定位查询慢的 SQL。</li><li>使用 Explain 等工具分析。</li><li>修改 SQL 或者让 SQL 走索引以优化查询效率。</li></ol><h2 id="MySql-数据库优化"><a href="#MySql-数据库优化" class="headerlink" title="MySql 数据库优化"></a>MySql 数据库优化</h2><p><strong>如何判断对应的字段就是索引？</strong></p><ol><li>Where 使用比较频繁的字段。</li><li>Order By 涉及到的列。</li></ol><h2 id="MySQL-索引是建立越多越好吗？"><a href="#MySQL-索引是建立越多越好吗？" class="headerlink" title="MySQL 索引是建立越多越好吗？"></a>MySQL 索引是建立越多越好吗？</h2><ol><li>数据量小的表不需要建立索引，建立索引会增加额外的索引开销。</li><li>数据变更需要维护索引，因此更多的索引意味着更多的维护成本。</li><li>更多的索引也意味着更多的空间。</li></ol><h2 id="MySQL-索引失效的条件"><a href="#MySQL-索引失效的条件" class="headerlink" title="MySQL 索引失效的条件"></a>MySQL 索引失效的条件</h2><p>查看索引失效的语句：explain 执行该语句 key=null 。</p><ol><li>查询条件包含 or。</li><li>like 以 % 开头。</li><li>组合索引，但不使用第一列索引。</li><li>列类型是字符串，查询条件一定要用括号括起来，否则索引失效。</li><li>Where 查询条件里使用了不等号。</li><li>Where 查询条件里使用了函数。</li></ol><h2 id="MySQL-索引优化思路"><a href="#MySQL-索引优化思路" class="headerlink" title="MySQL 索引优化思路"></a>MySQL 索引优化思路</h2><ol><li>Where 条件顺序，Oracle 采用自上而下的顺序解析，涉及到最大数量记录的条件写在末尾。</li><li>先查小表，再联合大表，当使用一行数据的时候，使用 Limit。</li><li>能用 Inner Join 就用 Inner Join （等值连接）。Left Join 左边结果集尽量少，有条件放左边。</li><li>避免使用子查询，使用 Join 代替。</li><li>避免使用 Having 。Having 是检索出所有记录后才对结果集进行过滤。On 是先把不符合的记录过滤后才统计。</li><li>避免使用 Select * ,而用具体的列。</li><li>使用关键字 Top，Distinct，关键字去重。</li><li>使用临时表暂存中间结果。</li><li>尽量避免在 Where 中使用 != 或 &lt;&gt;。</li><li>尽量避免在 Where 中对索引进行 Is Null，Is Not Null。（可以将 Null 字段设置成默认值 0 ，改变查询条件 ——&gt; 原因：索引不索引空值）</li></ol><h2 id="MySQL-最左匹配原则"><a href="#MySQL-最左匹配原则" class="headerlink" title="MySQL 最左匹配原则"></a>MySQL 最左匹配原则</h2><p>mysql会一直向右匹配直到遇到范围查询（&gt;、&lt;、between、like）就停止匹配了。</p><ol><li>建立 a,b,c,d 的索引，a=3 and b=4 and c&gt;5 and d=6 。（d 就用不到索引）但是如果 a=3 and b=4 and d=6 and c&gt;5 。则 a,b,c,d 都会用到索引。 </li><li>建立 a,b,c,d 的索引，c&gt;5 and b=4 and d=6 and a=3 也会全部用到 a,b,c,d 索引 。（查询优化器会重新编排）</li><li>建立 a,b,c 索引 那么只要查询条件有 a 即可用到 a,b,c 索引（如 a,b,c a,b a,c a）， 没有 a 就用不到。</li><li>索引 a 的字段类型是 int 。查询的时候 where a = ‘123’。会使用到索引。</li><li>索引 a 的字段类型是 varchar 。查询的时候 where a = 123。不会使用到索引。</li></ol><h2 id="MySQL-如何保证原子性"><a href="#MySQL-如何保证原子性" class="headerlink" title="MySQL 如何保证原子性"></a>MySQL 如何保证原子性</h2><p>想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行回滚，在 MySQL 中，恢复机制是通过 回滚日志（undo log） 实现的，所有事务进行的修改都会先先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用回滚日志中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚将之前未完成的事务。</p><h2 id="MySQL-中的锁"><a href="#MySQL-中的锁" class="headerlink" title="MySQL 中的锁"></a>MySQL 中的锁</h2><ol><li>select * from … where … for update;</li><li>update … set …;</li></ol><h2 id="MySQL-中的事务-1"><a href="#MySQL-中的事务-1" class="headerlink" title="MySQL 中的事务"></a>MySQL 中的事务</h2><p>事务：一个最小的不可再分的工作单元。</p><p>事务具有四大特性：</p><ol><li>原子性：最小单元，不可再分。</li><li>一致性：同时成功或者同时失败。</li><li>隔离性：两个事务之间必须隔离。</li><li>持久性：对数据的修改是永久的。</li></ol><h2 id="MySql-事务隔离级别-1"><a href="#MySql-事务隔离级别-1" class="headerlink" title="MySql 事务隔离级别"></a>MySql 事务隔离级别</h2><ol><li><p>读取未提交。事务中发生了修改，即使没有提交，其它事务也是可见的。—— &gt; 会引起脏读。</p><p>例如：A 原来的值是 50。修改成了 100。但还没提交，另外一个事务 B 看到了这个修改，但此刻 A 发生了回滚还是 50 。但 B 却读到了 100。</p></li><li><p>读提交。对于一个事务从开始直到提交之前，所做的任务修改其它事务都不可见。—— &gt; 会引起不可重复读。</p><p>例如：A 原来是 50。提交修改 100 。另外一个事务 B 在这之前读取到 A 是 50。刚读完 A 就被修改成了 100。这个时候另外一个事务 C 在读 A 就是 100了。</p></li><li><p>可重读。（MySql 默认隔离级别）不管事务有没有提交，每次读取的结果集都相同。—— &gt; 会引起幻读。</p></li><li><p>序列化。隔离级别最严格，代价最高。但能避免脏读，不可重复读，幻读。</p></li></ol><h2 id="MySQL-如何定位并优化查询慢的-SQL-1"><a href="#MySQL-如何定位并优化查询慢的-SQL-1" class="headerlink" title="MySQL 如何定位并优化查询慢的 SQL"></a>MySQL 如何定位并优化查询慢的 SQL</h2><ol><li>根据日志定位查询慢的 SQL。</li><li>使用 Explain 等工具分析。</li><li>修改 SQL 或者让 SQL 走索引以优化查询效率。</li></ol><h2 id="MySql-设计的时候需要注意的事项"><a href="#MySql-设计的时候需要注意的事项" class="headerlink" title="MySql 设计的时候需要注意的事项"></a>MySql 设计的时候需要注意的事项</h2><h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><ol><li>表字段避免null值出现，null值很难查询优化且占用额外的索引空间，推荐默认数字0代替null。</li><li>尽量使用INT而非BIGINT，如果非负则加上UNSIGNED(这样数值容量会扩大一倍)，当然能使用TINYINT、SMALLINT、MEDIUM_INT更好。</li><li>使用枚举或整数代替字符串类型。</li><li>尽量使用TIMESTAMP而非DATETIME。</li><li>单表不要有太多字段，建议在20以内。</li><li>用整型来存IP。</li></ol><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol><li>索引并不是越多越好，要根据查询有针对性的创建，考虑在WHERE和ORDER BY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描。</li><li>应尽量避免在WHERE子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描。</li><li>值分布很***的字段不适合建索引，例如”性别”这种只有两三个值的字段。</li><li>字符字段只建前缀索引。</li><li>字符字段***不要做主键。</li><li>不用外键，由程序保证约束。</li><li>尽量不用UNIQUE，由程序保证约束。</li><li>使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引。</li></ol><h2 id="SQL-的编写需要注意优化"><a href="#SQL-的编写需要注意优化" class="headerlink" title="SQL 的编写需要注意优化"></a>SQL 的编写需要注意优化</h2><ol><li>使用limit对查询结果的记录进行限定。</li><li>避免select *，将需要查找的字段列出来。</li><li>使用连接(join)来代替子查询。</li><li>拆分大的delete或insert语句。</li><li>可通过开启慢查询日志来找出较慢的SQL。</li><li>不做列运算：SELECT id WHERE age + 1 = 10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</li><li>sql语句尽可能简单：一条sql只能在一个cpu运算;大语句拆小语句，减少锁时间;一条大sql可以堵死整个库。</li><li>OR改写成IN：OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内。</li><li>不用函数和触发器，在应用程序实现。</li><li>避免%xxx式查询。</li><li>少用JOIN。</li><li>使用同类型进行比较，比如用’123’和’123’比，123和123比。</li><li>尽量避免在WHERE子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</li><li>对于连续数值，使用BETWEEN不用IN：SELECT id FROM t WHERE num BETWEEN 1 AND 5。</li><li>列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大。</li></ol><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p><strong>分区的好处是：</strong></p><ol><li>可以让单表存储更多的数据</li><li>分区表的数据更容易维护，可以通过清楚整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作</li><li>部分查询能够从查询条件确定只落在少数分区上，速度会很快</li><li>分区表的数据还可以分布在不同的物理设备上，从而搞笑利用多个硬件设备</li><li>可以使用分区表赖避免某些特殊瓶颈，例如InnoDB单个索引的互斥访问、ext3文件系统的inode锁竞争</li><li>可以备份和恢复单个分区</li></ol><p><strong>分区的限制和缺点：</strong></p><ol><li>一个表最多只能有1024个分区</li><li>如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来</li><li>分区表无法使用外键约束</li><li>NULL值会使分区过滤无效</li><li>所有分区必须使用相同的存储引擎</li></ol><p><strong>分区的类型：</strong></p><ol><li>RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区</li><li>LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择</li><li>HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL中有效的、产生非负整数值的任何表达式</li><li>KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值</li><li>具体关于mysql分区的概念请自行google或查询官方文档，我这里只是抛砖引玉了。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架_Spring</title>
      <link href="/2021/09/02/java-kuang-jia-spring/"/>
      <url>/2021/09/02/java-kuang-jia-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring-Bean-的生命周期"><a href="#Spring-Bean-的生命周期" class="headerlink" title="Spring Bean 的生命周期"></a>Spring Bean 的生命周期</h2><ol><li>Bean 的定义。</li><li>Bean 的初始化。</li><li>Bean 的调用。</li><li>Bean 的销毁。</li></ol><h2 id="Spring-属性注入的方式"><a href="#Spring-属性注入的方式" class="headerlink" title="Spring 属性注入的方式"></a>Spring 属性注入的方式</h2><ol><li>值类型注入。@Value() 注解来完成。可以声明在对应的属性上或者方法上。</li><li>引用类型的注入。@Autowired。@Autowired 和 @Qualifier() 二者结合。@Resource()。</li><li>@Autowired 注解是 JDK 的。它按照类型装配依赖对象，默认情况下依赖对象必须存在。如果为 NULL ，则 request 的属性为 false。</li><li>@Resource() 是 Spring 的。它默认按照名称装配对象，名称通过 name 属性指定。</li></ol><h2 id="Spring-中的事务"><a href="#Spring-中的事务" class="headerlink" title="Spring 中的事务"></a>Spring 中的事务</h2><p><strong>定义：</strong></p><p>事务是对一系列数据的操作进行统一的提交和回滚操作。如果成功则一起成功，如果中间有一条失败，那么回滚之前所有的操作。</p><p><strong>操作方法：</strong></p><p>开启事务，提交事务，回滚事务。</p><h2 id="Spring-将对象注册到容器中的方法"><a href="#Spring-将对象注册到容器中的方法" class="headerlink" title="Spring 将对象注册到容器中的方法"></a>Spring 将对象注册到容器中的方法</h2><ol><li>@Component()。</li><li>@Service()。</li><li>@Controller()。</li><li>@Respository()。</li></ol><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p>aop : 面向切面编程是一种编程思想，也就是说要实现将功能代码从业务代码里面分离。其中拦截器就可以看作是面向切面编程思想的一种实现。</p><p>底层是动态代理机制，其中分为：JDK 动态代理和 CGlib 动态代理。</p><p>其中 JDK 动态代理主要是对实现了接口的类进行动态代理。</p><p>CGlib 主要是类实现动态代理。</p><h2 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h2><p>ioc : 是一种设计思想，将原本在程序中手动创建对象的控制权交给了 Spring 框架来管理。</p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="SpringBoot-怎么配多数据源"><a href="#SpringBoot-怎么配多数据源" class="headerlink" title="SpringBoot 怎么配多数据源"></a>SpringBoot 怎么配多数据源</h2><ol><li>在配置文件中配置多个数据源，然后通过配置类（获取不同数据源的不同的类）来获取数据源以及 Mapper 相关配置。</li><li>配置一个默认使用的数据源，然后定义多个其他的数据源，使用 Aop 形式注解选择数据源。</li></ol><h2 id="SpringBoot-的核心注解"><a href="#SpringBoot-的核心注解" class="headerlink" title="SpringBoot 的核心注解"></a>SpringBoot 的核心注解</h2><ol><li>@SpringBootApplication ：用在 SpringBoot 主类上。其实是  @SpringBootConfiguration，@EnableAutoConfiguration ，@ComponentScan 这三个注解的组合。</li><li>@SpringBootConfiguration ：@Configuration 注解的变体。</li><li>@EnableAutoConfiguration ：SpringBoot 的自动配置注解。</li><li>@Configuration ：SpringBoot 用来代替 applicationContext.xml 配置文件的一个注解。</li><li>@ComponentScan ：开启组件扫描。</li><li>@Conditional ：SpringBoot 用来标识一个 Bean 或者 Configuration 配置文件 。</li><li>@Import ：SpringBoot 表示一个或者多个 @Configuration 注解修饰的类 。</li></ol><h2 id="SpringBoot-核心配置文件"><a href="#SpringBoot-核心配置文件" class="headerlink" title="SpringBoot 核心配置文件"></a>SpringBoot 核心配置文件</h2><ol><li>application ：SpringBoot 项目的自动化配置。</li><li>bootstrap  ：使用 SpringCloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息； 一些固定的不能被覆盖的属性；一些加密/解密的场景 。</li></ol><h2 id="SpringBoot-自动配置原理"><a href="#SpringBoot-自动配置原理" class="headerlink" title="SpringBoot 自动配置原理"></a>SpringBoot 自动配置原理</h2><p>注解 @EnableAutoConfiguration, @Configuration, @ConditionalOnClass 就是自动配置的核心，首先它得是一个配置文件，其次根据类路径下是否有这个类去自动配置。 </p><h2 id="SpringBoot-如何实现分页和排序的"><a href="#SpringBoot-如何实现分页和排序的" class="headerlink" title="SpringBoot 如何实现分页和排序的"></a>SpringBoot 如何实现分页和排序的</h2><p>使用的是 Spring Data 提供的 Pageable、Sort、Page 类 。</p><h2 id="SpringBoot-是如何处理异常的"><a href="#SpringBoot-是如何处理异常的" class="headerlink" title="SpringBoot 是如何处理异常的"></a>SpringBoot 是如何处理异常的</h2><ol><li>自定义异常处理。</li><li>使用 @ExceptionHandler 注解处理局部异常。</li><li>使用 @ControllerAdvice + @ExceptionHandler 来处理全局异常。</li><li>通过实现 HandlerExceptionResolver 接口处理异常 。</li></ol><h2 id="RequestMapping-和-GetMapping-的不同之处"><a href="#RequestMapping-和-GetMapping-的不同之处" class="headerlink" title="RequestMapping 和 GetMapping 的不同之处"></a>RequestMapping 和 GetMapping 的不同之处</h2><ol><li>RequestMapping 具有类属性的，可以进行 GET,POST,PUT 或者其它的注释中具有的请求方法。 </li><li>GetMapping 是 GET 请求方法中的一个特例。</li></ol><h2 id="SpringBoot-的加载过程"><a href="#SpringBoot-的加载过程" class="headerlink" title="SpringBoot 的加载过程"></a>SpringBoot 的加载过程</h2><p>SpringBoot 在启动的时候，按照约定会去读取 SpringBoot Starter 的配置信息，会根据配置信息对资源进行初始化，并注入 Spring 容器中，这样当 Spring 启动好之后，就已经准备好一切资源，使用过程直接注入对应的 Bean 即可。</p><h2 id="Spring-和-SpringMVC-和-SpringBoot"><a href="#Spring-和-SpringMVC-和-SpringBoot" class="headerlink" title="Spring 和 SpringMVC 和 SpringBoot"></a>Spring 和 SpringMVC 和 SpringBoot</h2><ol><li>Spring 是一个轻量级的 JAVA 框架，核心是控制反转和面向切面编程。</li><li>SpringMVC 是Spring 基础上的一个MVC 框架，主要使用于 WEB 开发。</li><li>SpringBoot 是在 SpringMVC 基础上，根据默认大于配置的思想，简化配置，集成快速开实现的一个框架，常用于微服务系统开发。</li></ol><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="MyBatis-是如何进行分页的"><a href="#MyBatis-是如何进行分页的" class="headerlink" title="MyBatis 是如何进行分页的"></a>MyBatis 是如何进行分页的</h2><p>MyBatis 使用 RowBounds 对象进行分页。针对结果集执行内存分页，可以在 SQL 中直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成。</p><h2 id="MyBatis-中-和-的区别"><a href="#MyBatis-中-和-的区别" class="headerlink" title="MyBatis 中 #{} 和 ${} 的区别"></a>MyBatis 中 #{} 和 ${} 的区别</h2><ol><li>#{} 是预编译处理，传进来的数据会加上 “ ”。</li><li>${} 是字符串替换，直接替换到占位符，使用的话会导致 SQL 注入的风险。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVA 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_基础知识</title>
      <link href="/2021/09/02/java-ji-chu-zhi-shi/"/>
      <url>/2021/09/02/java-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-的基础知识"><a href="#JAVA-的基础知识" class="headerlink" title="JAVA 的基础知识"></a>JAVA 的基础知识</h1><h2 id="重载和重写的区别。"><a href="#重载和重写的区别。" class="headerlink" title="重载和重写的区别。"></a>重载和重写的区别。</h2><ol><li><p>重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修 饰符可以不同，发生在编译时。 </p></li><li><p>重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等 于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法。</p><p>如果父类是抽象类，那么子类在继承的时候方法参数可以不相同。如果父类不是抽象类，那么子类在继承的时候，方法参数需要相同。</p></li></ol><h2 id="JAVA-面向对象编程的三大特征。"><a href="#JAVA-面向对象编程的三大特征。" class="headerlink" title="JAVA 面向对象编程的三大特征。"></a>JAVA 面向对象编程的三大特征。</h2><p>封装 继承 多态</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>什么是多态？</li></ul><p>体现就是重载。重载就是发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修 饰符可以不同，发生在编译时。 </p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><ol><li>final 修饰变量，在被继承的时候，不会被覆盖。</li><li>final 修饰方法的时候，在被继承的时候，能被继承，但子类不能被重写。</li><li>final 修饰类的时候，不能被继承。</li></ol><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><ul><li>接口</li></ul><p>接口的关键字是 interface 。它可以看作是一种规范，在使用的过程中只能声明，没有具体的实现。其实现方式需要有不同的子类去实现。</p><ul><li>抽象类</li></ul><p>抽象类的关键字是 abstract ，同样的是只能声明，不能有具体的实现，其实现方式是通过子类的继承去实现的。</p><ul><li>两种的使用</li></ul><p>在子类实现接口的过程中，不同的子类去实现同一个接口，会存在一些公共方法的实现，那么对于这些公共的方法，在使用的过程中可以定义为抽象类的形似。</p><h2 id="String-StringBuffer-和-StringBuilder-和-String-。"><a href="#String-StringBuffer-和-StringBuilder-和-String-。" class="headerlink" title="String StringBuffer 和 StringBuilder 和 String 。"></a>String StringBuffer 和 StringBuilder 和 String 。</h2><ol><li><p>操作少量的数据: 适用String 。</p></li><li><p>单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder 。</p></li><li><p>多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer。</p></li></ol><h2 id="String-为何是不可变的？"><a href="#String-为何是不可变的？" class="headerlink" title="String 为何是不可变的？"></a>String 为何是不可变的？</h2><ol><li>String 的底层就是一个数组，在 JDK1.8 中，String 的底层是被 final 关键字修饰的一个数组。这就保证 String 一旦被创建后就不可改变。但这里的不可改变指的是其对应的引用地址。</li><li>再加上这个引用又被定义为了一个 private 的，那么就更不可能通过继承去改变。同时 String 这类在定义的时候也加了关键字 final 限制了被继承，通过 String 类里也没有定义对应的 Get 和 Set 方法。</li><li>综上所述，String 一旦被初始化就是不可改变的。</li></ol><h2 id="与-equals"><a href="#与-equals" class="headerlink" title="== 与 equals"></a>== 与 equals</h2><ul><li>基本数据类型</li></ul><p>使用 == 进行比较。</p><ul><li>非基本数据类型</li></ul><p>重写 equals 方法后，使用 equals 进行比较。（需要注意的是：重写 equals 方法时，需要重写 hashcode 方法，因为会存在两个对象的 Hashcode 方法相同，但 equals 方法不相等的情况。）</p><p>如果使用 == 进行比较的话，比较的是两个对象的内存地址。（需要注意的是：String 具有常量池功能，当创建 String 对象的时候，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同，如果有，就会赋值给它。如果没有，就会心创建一个新的 String 对象。）</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一种情况</span>String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>String b <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>a<span class="token operator">==</span><span class="token function">b</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">(</span>String具有常量池功能，当执行String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>的时候，常量池里会重新创建常量”a“。当去执行String b <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>因为常量池里已经有”a“了，所以b就直接去常量池里取值了，这样a和b的地址也就相同了<span class="token punctuation">)</span>。a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>（<span class="token boolean">true</span>）<span class="token comment" spellcheck="true">//第二种情况</span>String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 堆内存的地址值</span>String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false,因为一个是堆内存，一个是常量池的内存，故两者是不同。</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span></code></pre><p>特例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一种情况：</span>String str1 <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>幕布 <span class="token operator">-</span> 极简大纲笔记 <span class="token operator">|</span> 一键生成思维导图String str2 <span class="token operator">=</span> <span class="token string">"ing"</span><span class="token punctuation">;</span>String str3 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token string">"ing"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量池中的对象</span>String str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在堆上创建的新的对象</span><span class="token comment" spellcheck="true">// 第二种情况</span>String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 这句话创建了几个字符串对象？将创建 <span class="token number">1</span> 或 <span class="token number">2</span> 个字符串。如果池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 <span class="token number">2</span> 个字符串对象。</code></pre><h2 id="amp-和-amp-amp-、-和-的区别"><a href="#amp-和-amp-amp-、-和-的区别" class="headerlink" title="&amp; 和 &amp;&amp; 、| 和 || 的区别"></a>&amp; 和 &amp;&amp; 、| 和 || 的区别</h2><ol><li><p>&amp;&amp; 和 &amp; 都是表示与，区别是 &amp;&amp; 只要第一个条件不满足，后面条件就不再判断。而 &amp; 要对所有的 条件都进行判断。 </p></li><li><p>|| 和 | 都是表示 “或”，区别是 || 只要满足第一个条件，后面的条件就不再判断，而 | 要对所有的条 件进行判断。</p></li></ol><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><ol><li><p>变量：对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引 用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p></li><li><p>方法：第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因 是效率。</p></li><li><p>类： 当用final修饰一个类时，表明这个类不能被继承。final类中的所有成员方法都会被隐式地指定为final 方法。</p></li></ol><h2 id="ArrayList-与-LinkedList"><a href="#ArrayList-与-LinkedList" class="headerlink" title="ArrayList 与 LinkedList"></a>ArrayList 与 LinkedList</h2><ol><li><p>ArrayList：能够自动增长容量的数组，搜索，读取数据的时候效率较高。 它在内存中是一段连续的地址，在做查询的时候，不需要寻址，所以查询的时候效率会更高。</p></li><li><p>LinkedList：是一个双向的链表，添加，和删除数据的时候效率较高。它在内存中的存储是分散的，在做查询的时候需要寻址，所以查询的时候效率不是很高。</p></li></ol><h2 id="LinkedList-可以用-For-循环遍历吗？"><a href="#LinkedList-可以用-For-循环遍历吗？" class="headerlink" title="LinkedList 可以用 For 循环遍历吗？"></a>LinkedList 可以用 For 循环遍历吗？</h2><p>尽量不要用，LinkedList 的底层是链表，用 For 循环遍历，每访问一个元素都要从头开始访问，然后找到这个元素。</p><p>可以使用迭代器遍历。</p><h2 id="HashMap-和-HashTable"><a href="#HashMap-和-HashTable" class="headerlink" title="HashMap 和 HashTable"></a>HashMap 和 HashTable</h2><p><strong>HashMap</strong></p><p>在 JDK1.7 中，它的数据结构是一个数组+链表的数据结构，数据节点是 Entry 节点，在进行数据插入的时候采用的是头插法。在进行扩容的时候节点里的 Resize 方法调用 transfer 方法，然后会把里面的数据造成 Rehash，在下一次 Get 的时候，就会出现一个死循环。</p><p>在JDK8中，HashMap的底层是：数组+链表（散列表）+红黑树。同时为了解决JDK1.7 中出现的链表循环，JDK1.8 中使用了尾插法。其中它的初始化容量默认值是16。装载因子默认是0.75。在初始化的时候会先计算扩容的阈值，在插入数据的时候会判断当前的 Size 是否大于这个阈值，如果大于就会创建一个2倍数据大小，扩容到原来的2倍。</p><p>当桶上元素有8位，并且散列表的容量大于64的时候，HashMap 会变成红黑树。</p><h2 id="HashMap-的插入原理"><a href="#HashMap-的插入原理" class="headerlink" title="HashMap 的插入原理"></a>HashMap 的插入原理</h2><ol><li>判断数组是否为空，为空进行初始化。</li><li>不为空。计算 K 的 Hash 值。通过 （n-1）&amp; Hash 计算存放在数组的下标 Index。</li><li>查看 Table[Index] 是否存在数据，没有数据就构造一个 Node 节点，存放在 Table[Index] 中。</li><li>存在数据。说明发生了 Hash 冲突。判断 Key 是否相等。相等就用新的 Value 替换。</li><li>不相等，判断当前节点类型是不是树型节点，如果是，创建树型节点插入到红黑树。</li><li>如果不是，创建普通 Node 加入到链表中，判断链表长度是否大于 8。大于则转成红黑树。</li><li>插入数据后判断当前节点是否大于阎值，如果大于开始扩容原来数组的 2 倍。</li></ol><h2 id="HashMap-为什么每次扩容都是-2-的倍数？"><a href="#HashMap-为什么每次扩容都是-2-的倍数？" class="headerlink" title="HashMap 为什么每次扩容都是 2 的倍数？"></a>HashMap 为什么每次扩容都是 2 的倍数？</h2><ol><li>在向 HashMap 添加数据元素的时候，会使用 （n-1）&amp; Hash 的方法计算相应的元素位置。</li><li>在扩容的时候，会新建一个 Tab，然后遍历旧的 Tab，将旧元素进行 （n-1）&amp; (NewCap - 1) 也就是 （n-1）&amp; Hash 的计算方法。（n 是集合容量，Hash 是添加元素计算而来的 Hash 值）</li><li>其主要是这个 （n-1）&amp; Hash 的计算。<ol><li>计算结果比较高效。</li><li>如果 HashMap 的容量刚好是 2 的倍数的时候，（n-1）的二进制与添加元素的 Hash 进行位运算，能够充分散列，减少 Hash 碰撞。</li></ol></li></ol><h2 id="HashMap-解决哈希冲突的方法"><a href="#HashMap-解决哈希冲突的方法" class="headerlink" title="HashMap 解决哈希冲突的方法"></a>HashMap 解决哈希冲突的方法</h2><ol><li>使用链地址法来连接拥有相同 Hash 值的数据。</li><li>使用 2 次扰动函数（Hash 函数）来降低哈希冲突。</li><li>引用红黑树降低遍历时间。</li></ol><h2 id="HashMap-是非线程安全的，举几个例子。"><a href="#HashMap-是非线程安全的，举几个例子。" class="headerlink" title="HashMap 是非线程安全的，举几个例子。"></a>HashMap 是非线程安全的，举几个例子。</h2><ol><li>HashMap 在插入数据的时候，只保留最后一个线程插入的数据。</li><li>HashMap 在修改数据的时候，只保留最后一个线程修改的数据。</li><li>HashMap 在扩容的时候，只保留最后一个线程扩容的结果。</li></ol><p><strong>HashTable</strong></p><ol><li>HashMap 在进行数据写入的时候，允许 Key 和 Value 的值为 Null；HashTable 不允许 Key 和 Value 为Null。</li><li>HashMap 是线程不安全的，HashTable 是线程安全的。</li><li>ConcurrentHashMap 可以看作是一个线程安全的 HashTable。它提供的是一组和 HashTable功能相同但线程安全的方法。</li></ol><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>首先  HashTable 是线程安全的，它实现线程安全的方法是对内部每一个方法都使用了 Synchronized 关键字。相当于对每一个方法都添加了对象锁。</p><p>ConcurrentHashMap 采用的是分段锁。在 JDK1.8 中 ConcurrentHashMap 底层也是 数组+链表（散列表）+红黑树的数据结构，在加锁的过程中它只会锁住 Entry 所在节点的那个值，在上锁的时候使用的是 CAS + Synchronized 来实现的。</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ol><li><p>Set底层就是Map 。</p></li><li><p>HashSet 无序，允许为null，底层是HashMap（散列表+红黑树），非线性同步。</p></li><li><p>TreeSet 有序，不允许为null，底层是TreeMap（红黑树），非线性同步。 </p></li><li><p>LinkedHashSet 迭代有序，允许为null，底层是HashMap+双向链表，非线性同步。</p></li></ol><h2 id="HashSet-是如何去重的？"><a href="#HashSet-是如何去重的？" class="headerlink" title="HashSet 是如何去重的？"></a>HashSet 是如何去重的？</h2><p>HashSet 底层采用 HashMap 存储数据，当向 HashSet 中添加元素的时候，首先计算 hashcode 的值，然后用这个计算而来的 hashcode 对 HashMap 集合大小取余后加 1。（（hashcode % HashMap Size）+1）来计算这个元素的存储位置，如果这个位置为空，则将元素添加进去，如果不为空，则用 equals 方法比较元素是否相等，相等就不添加。</p><h2 id="什么是哈希？"><a href="#什么是哈希？" class="headerlink" title="什么是哈希？"></a>什么是哈希？</h2><p>把任意长度的输入通过散列算法变成固定长度的输出，该输出就是散列值。</p><p><strong>特点：</strong></p><p>根据同一散列函数计算出的散列值如果不同，那么输入肯定不同。如果计算结果相同，那么输入不一定相同。</p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><p>两个不同的输入值，根据同一散列函数计算出相同的散列值。</p><h2 id="解决HASH-碰撞的方法"><a href="#解决HASH-碰撞的方法" class="headerlink" title="解决HASH 碰撞的方法"></a>解决HASH 碰撞的方法</h2><ol><li>开发地址法。</li><li>再哈希法。</li><li>链地址法。</li><li>建立一个公共溢出区。</li></ol><h2 id="Java-中强引用，软引用，弱引用，虚引用"><a href="#Java-中强引用，软引用，弱引用，虚引用" class="headerlink" title="Java 中强引用，软引用，弱引用，虚引用"></a>Java 中强引用，软引用，弱引用，虚引用</h2><p>强引用：最普遍的引用，Object obj = new Object(); 宁愿抛出 OOM 也不愿回收的强引用对象，通过将对象设置成 NULL 来弱化引用，使其被回收，或者等待生命周期结束。</p><p>软引用：对象处在有用但非必需的状态，当内存空间不足时，会回收，当内存足够时，会允许它存在。可以用来实现高速缓存。</p><p>弱引用：比软引用弱，GC 时一定会被回收，但不一定会被立即回收。</p><p>虚引用：不会决定对象的生命周期，任何时候都有可能被垃圾回收器回收。</p><p>在程序设计的时候常常使用软引用。因为：<strong>软引用可以加速JVM对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出等问题的产生</strong>。 </p><h2 id="JAVA-多线程中的锁"><a href="#JAVA-多线程中的锁" class="headerlink" title="JAVA 多线程中的锁"></a>JAVA 多线程中的锁</h2><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>总是假设情况都是最好的，在使用的时候不会上锁，但更新操作的时候回去做判断，判断是否有其它线程更新了这个数据，适用于读取较多的情况，底层使用：版本号和 CAS 算法实现。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>总是假设情况都是最坏的，在使用的时候每次处理数据都会上锁，只是把资源给一个线程使用，其它线程阻塞，用完后把资源转给其它线程。一般适应于写数据较多的情况。</p><h3 id="版本号机制"><a href="#版本号机制" class="headerlink" title="版本号机制"></a>版本号机制</h3><p>在数据库表中加一个数据版本号 version 字段，表示被修改的次数。当数据被修改时 version 的值会加一。线程更新数据时，会读取这个字段的值并修改。提交更新时，若当前的 version 的值大于数据库当前版本，则更新操作。</p><h3 id="CAS-算法"><a href="#CAS-算法" class="headerlink" title="CAS 算法"></a>CAS 算法</h3><p>当要读写内存值 V 等于进行比较的值 A 时，CAS 通过原子操作用新值 B 来代替 V。</p><p>缺点：</p><ol><li>ABA 问题。</li><li>循环时间长，开销大。</li><li>只能保证一个共享变量的原子操作。</li></ol><h2 id="JAVA-内存管理"><a href="#JAVA-内存管理" class="headerlink" title="JAVA 内存管理"></a>JAVA 内存管理</h2><p>Java 内存模型分为：程序计数器，虚拟机栈，本地方法栈，堆，方法区。</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ol><li>如果线程执行的是一个 Java 方法，那么计数器中记录的是：正在执行的虚拟机字节码的指令地址。</li><li>如果线程执行的是一个 Native 方法，那么这个计数器的值为空。</li><li>存储空间上不会随程序的执行而改变。</li></ol><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><ol><li>Java 方法执行的内存模型。每个方法从被调用到执行完成，都对应着一个入栈和出栈的过程。</li><li>当线程请求的栈深度超过最大值，则抛出：<code>StackOverFlowError</code> 异常。</li><li>当栈动态扩展时，无法申请到足够的内容时，则抛出：<code>OutOfMemoryError</code> 异常。</li></ol><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ol><li>当本地方法栈使用 Native 方法时，虚拟机会把本地方法栈和虚拟机栈合二为一。</li></ol><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ol><li>所有线程共享，几乎所有对象的实例都在这里分配内容。</li><li>主要职责是负责垃圾收集管理区域。</li></ol><h3 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h3><p>在 JDK 1.8中移除整个永久代，取而代之的是一个叫元空间（Metaspace）的区域（永久代使用的是JVM的堆内存空间，而元空间使用的是物理内存，直接受到本机的物理内存限制）。 </p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ol><li>存放已被加载的信息常量，在垃圾回收时负责常量池的回收和对类的卸载。</li></ol><h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><p>类加载检查 ——&gt; 分配内存 ——&gt; 初始化零值 ——&gt; 设置对象头 ——&gt; 执行 init 方法。</p><p><strong>类加载检查：</strong></p><p>虚拟机遇到 New 指令 ——&gt; 指令参数在常量池中定位符号引用 ——&gt; 符号引用代表类是否被加载过，解析和初始化 ——&gt; (<em>没有</em>) 执行加载。</p><p><strong>分配内存：</strong></p><ul><li>分配方法：</li></ul><ol><li>指针碰撞 ——&gt; 堆内存规整 ——&gt; 标记整理。</li><li>空闲列表 ——&gt;  堆内存不规则 ——&gt; 标记清理。</li></ol><ul><li>内存分配并发问题，两种处理方法：</li></ul><ol><li>CAS + 失败重试。</li><li>TLAB。</li></ol><h2 id="JAVA-垃圾回收"><a href="#JAVA-垃圾回收" class="headerlink" title="JAVA 垃圾回收"></a>JAVA 垃圾回收</h2><p>分代垃圾收集算法，将 Java 内存区域分为新生代和老年代。</p><p>新生代又分为：E 空间，F 空间，T 空间。</p><h3 id="分配方法："><a href="#分配方法：" class="headerlink" title="分配方法："></a>分配方法：</h3><p>首先在 E 区分配，在第一次垃圾回收之后，如果还存在则会进入 F 或 T。并且对象年龄加 1 。当年龄增加到一定程度，默认是 15 ，会进入到老年代。</p><p>经过这次收集，E 和 F 会被清空，然后 F 和 T 交换角色。直到 T 已被填满将对象移入老年代。</p><h3 id="几个特点："><a href="#几个特点：" class="headerlink" title="几个特点："></a>几个特点：</h3><ol><li>对象优先在 E 上分配。</li><li>大对象直接进入老年代。</li><li>长期存活的对象将进入老年代。</li></ol><h3 id="使用到的算法："><a href="#使用到的算法：" class="headerlink" title="使用到的算法："></a>使用到的算法：</h3><ol><li>标记-清除法：先标记不需要回收的对象，标记完成后，统一回收没被标记的对象。（<em>引发的问题：</em>）效率问题，空间问题。</li><li>复制算法：（<em>解决效率问题</em>）将内存分为大小两块，每次使用其中一块，当一块使用完成，将存活的对象复制到另一块，然后在把使用的空间清理。（这样就使每次的内存回收都是对内存区间的一半进行回收。 ）</li><li>标记-整理算法:（<em>解决空间问题</em>）先标记不需要回收的对象，标记完成，将所有存活的对象向一端移动，清理掉边界以外的内存。</li></ol><h3 id="收集器"><a href="#收集器" class="headerlink" title="收集器"></a>收集器</h3><ol><li><p>串行收集器：它是一个单线程的收集器。这就意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，然后它在进行垃圾收集工作的时候必须暂停其他所有的工作线程，直到它收集结束。 （新生代采用复制算法，老年代采用标记-整理算法 。）</p></li><li><p>ParNew 收集器：可以看作是串行收集器的多线程版本。（新生代采用复制算法，老年代采用标记-整理算法 。）</p><ul><li>并行 ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li><li>并发：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个CPU上。</li></ul></li><li><p>CMS 收集器：CMS收集器是一种 “标记-清除”算法实现的，一款真正意义上的并发收集器。</p></li></ol><p>   <strong>工作过程主要分为：</strong></p><ul><li>初始标记： 暂停所有的其他线程，并记录下直接与root相连的对象，速度很快 ；</li><li>并发标记： 同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li>重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li>并发清除： 开启用户线程，同时GC线程开始对为标记的区域做清扫。</li></ul><p>   <strong>明显缺点：</strong></p><ul><li>对CPU资源敏感；</li><li>无法处理浮动垃圾；</li><li>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</li></ul><ol start="4"><li>G1 收集器：执行步骤主要包括：初始标记，并发标记，最终标记，筛选回收。</li></ol><h2 id="CMS-收集器和-G1-收集器"><a href="#CMS-收集器和-G1-收集器" class="headerlink" title="CMS 收集器和 G1 收集器"></a>CMS 收集器和 G1 收集器</h2><ul><li><p>使用范围不一样</p><ol><li>CMS 收集器是老年代收集器，可以配合新生代的 串行和并行 收集器一起使用。</li><li>G1 收集器收集范围是老年代和新生代，不需要结合其他收集器使用。</li></ol></li></ul><ul><li><p>STW 的时间</p><ol><li>CMS 收集器以最小停顿时间为目标收集器。</li><li>G1 收集器可预测垃圾回收的停顿时间。</li></ol></li></ul><ul><li><p>垃圾碎片</p><ol><li>CMS 收集器是使用“标记-清除”算法进行垃圾回收，容易产生内存碎片。</li><li>G1 收集器使用“标记-整理”算法，进行空间整合，降低了内存空间碎片。</li></ol></li></ul><ul><li><p>垃圾回收过程不一样</p><ol><li>CMS 收集器：初始化标记 —&gt; 并发标记 —&gt; 重新标记 —&gt; 并发清楚。</li><li>G1 收集器：初始化标记 —&gt; 并发标记 —&gt; 最终标记 —&gt; 筛选回收。</li></ol></li></ul><h2 id="如何判断对象已经死亡？"><a href="#如何判断对象已经死亡？" class="headerlink" title="如何判断对象已经死亡？"></a>如何判断对象已经死亡？</h2><ol><li>引用计数法 ——&gt; 会存在循环引用的问题。</li><li>可达性分析算法  —— &gt; 通过一系列的称为 “GC Roots” 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。 </li></ol><ul><li><p>不可达的对象并非非死不可</p><p>真正宣告这个对象的死亡，至少要经历两次标记过程。不可达的对象第一次被标记并进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize  方法已经被虚拟机调用过了。虚拟机将这两种情况视为没有必要执行。</p><p>被判定为需要执行的对象将会被放在一个队列中进行二次标记，除非这个对象与引用链上的任何一个对象关联否则就会被回收。</p></li></ul><h2 id="如何判断一个常量是废弃常量？"><a href="#如何判断一个常量是废弃常量？" class="headerlink" title="如何判断一个常量是废弃常量？"></a>如何判断一个常量是废弃常量？</h2><p>当前没有任何 String 引用该字符串常量。</p><h2 id="如何判断一个类是无用类？"><a href="#如何判断一个类是无用类？" class="headerlink" title="如何判断一个类是无用类？"></a>如何判断一个类是无用类？</h2><p>满足一下三个条件：</p><ol><li>该类所有的实例都已经被回收。</li><li>加载该类的 ClassLoader  已经被回收。</li><li>该类对应的  java.lang.Class 没有任何引用实例。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVA 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_多线程</title>
      <link href="/2021/09/02/java-duo-xian-cheng/"/>
      <url>/2021/09/02/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-多线程"><a href="#JAVA-多线程" class="headerlink" title="JAVA 多线程"></a>JAVA 多线程</h1><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><ol><li>创建线程</li><li>就绪状态</li><li>运行状态</li><li>阻塞状态</li><li>等待状态</li><li>锁池状态</li><li>死亡</li></ol><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程就好比火车，线程就好比车厢。</p><p>其中进程间的通信方式有：管道，信号量，共享内存，消息队列。</p><p>其中线程间的通信方式有：共享变量，共享队列。</p><h2 id="synchronized-和-volatile-区别"><a href="#synchronized-和-volatile-区别" class="headerlink" title="synchronized 和 volatile 区别"></a>synchronized 和 volatile 区别</h2><ol><li>volatile 只能用于变量，synchronized 可用于变量，方法，类，代码块。</li><li>volatile 不能保证原子性。</li><li>volatile 不会造成阻塞，synchronized 可能会造成阻塞。</li></ol><p><strong>Synchronized 去修饰一个方法的时候。它是给类加锁？还是给对象加锁？</strong></p><ol><li>如果方法是静态的，那么加的是类锁。</li><li>如果方法是非静态的，加的是对象锁。</li><li>如果修饰的是代码块，加的也是对象锁。</li></ol><h2 id="wait-和-sleep"><a href="#wait-和-sleep" class="headerlink" title="wait 和 sleep"></a>wait 和 sleep</h2><ol><li>wait 会释放对象锁。</li><li>sleep 不会释放对象锁。</li></ol><h2 id="创建多线程的方式"><a href="#创建多线程的方式" class="headerlink" title="创建多线程的方式"></a>创建多线程的方式</h2><ol><li>继承 Thread 类，然后重写 run() 方法。</li><li>实现 Runnable 接口，然后重写 run() 方法。</li><li>实现 Callable 接口，然后重写 call() 方法。</li></ol><h2 id="JAVA-创建线程池的方法"><a href="#JAVA-创建线程池的方法" class="headerlink" title="JAVA 创建线程池的方法"></a>JAVA 创建线程池的方法</h2><p><strong>创建线程池的方法总共分为两大类：</strong></p><ol><li>通过 ThreadPoolExecutor 创建线程池。</li><li>通过 Executors 创建线程池。</li></ol><p><strong>创建线程池的方法：</strong></p><ol><li>Executors.newFixedThreadPool：创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待；</li><li>Executors.newCachedThreadPool：创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程；</li><li>Executors.newSingleThreadExecutor：创建单个线程数的线程池，它可以保证先进先出的执行顺序；</li><li>Executors.newScheduledThreadPool：创建一个可以执行延迟任务的线程池；</li><li>Executors.newSingleThreadScheduledExecutor：创建一个单线程的可以执行延迟任务的线程池；</li><li>Executors.newWorkStealingPool：创建一个抢占式执行的线程池（任务执行顺序不确定）【JDK 1.8 添加】。</li><li>ThreadPoolExecutor：最原始的创建线程池的方式，它包含了 7 个参数可供设置，后面会详细讲。</li></ol><p><strong>为什么不建议使用 Executors 创建线程池？</strong></p><ol><li>FixedThreadPool 和 SingleThreadPool：允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。（底层使用了队列 LinkedBlockingQueue ，这是一个链表实现的有界阻塞队列，容量可以进行设置，不设置的话将是一个无边界的阻塞队列，无边界的队列，任务会一直写入，很容易填满内存）</li><li>CachedThreadPool：允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。（创建线程池的数量是无限大，无线创建线程，很容易把内存填满）</li></ol><p><strong>ThreadPoolExecutor</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//10,核心线程数，线程池中始终存活的线程数。</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//30,最大线程数，线程池中允许的最大线程数，当线程池的任务队列满了之后可以创建的最大线程数。</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//最大线程数可以存活的时间，当线程中没有任务执行时，最大线程就会销毁一部分，最终保持核心线程数量的线程。</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//1000,一个阻塞队列，用来存储线程池等待执行的任务，均为线程安全。</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol><li>当接收到 30 个比较耗时的任务时，10 个核心线程数（corePoolSize）都在工作，剩余的 20 个去队列（workQueue）里排队。</li><li>这个线程池最多接收的任务：maximumPoolSize + workQueue。</li></ol><p><strong>工作机制：</strong></p><ol><li>当线程数小于核心线程数（corePoolSize）时，创建线程。</li><li>当线程数大于等于核心线程数（corePoolSize），且任务队列（workQueue）未满时，将任务放入任务队列（workQueue）。</li><li>当线程数大于等于核心线程数（corePoolSize），且任务队列（workQueue）已满：若线程数小于最大线程数（maximumPoolSize ），创建线程；若线程数等于最大线程数（maximumPoolSize ），抛出异常，拒绝任务。</li></ol><h2 id="线程池拒绝策略"><a href="#线程池拒绝策略" class="headerlink" title="线程池拒绝策略"></a>线程池拒绝策略</h2><ol><li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。（ThreadPoolExecutor 线程池默认策略）</li><li>ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新提交被拒绝的任务。</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程（提交任务的线程）处理该任务。</li></ol><h2 id="Java内存CPU占用过高排查"><a href="#Java内存CPU占用过高排查" class="headerlink" title="Java内存CPU占用过高排查"></a>Java内存CPU占用过高排查</h2><ol><li>ps -ef | grep tomcat ——&gt; 拿到 Tomcat 进程的 pid 。</li><li>jstack -l 进程pid &gt;&gt; jstack.log ——&gt; 打印并保存该进程中堆栈的使用信息日志 。</li><li>top -Hp pid ——&gt; 展示进程中所有线程的 cpu 占用情况 。</li><li>printf %x 线程pid ——&gt; 该线程对应的 16 进制 。</li><li>vim jstack.log ——&gt; 编辑查找 3 中打印的 16 进制值 。</li><li>分析并定位到问题代码 </li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVA 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP_基础</title>
      <link href="/2021/09/02/http-ji-chu/"/>
      <url>/2021/09/02/http-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-基础知识"><a href="#HTTP-基础知识" class="headerlink" title="HTTP 基础知识"></a>HTTP 基础知识</h1><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>HTTP 协议是承载与 TCP 协议之上的。有时也承载与 TLS 或者 SSL 协议之上。</p><h2 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h2><ol><li>HTTPS 需要到 AC 申请证书，HTTP 不需要</li><li>HTTPS 密文传输，HTTP 明文传输。</li><li>HTTPS 默认使用 433 端口，HTTP 使用 80 端口。</li><li>HTTPS 传输数据比 HTTP 要安全。</li></ol><h2 id="HTTPS-的数据传输"><a href="#HTTPS-的数据传输" class="headerlink" title="HTTPS 的数据传输"></a>HTTPS 的数据传输</h2><ol><li>浏览器将支持的加密信息发给服务器。</li><li>服务器选择一套浏览器支持的加密算法，以证书的形式回发给浏览器。</li><li>浏览器验证证书的合法性，并结合证书，公匙，加密信息发给服务器。</li><li>服务器使用私匙解密信息，验证哈希，加密响应消息回发给浏览器。</li><li>浏览器解密响应信息，并对消息进行验证，之后进行加密交互数据。</li></ol><h2 id="HTTP-当在浏览器中输入网址后会发生什么？"><a href="#HTTP-当在浏览器中输入网址后会发生什么？" class="headerlink" title="HTTP 当在浏览器中输入网址后会发生什么？"></a>HTTP 当在浏览器中输入网址后会发生什么？</h2><ol><li>DNS 域名解析。</li><li>建立 TCP 链接。</li><li>发起 HTTP 请求。</li><li>接受响应结果。</li><li>浏览器解析 HTML。</li><li>浏览器布局渲染。</li></ol><h2 id="HTTP-的-Get-和-Post。"><a href="#HTTP-的-Get-和-Post。" class="headerlink" title="HTTP 的 Get 和 Post。"></a>HTTP 的 Get 和 Post。</h2><ul><li>数据可见性</li></ul><p>Get：数据在 URL 中可见。</p><p>Post：数据在 URL 中不可见。</p><ul><li>安全性</li></ul><p>Post 比 Get 更加安全。</p><ul><li>数据能否被缓存</li></ul><p>Get：能被缓存。</p><p>Post：不能被缓存。</p><ul><li>历史</li></ul><p>Get：参数会被保留在浏览历史中。</p><p>Post：参数不会被保留在浏览历史中。</p><ul><li>数据长度</li></ul><p>Get：对数据长度有限制，最大数据长度为 2048 个字符。</p><p>Post：对数据长度无限制。</p><ul><li>数据类型</li></ul><p>Get：只允许 ASCII 字符。</p><p>Post：无限制。</p><h2 id="HTTP-的状态码"><a href="#HTTP-的状态码" class="headerlink" title="HTTP 的状态码"></a>HTTP 的状态码</h2><ol><li>200：成功，服务器已经处理了请求。</li><li>204：无内容，服务器成功处理了请求，但没有返回内容。</li><li>404：未找到对应的请求内容。</li><li>500：服务器内容报错。</li></ol><h2 id="HTTP-的-Cookie"><a href="#HTTP-的-Cookie" class="headerlink" title="HTTP 的 Cookie"></a>HTTP 的 Cookie</h2><ol><li>http 的协议是无状态的，那么每一次网页的流转都需要重新登录。为了解决这个问题，引入了 cookie。</li><li>当客户端第一次向服务器发送请求的时候，服务端会生成 cookie 。记录请求者信息，并把这个 cookie 在响应中添加并返回给客户端。</li><li>当客户端第二次向服务器发送请求时，会在请求中添加之前的 cookie 。服务器接收到这个请求的时候会先去检查对应的 cookie 信息，根据是否已经存在，返回不同的结果。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2021/09/02/shu/"/>
      <url>/2021/09/02/shu/</url>
      
        <content type="html"><![CDATA[<h1 id="树-05"><a href="#树-05" class="headerlink" title="树_05"></a>树_05</h1><h2 id="关于二叉树的定义"><a href="#关于二叉树的定义" class="headerlink" title="关于二叉树的定义"></a>关于二叉树的定义</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> val<span class="token punctuation">;</span>            TreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="计算一颗二叉树有多少节点"><a href="#计算一颗二叉树有多少节点" class="headerlink" title="计算一颗二叉树有多少节点"></a>计算一颗二叉树有多少节点</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**         * 计算一颗二叉树有多少节点         */</span>        <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="实现一颗二叉树的反转"><a href="#实现一颗二叉树的反转" class="headerlink" title="实现一颗二叉树的反转"></a>实现一颗二叉树的反转</h2><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * 实现一颗二叉树的反转         */</span>        TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//先把 root 两边的子节点反转</span>            TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//让左右子节点的子节点继续反转</span>            <span class="token comment" spellcheck="true">//此时可以把子节点看成 (root) 节点去理解</span>            <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="连接同一层二叉树相邻的两个节点"><a href="#连接同一层二叉树相邻的两个节点" class="headerlink" title="连接同一层二叉树相邻的两个节点"></a>连接同一层二叉树相邻的两个节点</h2><pre class=" language-java"><code class="language-java">       <span class="token comment" spellcheck="true">/**         * 把二叉树的每层节点都用 next 指针连接起来         * (ERROR) 这个方法有个问题，那就是不属于同一个父节点的两个子节点无法相连         */</span>        TreeNode <span class="token function">connect</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null <span class="token operator">||</span> root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//连接左右两个节点</span>            root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>next <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归遍历左子节点</span>            <span class="token function">connect</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归遍历右子节点</span>            <span class="token function">connect</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 把二叉树的每层节点都用 next 指针连接起来         * 是不是可以转化成把相邻的两个节点连接起来，然后借用辅助函数去实现         */</span>        TreeNode <span class="token function">connects</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>TreeNode n1<span class="token punctuation">,</span> TreeNode n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n1 <span class="token operator">==</span> null <span class="token operator">||</span> n2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//连接左右两个节点，这个是关键，这就使得两个节点建立了关系</span>            n1<span class="token punctuation">.</span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归遍历相同父节点的两个子节点</span>            <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> n1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归遍历跨父节点的两个子节点</span>            <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="构建最大二叉树"><a href="#构建最大二叉树" class="headerlink" title="构建最大二叉树"></a>构建最大二叉树</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> val<span class="token punctuation">;</span>            TreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxVal<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 题目的意思是：给定一个不含重复元素的整数数组，构造一颗最大二叉树。         * 要求是：         * 1：二叉树的根是数组的最大元素。         * 2：左子树是数组最大元素左边部分构造出来的最大二叉树。         * 3：右子树是数组最大元素右边部分构造出来的最大二叉树。         *         * 对于构造二叉树，根节点要做的就是想办法把自己构建出来。         * 其实对于整个数组来说，找到最大值后，余下的部分，又可以看作新的数组，然后在新的数组里在找到最大值，以此循环         * 根据以上的思路分析，很明显递归方法比较适合         */</span>        <span class="token comment" spellcheck="true">//伪代码</span>        TreeNode <span class="token function">constructMaxTree01</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据题目的意思，很明显 6 已经是树的根了，那么数字 6 左边的就只有是左子树，在 6 的左子树中在继续构造同样的继续递归</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">constructMaxTree01</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6 右边的就只有是右子树，在 6 的右子树中在继续构造同样的继续递归</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">constructMaxTree01</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//伪代码在详细一点</span>        TreeNode <span class="token function">constructMaxTree02</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不断寻找最大值的过程</span>            <span class="token keyword">int</span> maxVal <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxVal<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxVal <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//找到最大值构造树的根，然后递归左，右子树</span>            TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//但这这里能明显发觉，在同一个方法中是无法实现的，需要构建一个辅助函数来操作</span>            <span class="token comment" spellcheck="true">//递归左子树</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">constructMaxTree02</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归右子树</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">constructMaxTree02</span><span class="token punctuation">(</span><span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//完整代码</span>        TreeNode <span class="token function">constructMaxTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">bulid</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TreeNode <span class="token function">bulid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lo <span class="token operator">></span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxVal <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxVal <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">bulid</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">bulid</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历方式</title>
      <link href="/2021/09/02/er-cha-shu-de-bian-li-fang-shi/"/>
      <url>/2021/09/02/er-cha-shu-de-bian-li-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的遍历方式-04"><a href="#二叉树的遍历方式-04" class="headerlink" title="二叉树的遍历方式_04"></a>二叉树的遍历方式_04</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二叉树的遍历分为：先序遍历，中序遍历，后续遍历</span>        <span class="token comment" spellcheck="true">// 定义一颗二叉树</span>        <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> val<span class="token punctuation">;</span>            TreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 先序遍历</span>        <span class="token keyword">void</span> <span class="token function">DFS01</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">DFS01</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">DFS01</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 中序遍历</span>        <span class="token keyword">void</span> <span class="token function">DFS02</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">DFS02</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">DFS02</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 后续遍历</span>        <span class="token keyword">void</span> <span class="token function">DFS03</span> <span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">DFS03</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">DFS03</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 二叉树遍历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是递归</title>
      <link href="/2021/09/02/shi-me-shi-di-gui/"/>
      <url>/2021/09/02/shi-me-shi-di-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是递归-03"><a href="#什么是递归-03" class="headerlink" title="什么是递归_03"></a>什么是递归_03</h1><h2 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h2><p>递归是函数调用时的一个概念，通俗点讲就是：方法自己调用自己。</p><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>首先使用递归的时候，需要满足两个条件：</p><ol><li>递归出口（终止递归的条件）</li><li>递归表达式<br>技巧：将问题切割成两个部分（1和整体的思想），找到递归表达式即可。</li></ol><ul><li>举例：<br>问题：求1到100以内的和<br>for 循环来写</li></ul><pre class=" language-java"><code class="language-java">     <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="递归思想"><a href="#递归思想" class="headerlink" title="递归思想"></a>递归思想</h2><p>先将问题切割成两部分，通过公式我们可以看出：1+2+3+…+100可以等价于：(1+2+3+…+99)+100。同时可以将1+2+3+…+99在看成一个整体，而这个整体要做的事情和我们初始化（求和）相同。<br>利用公式化的思想，上面的分析可以写成：sun(n-1)+n样式的表达式。<br>表达式已经有了，那么递归出口呢？继续分析我们发现：</p><ol><li>如果n=1，那么返回值为1.</li><li>如果n=2，那么返回值为3.</li><li>如果n=3，那么返回值为6.</li></ol><p>因此递归出口可以取：n=1时的返回值1。<br>综上，用代码表示如下：（递归写法）</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 递归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择_冒泡_快速_插入</title>
      <link href="/2021/09/02/xuan-ze-mou-pao-kuai-su-cha-ru/"/>
      <url>/2021/09/02/xuan-ze-mou-pao-kuai-su-cha-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="选择-冒泡-快速-插入"><a href="#选择-冒泡-快速-插入" class="headerlink" title="选择 _ 冒泡 _ 快速 _ 插入"></a>选择 _ 冒泡 _ 快速 _ 插入</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>先从未排序的序列中选择最大（小）的元素，放到序列的起始位置。</li><li>在从余下的序列中依次选择元素放到以完成排序的元素末尾。</li><li>寻找最大（小）的元素需要遍历一次数组。for(int i = 0; i &lt; arr.length; i++) {}。</li><li>在寻找余下的元素，依然需要再次遍历余下的数组，只不过此时的开始位置发生了变化。for(int j = i+1; j &lt; arr.lengyh; j++) {}。</li><li>整体的思路也就是嵌套遍历两次数组。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">// 寻找最小元素</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selSort01</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 遍历数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 从第二个数组开始寻找数组中余下数组中最小的那个元素</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 满足条件后完成元素的交换</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h3><p>上面的方法就是一个简单的选择排序。但它存在一个可以优化的问题。</p><ol><li>在寻找最小元素的时候，如果我有两个元素比数组上的第一个元素要小，那么我要交换两次元素。</li><li>能不能直接找到对应的最小的那个元素，完成一次交换？</li></ol><h3 id="修改后的代码"><a href="#修改后的代码" class="headerlink" title="修改后的代码"></a>修改后的代码</h3><pre class=" language-java"><code class="language-java">       <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selSort02</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 遍历数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 默认第一个数据元素为最小值</span>                <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 从第二个数值开始，找到余下数组中最小的那个元素</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        min <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 找到最小的那个元素，把它放到合适的位置</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>第一位的元素和第二位的元素比较，如果第一位的元素大于第二位的元素，那么两个元素互换位置。</li><li>当所有元素都交换一遍后，排序结束。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-java"><code class="language-java">      <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maoPao01</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="优化思路-1"><a href="#优化思路-1" class="headerlink" title="优化思路"></a>优化思路</h3><p>这样写整体思路是对的，但如果去运行就会发现会报错。</p><p><strong>原因如下：</strong></p><ol><li>第一个元素其实是不和自身去比较的，因此i &lt; arr.length-1。同理 j &lt; arr.lengt-1。</li><li>排序的操作其实是在第二个循环之中的，也就是 j 的操作中，但这个位置的元素是从首位开始的，因此 j = 0。</li><li>完成第一轮的排序后，在排序的时候，之前已经排好的元素是不参加比较的，因此 j &lt; arr.length-1-i。这个时候 i 的作用也就体现出来了，它其实是控制排序次数的。</li></ol><h3 id="修改后的代码-1"><a href="#修改后的代码-1" class="headerlink" title="修改后的代码"></a>修改后的代码</h3><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maoPao01</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 认真思考会发现，如果元素有五个，那么其实排序的次数应该是4次。</span>            <span class="token comment" spellcheck="true">// 因此 i &lt; arr.length-1。</span>            <span class="token comment" spellcheck="true">// 排序其实都是在第二个 for 循环里进行的，那么 j 的首位置应该是 0。</span>            <span class="token comment" spellcheck="true">// 如果第一次排序完成，那么第二次排序其实是不需要在排第一次排序后的元素的，如何控制这个位置，其实就是第一个 for 循环起到的作用。</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>在数组中找一个支点，经过一趟排序后，支点左边的数都比支点小，支点右边的数都比支点大。</li><li>整体思路分为两步：第一步寻找这个支点，这个支点可以任意。第二步完成第一步的排序。</li><li>排序过程如下：<ol><li>假定支点为最左边的元素：int tmp = arr[left]。</li><li>从数组的最右边开始，寻找比支点位置元素小的元素位置，然后停下（j–）。</li><li>从数组的最左边开始，寻找比支点位置元素大的元素位置，然后停下（i++）。</li><li>交换两元素的位置（`int temp = a[i]; a[i] = a[j]; a[j] = temp;）。</li><li>重复上述操作，直到 i 和 j 的位置重叠（i==j）。</li><li>交换支点位置上的元素和 i 所指示位置上的元素（a[left] = a[i];a[i] = pviot;）。</li><li>上述操作完成，此时：支点左边的元素都比支点小，支点右边的数据元素都比支点大。</li><li>然后对左边的元素进行上述同样的操作，对右边的元素进行上述同样的操作。</li></ol></li><li>分析上述操作，可以发现，无论是排左边的元素还是右边的元素，都是在重复之前的操作，这个时候根据递归中整体和部分的关系，这一块的操作，可以借用递归来实现。</li><li>而递归的出口，就是当 i==j 的时候，当满足这个条件时，交换对应元素位置后，排序完成。</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querSort01</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    k <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    m <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="优化思路-2"><a href="#优化思路-2" class="headerlink" title="优化思路"></a>优化思路</h3><p>上面的代码写道最后会发现，无法使用递归了。</p><p>整体思路没问题，但会发现当满足右边的数据比支点数据小，左边的数据比支点的数据大时，无法在交换数据元素。</p><p>遍历数组元素的时候，当满足一定条件的时候关键字 while 也是可以做到的。</p><h3 id="修改后的代码-2"><a href="#修改后的代码-2" class="headerlink" title="修改后的代码"></a>修改后的代码</h3><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querSort02</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用递归，就要有递归结束的条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 支点数据在代码后续容易改变，采用临时变量存储最为方便</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 采用两个临时变量，代替元素移动</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 所有的操作都必须满足这个基本条件</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 从右边开始。寻找比支点小的元素</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 从左边开始，寻找比支点大的元素</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 找到对应元素后，交换彼此的位置</span>                <span class="token keyword">int</span> point <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> point<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 上述的操作都是在 （i &lt; j） 这个条件下进行的。</span>            <span class="token comment" spellcheck="true">// 在这个方法中，i 和 j 的关系只有 （i &lt; j） 或者 （i == j）。</span>            <span class="token comment" spellcheck="true">// 那么以下的操作就默认了是在（i == j） 的条件下进行的。</span>            arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 上述完成第一轮的排序，接下来调用递归即可。</span>            <span class="token function">querSort02</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">querSort02</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>默认待排序的数组第一个元素是有序的，把第二个元素到最后一个元素当作未排序的序列。</li><li>依次比较未排序的数组元素与第一个元素的大小关系，如果比第一个元素小，则交换位置。</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">inSort01</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 因为第一个元素默认有序，所以这里从第二个位置开始</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里这样写有一个问题，那就是当前两个排序完成后，第三个数据元素不会在与第一个数据元素比较。</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="优化思路-3"><a href="#优化思路-3" class="headerlink" title="优化思路"></a>优化思路</h3><p>上面的代码有一个问题，那就是：第三个数据元素不会与第一个数据元素进行比较，只会比较相邻位置的两个数据元素。</p><p>如果要解决上述的问题，就需要在引入一个变量，在相邻的位置的数据元素交换位置后，自动相减，以完成和初始位置上的元素进行比较。</p><p>因此可以引入变量 j 。在初始的时候，使它的值和 i 相等，完成一次比较的时候，在自动相减，这样 i 的值控制自增，j 的值控制自减。</p><p>另外就是完成某一动作的重复操作的时候，使用关键字 While 。</p><h3 id="修改后的代码-3"><a href="#修改后的代码-3" class="headerlink" title="修改后的代码"></a>修改后的代码</h3><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">inSort02</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 因为第一个元素默认有序，所以这里从第二个位置开始</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 定义 j 变量，负责控制自减。</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 当满足上一位已经排序好的元素比下一位元素的值大的时候，开始交换。</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 完成上面操作后 arr[j-1] 这个位置上是没有值的。</span>                    <span class="token comment" spellcheck="true">// j-- 在进入循环条件的时候，arr[j] 这个位置的元素是空的，元素的值在 tmp 那里。所以条件之中 arr[j-1] > tmp。</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 当这两个值不再相等的时候，完成下一步的交换。注意这个是 j 的值和一开始赋值给 j 的值是不同的。</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2021/09/02/shu-ju-jie-gou/"/>
      <url>/2021/09/02/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数据结构的存储方式"><a href="#数据结构的存储方式" class="headerlink" title="数据结构的存储方式"></a>数据结构的存储方式</h2><ol><li>数组</li><li>链表</li></ol><p><strong>数组</strong></p><p>数组由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。</p><p><strong>链表</strong></p><p>链表因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。</p><h2 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h2><p><strong>对数组的遍历</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对数组的迭代遍历</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>对单链表的访问</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//基本的单链表结构</span>    <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        ListNode next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//迭代访问一个单链表</span>    <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span> p <span class="token operator">!=</span> null<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归访问一个单链表</span>    <span class="token keyword">void</span> <span class="token function">traverses</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverses</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>对二叉树的访问</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//基本二叉树的定义</span>    <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归对二叉树的访问</span>    <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>补充个知识</strong></p><p>二叉树常用的访问方式：</p><ol><li>前序遍历：（根节点—&gt; 左节点—&gt;右节点）</li><li>中序遍历：（左节点—&gt; 根节点—&gt;右节点）</li><li>后续遍历：（左节点—&gt; 右节点—&gt;根节点）</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka_彻底删除Topic</title>
      <link href="/2020/12/29/kafka-che-di-shan-chu-topic/"/>
      <url>/2020/12/29/kafka-che-di-shan-chu-topic/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-彻底删除Topic"><a href="#Kafka-彻底删除Topic" class="headerlink" title="Kafka_彻底删除Topic"></a>Kafka_彻底删除Topic</h1><h3 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h3><p>生产者可以在生产数据，也可以创建<code>Topic</code>，但消费者消费不到数据。</p><p>处理方式：彻底删除所有的 <code>Topic</code>，然后在创建新的 <code>Topic</code>，生产者在生产，消费者可以消费。</p><h3 id="彻底删除Topic"><a href="#彻底删除Topic" class="headerlink" title="彻底删除Topic"></a>彻底删除Topic</h3><p>1：先把 <code>Kafka</code>停下。</p><p>2：删除 <code>Kafka</code>存储目录（ <code>server.properties</code> 文件 <code>log.dirs</code> 配置，默认为 <code>"/tmp/kafka-logs"</code> ）相关 <code>topic</code> 目录。</p><p>3：配置文件中 <code>server.properties</code> 配置<code>delete.topic.enable=true</code>，执行<br><code>bin/kafka-topics.sh --bootstrap-server master01:9092 --delete --topic topic_start</code></p><p>4：进入ZK的bin 目录执行 <code>zkCli.sh -server master01:2181</code>,然后执行 <code>ls /brokers/topics</code>, 在然后执行 <code>rmr /brokers/topics/【topic name】</code></p><h3 id="解释说明："><a href="#解释说明：" class="headerlink" title="解释说明："></a>解释说明：</h3><p>如果配置文件中 <code>server.properties</code> 没有配置<code>delete.topic.enable=true</code>，那么执行命令删除 <code>Topic</code> 的时候会被标记<code>marked for deletion</code>。</p><p>进入 <code>ZK</code> ，（接第四步 ）执行 <code>ls /admin/delete_topics/【topic name】</code> 删除即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka_高可用</title>
      <link href="/2020/12/29/kafka-gao-ke-yong/"/>
      <url>/2020/12/29/kafka-gao-ke-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-高可用"><a href="#Kafka-高可用" class="headerlink" title="Kafka_高可用"></a>Kafka_高可用</h1><p>为了更好的做负载均衡，<code>Kafka</code> 尽量将所有的 <code>Partition</code> 均匀分配到整个集群上。一个典型的部署方式是一个 <code>Topic</code> 的 <code>Partition</code> 数量大于 <code>Broker</code> 的数量。同时为了提高 <code>Kafka</code> 的容错能力，也需要将同一个 <code>Partition</code> 的 <code>Replica</code> 尽量分散到不同的机器。实际上，如果所有的 <code>Replica</code> 都在同一个 <code>Broker</code> 上，那一旦该 <code>Broker</code> 宕机，该 <code>Partition</code> 的所有 <code>Replica</code> 都无法工作，也就达不到 <code>HA</code> 的效果。同时，如果某个 <code>Broker</code> 宕机了，需要保证它上面的负载可以被均匀的分配到其它幸存的所有 <code>Broker</code> 上。</p><p><strong>Kafka分配Replica的算法如下：</strong></p><ol><li>将所有 <code>Broker</code>（假设共 <code>n</code> 个 <code>Broker</code> ）和待分配的 <code>Partition</code> 排序。</li><li>将第 <code>i</code> 个 <code>Partition</code> 分配到第<code>（i mod n ）</code>个 <code>Broker</code> 上。</li><li>将第 <code>i</code> 个 <code>Partition</code> 的第 <code>j</code> 个 <code>Replica</code> 分配到第<code>（(i + j) mode n）</code>个 <code>Broker</code> 上。</li></ol><p> <code>Producer</code>在发布消息到某个 <code>Partition</code> 时，先通过 <code>ZooKeeper</code> 找到该 <code>Partition</code> 的 <code>Leader</code> ，然后无论该 <code>Topic</code> 的 <code>ReplicationFactor</code> 为多少，<code>Producer</code> 只将该消息发送到该 <code>Partition</code> 的 <code>Leader</code> 。<code>Leader</code> 会将该消息写入其本地 <code>Log</code>。每个 <code>Follower</code> 都从 <code>Leader Pull</code> 数据。这种方式上，<code>Follower</code> 存储的数据顺序与 <code>Leader</code> 保持一致。<code>Follower</code> 在收到该消息并写入其 <code>Log</code> 后，向 <code>Leader</code> 发送 <code>ACK</code>。一旦 <code>Leader</code> 收到了 <code>ISR</code> 中的所有 <code>Replica</code> 的<code>ACK</code> ，该消息就被认为已经 <code>Commit</code>了，<code>Leader</code> 将增加 <code>HW</code> 并且向 <code>Producer</code> 发送 <code>ACK</code>。</p><p>为了提高性能，每个 <code>Follower</code> 在接收到数据后就立马向 <code>Leader</code> 发送 <code>ACK</code>，而非等到数据写入 <code>Log</code> 中。因此，对于已经 <code>Commit</code>的消息，<code>Kafka</code> 只能保证它被存于多个 <code>Replica</code> 的内存中，而不能保证它们被持久化到磁盘中，也就不能完全保证异常发生后该条消息一定能被 <code>Consumer</code> 消费。</p><p><code>Consumer</code> 读消息也是从 <code>Leader</code> 读取，只有被 <code>Commit</code> 过的消息才会暴露给 <code>Consumer</code>。</p><p><img src="/2020/12/29/kafka-gao-ke-yong/20201021112958888_5832.png" alt="流程图"></p><p><strong>对于Kafka而言，定义一个Broker是否“活着”包含两个条件：</strong></p><ul><li>1是它必须维护与 <code>ZooKeeper</code> 的 <code>Session</code>（这个通过 <code>ZooKeeper</code> 的 <code>Heartbeat</code> 机制来实现）。</li><li>2是 <code>Follower</code> 必须能够及时将 <code>Leader</code> 的消息复制过来，不能“落后太多”。</li></ul><p><code>Leader</code>会跟踪与其保持同步的 <code>Replica</code> 列表，该列表称为 <code>ISR</code>（即 <code>In-Sync Replica</code> ）。如果一个 <code>Follower</code> 宕机，或者落后太多，<code>Leader</code> 将把它从 <code>ISR</code> 中移除。这里所描述的“落后太多”指 <code>Follower</code> 复制的消息落后于 <code>Leader</code> 后的条数超过预定值（该值可在<code>$KAFKA_HOME/config/server.properties</code> 中通过 <code>replica.lag.max.messages</code> 配置，其默认值是 <code>4000</code>）或者 <code>Follower</code> 超过一定时间（该值可在 <code>$KAFKA_HOME/config/server.properties</code> 中通过<code>replica.lag.time.max.ms</code> 来配置，其默认值是<code>10000</code> ）未向<code>Leader</code> 发 <code>Fetch</code>请求。</p><p><code>Kafka</code> 的复制机制既不是完全的同步复制，也不是单纯的异步复制。事实上，完全同步复制要求所有能工作的 <code>Follower</code> 都复制完，这条消息才会被认为 <code>Commit</code>，这种复制方式极大的影响了吞吐率（高吞吐率是 <code>Kafka</code> 非常重要的一个特性）。而异步复制方式下，<code>Follower</code> 异步的从 <code>Leader</code> 复制数据，数据只要被 <code>Leader</code> 写入 <code>Log</code>就被认为已经 <code>Commit</code>，这种情况下如果 <code>Follower</code> 都复制完都落后于 <code>Leader</code>，而如果 <code>Leader</code> 突然宕机，则会丢失数据。而 <code>Kafka</code> 的这种使用 <code>ISR</code> 的方式则很好的均衡了确保数据不丢失以及吞吐率 <code>Follower</code> 可以批量的从 <code>Leader</code> 复制数据，这样极大的提高复制性能（批量写磁盘），极大减少了 <code>Follower</code> 与 <code>Leader</code> 的差距。</p><p>需要说明的是，<code>Kafka</code> 只解决 <code>Fail/Recover</code>，不处理“<code>Byzantine</code> ”（“拜占庭”）问题。一条消息只有被 <code>ISR</code> 里的所有 <code>Follower</code> 都从 <code>Leader</code> 复制过去才会被认为已提交。这样就避免了部分数据被写进了 <code>Leader</code>，还没来得及被任何<code>Follower</code> 复制就宕机了，而造成数据丢失（ <code>Consumer</code> 无法消费这些数据）。而对于<code>Producer</code> 而言，它可以选择是否等待消息 <code>Commit</code>，这可以通过 <code>request.required.acks</code> 来设置。这种机制确保了只要ISR有一个或以上的 <code>Follower</code>，一条被<code>Commit</code> 的消息就不会丢失。</p><p><strong>Leader选举本质上是一个分布式锁，有两种方式实现基于ZooKeeper的分布式锁：</strong></p><ul><li>节点名称唯一性：多个客户端创建一个节点，只有成功创建节点的客户端才能获得锁。</li><li>临时顺序节点：所有客户端在某个目录下创建自己的临时顺序节点，只有序号最小的才获得锁。</li></ul><p>一种非常常用的选举 <code>Leader</code>的方式是“<code>Majority Vote</code> ”（“少数服从多数”），但 <code>Kafka</code> 并未采用这种方式。这种模式下，如果我们有 <code>2f+1</code> 个 <code>Replica</code>（包含 <code>Leader</code> 和 <code>Follower</code> ），那在<code>Commit</code> 之前必须保证有 <code>f+1</code> 个 <code>Replica</code>复制完消息，为了保证正确选出新的 <code>Leader</code>， <code>Fail</code>的 <code>Replica</code> 不能超过 <code>f</code> 个。因为在剩下的任意 <code>f+1</code> 个 <code>Replica</code> 里，至少有一个 <code>Replica</code> 包含有最新的所有消息。这种方式有个很大的优势，系统的 <code>Latency</code> 只取决于最快的几个 <code>Broker</code>，而非最慢那个。<code>Majority Vote</code>也有一些劣势，为了保证 <code>Leader Election</code> 的正常进行，它所能容忍的 <code>Fail</code> 的 <code>Follower</code> 个数比较少。如果要容忍 <code>1</code> 个<code>Follower</code> 挂掉，必须要有 <code>3</code> 个以上的 <code>Replica</code>，如果要容忍 <code>2</code> 个<code>Follower</code> 挂掉，必须要有 <code>5</code> 个以上的 <code>Replica</code> 。也就是说，在生产环境下为了保证较高的容错程度，必须要有大量的 <code>Replica</code>，而大量的 <code>Replica</code> 又会在大数据量下导致性能的急剧下降。这就是这种算法更多用在 <code>ZooKeeper</code> 这种共享集群配置的系统中而很少在需要存储大量数据的系统中使用的原因。例如 <code>HDFS</code> 的<code>HA Feature</code> 是基于 <code>Majority-Vote-Basedjournal</code>，但是它的数据存储并没有使用这种方式。</p><p><code>Kafka</code> 在 <code>ZooKeeper</code> 中动态维护了一个 <code>ISR</code>（ <code>In-Sync Replicas</code>），这个 <code>ISR</code> 里的所有 <code>Replica</code> 都跟上了 <code>Leader</code>，只有 <code>ISR</code> 里的成员才有被选为 <code>Leader</code> 的可能。在这种模式下，对于 <code>f+1</code> 个 <code>Replica</code>，一个 <code>Partition</code> 能在保证不丢失已经 <code>Commit</code>的消息的前提下容忍 <code>f</code> 个 <code>Replica</code> 的失败。在大多数使用场景中，这种模式是非常有利的。事实上，为了容忍 <code>f</code> 个 <code>Replica</code>的失败，<code>Majority Vote</code> 和 <code>ISR</code> 在 <code>Commit</code> 前需要等待的 <code>Replica</code> 数量是一样的，但是 <code>ISR</code> 需要的总的 <code>Replica</code> 的个数几乎是 <code>Majority Vote</code> 的一半。虽然 <code>Majority Vote</code> 与 <code>ISR</code> 相比有不需等待最慢的 <code>Broker</code> 这一优势，但是 <code>Kafka</code> 作者认为 <code>Kafka</code> 可以通过 <code>Producer</code> 选择是否被 <code>Commit</code> 阻塞来改善这一问题，并且节省下来的 <code>Replica</code> 和磁盘使得 <code>ISR</code> 模式仍然值得。</p><p>在 <code>ISR</code> 中至少有一个 <code>Follower</code> 时， <code>Kafka</code> 可以确保已经 <code>Commit</code> 的数据不丢失，但如果某个 <code>Partition</code> 的所有 <code>Replica</code> 都宕机了，就无法保证数据不丢失了。这种情况下有两种可行的方案：</p><ul><li>1.等待 <code>ISR</code> 中的任一个 <code>Replica</code>“活”过来，并且选它作为 <code>Leader</code> 。</li><li>2.选择第一个“活”过来的 <code>Replica</code>（不一定是ISR中的）作为 <code>Leader</code> 。</li></ul><p>这就需要在可用性和一致性当中作出一个简单的折衷。如果一定要等待 <code>ISR</code> 中的 <code>Replica</code>“活”过来，那不可用的时间就可能会相对较长。而且如果 <code>ISR</code> 中的所有 <code>Replica</code> 都无法“活”过来了，或者数据都丢失了，这个 <code>Partition</code>将永远不可用。选择第一个“活”过来的 <code>Replica</code> 作为 <code>Leader</code> ，而这个 <code>Replica</code> 不是 <code>ISR</code> 中的 <code>Replica</code> ，那即使它并不保证已经包含了所有已 <code>Commit</code> 的消息，它也会成为 <code>Leader</code>而作为 <code>Consumer</code>的数据源（前文有说明，所有读写都由 <code>Leader</code>完成）。<code>Kafka0.8.*</code> 使用了第二种方式。根据 <code>Kafka</code>的文档，在以后的版本中， <code>Kafka</code> 支持用户通过配置选择这两种方式中的一种，从而根据不同的使用场景选择高可用性还是强一致性。</p><p>最简单最直观的方案是，所有<code>Follower</code> 都在 <code>ZooKeeper</code> 上设置一个<code>Watch</code> ，一旦 <code>Leader</code> 宕机，其对应的 <code>Ephemeral Znode</code> 会自动删除，此时所有 <code>Follower</code> 都尝试创建该节点，而创建成功者（<code>ZooKeeper</code> 保证只有一个能创建成功）即是新的<code>Leader</code>，其它 <code>Replica</code> 即为 <code>Follower</code> 。</p><p><strong>但是该方法会有3个问题：</strong></p><ul><li>1.<code>Split-Brain</code> 这是由 <code>ZooKeeper</code> 的特性引起的，虽然 <code>ZooKeeper</code> 能保证所有 <code>Watch</code> 按顺序触发，但并不能保证同一时刻所有 <code>Replica</code> “看”到的状态是一样的，这就可能造成不同 <code>Replica</code> 的响应不一致。</li><li>2.<code>Herd Effect</code> 如果宕机的那个<code>Broker</code> 上的 <code>Partition</code>比较多，会造成多个 <code>Watch</code> 被触发，造成集群内大量的调整。</li><li>3.<code>ZooKeeper</code> 负载过重 每个 <code>Replica</code> 都要为此在 <code>ZooKeeper</code> 上注册一个 <code>Watch</code> ，当集群规模增加到几千个 <code>Partition</code> 时 <code>ZooKeeper</code> 负载会过重。</li></ul><p><code>Kafka 0.8.*</code> 的 <code>Leader Election</code> 方案解决了上述问题，它在所有 <code>Broker</code> 中选出一个 <code>Controller</code> ，所有 <code>Partition</code> 的 <code>Leader</code> 选举都由 <code>Controller</code> 决定。<code>controller</code> 会将 <code>Leader</code> 的改变直接通过<code>RPC</code> 的方式（比<code>ZooKeeper Queue</code> 的方式更高效）通知需为为此作为响应的 <code>Broker</code> 。同时 <code>controller</code> 也负责增删 <code>Topic</code> 以及 <code>Replica</code> 的重新分配。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka_基础</title>
      <link href="/2020/12/29/kafka-ji-chu/"/>
      <url>/2020/12/29/kafka-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-基础"><a href="#Kafka-基础" class="headerlink" title="Kafka_基础"></a>Kafka_基础</h1><h2 id="Kafka的定义"><a href="#Kafka的定义" class="headerlink" title="Kafka的定义"></a>Kafka的定义</h2><p>一个分布式、分区的、多副本的、多订阅者，基于 <code>Zookeeper</code> 协调的分布式日志系统。采用发布-订阅模式。</p><p><img src="/2020/12/29/kafka-ji-chu/20201015211849232_16247.png" alt="模式"></p><h2 id="Kafka的优点"><a href="#Kafka的优点" class="headerlink" title="Kafka的优点"></a>Kafka的优点</h2><ul><li>解耦。</li><li>冗余（副本）。</li><li>扩展性。</li><li>灵活性&amp;峰值处理能力。</li><li>可恢复性。</li><li>顺序保证。</li><li>缓冲。</li><li>异步通信。</li></ul><h2 id="Kafka中的术语"><a href="#Kafka中的术语" class="headerlink" title="Kafka中的术语"></a>Kafka中的术语</h2><ul><li>整体</li></ul><p><img src="/2020/12/29/kafka-ji-chu/20201015212302349_24730.png" alt="整体框架"></p><ul><li>Broker<br><code>Kafka</code> 集群包含一个或多个服务器，服务器节点称为 <code>Broker</code>。</li></ul><p><code>Broker</code> 存储 <code>Topic</code> 的数据。如果某 <code>Topic</code> 有 <code>N</code> 个 <code>Partition</code>，集群有 <code>N</code> 个 <code>Broker</code>，那么每个 <code>Broker</code> 存储该 <code>Topic</code>的一个 <code>Partition</code>。</p><p>如果某 <code>Topic</code> 有 <code>N</code> 个 <code>Partition</code>，集群有(<code>N+M</code>)个 <code>Broker</code> ，那么其中有 <code>N</code> 个 <code>Broker</code> 存储该 <code>Topic</code> 的一个 <code>Partition</code> ，剩下的 <code>M</code> 个 <code>Broker</code> 不存储该 <code>Topic</code> 的 <code>Partition</code>数据。</p><p>如果某 <code>Topic</code> 有 <code>N</code> 个 <code>Partition</code> ，集群中 <code>Broker</code>数目少于 <code>N</code>个，那么一个 <code>Broker</code> 存储该 <code>Topic</code> 的一个或多个 <code>Partition</code>。在实际生产环境中，尽量避免这种情况的发生，这种情况容易导致 <code>Kafka</code>集群数据不均衡。</p><ul><li>Topic</li></ul><p>每条发布到 <code>Kafka</code>集群的消息都有一个类别，这个类别被称为 <code>Topic</code>。</p><ul><li>Partition</li></ul><p><code>Topic</code> 中的数据分割为一个或多个 <code>Partition</code>。每个 <code>Topic</code> 至少有一个 <code>Partition</code>。每个 <code>Partition</code> 中的数据使用多个 <code>Segment</code> 文件存储。<code>Partition</code> 中的数据是有序的，不同 <code>Partition</code>间的数据丢失了数据的顺序。如果 <code>Topic</code> 有多个 <code>Partition</code>，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将 <code>Partition</code>数目设为1。</p><ul><li>Producer</li></ul><p>生产者即数据的发布者，该角色将消息发布到 <code>Kafka</code> 的 <code>Topic</code>中。<code>Broker</code> 接收到生产者发送的消息后，<code>Broker</code> 将该消息追加到当前用于追加数据的 <code>Segment</code>文件中。生产者发送的消息，存储到一个<code>Partition</code> 中，生产者也可以指定数据存储的 <code>Partition</code>。</p><ul><li>Consumer</li></ul><p>消费者可以从 <code>Broker</code>中读取数据。消费者可以消费多个<code>Topic</code> 中的数据。</p><ul><li>Consumer Group</li></ul><p>每个 <code>Consumer</code> 属于一个特定的 <code>Consumer Group</code>（可为每个 <code>Consumer</code> 指定 <code>Group Name</code>，若不指定 <code>Group Name</code>则属于默认的 <code>Group</code>）。</p><ul><li>Leader</li></ul><p>每个 <code>Partition</code>有多个副本，其中有且仅有一个作为 <code>Leader</code>，<code>Leader</code>是当前负责数据的读写的 <code>Partition</code>。</p><ul><li>Follower</li></ul><p><code>Follower</code>跟随 <code>Leader</code>，所有写请求都通过 <code>Leader</code>路由，数据变更会广播给所有 <code>Follower</code>，<code>Follower</code> 与 <code>Leader</code> 保持数据同步。如果 <code>Leader</code>失效，则从 <code>Follower</code> 中选举出一个新的 <code>Leader</code>。当 <code>Follower</code> 与 <code>Leader</code> 挂掉、卡住或者同步太慢，<code>Leader</code>会把这个 <code>Follower</code> 从“in sync replicas”（ISR）列表中删除，重新创建一个 <code>Follower</code>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka_架构</title>
      <link href="/2020/12/29/kafka-jia-gou/"/>
      <url>/2020/12/29/kafka-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-架构"><a href="#Kafka-架构" class="headerlink" title="Kafka_架构"></a>Kafka_架构</h1><p><img src="/2020/12/29/kafka-jia-gou/20201021093816220_9153.png" alt="Kafka架构"></p><p><img src="/2020/12/29/kafka-jia-gou/20201021094630272_19121.png" alt="Kafka核心组成"></p><ul><li><code>Topic</code> 可以类比为数据库中的库。</li><li><code>Partition</code> 可以类比为数据库中的表。</li><li>一个 <code>Topic</code> 就是一个消息队列，然后它把每个 <code>Topic</code> 又分为很多个 <code>Partition</code> 。</li><li>一个 <code>Topic</code> 可以有多个消费者组。</li><li>同一个消费者组内的消费者在消费同一个 <code>Topic</code> 时，这个 <code>Topic</code> 中相同的数据只能被消费一次，即每个 <code>Partion</code> 只会把消息发给该消费者组中的一个消费者。</li><li>不同的消费者组消费同一个 <code>Topic</code> 互不影响。</li><li>一台Kafka服务器节点就是一个 <code>Broker</code> 。一个集群由多个 <code>Broker</code> 组成。一个 <code>Broker</code> 可以容纳多个 <code>Topic</code> 。</li></ul><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p><code>Topic</code> 就是数据主题，<code>Kafka</code> 建议根据业务系统将不同的数据存放在不同的 <code>Topic</code> 中。</p><ul><li><code>Kafka</code> 中的 <code>Topics</code>总是多订阅者模式，一个 <code>Topic</code> 可以拥有一个或者多个消费者来订阅它的数据。</li><li>一个大的<code>Topic</code> 可以分布式存储在多个 <code>Kafka Broker</code> 中。</li><li><code>Topic</code> 可以类比为数据库中的库。</li><li>一个 <code>Topic</code>就是一个消息队列，然后它把每个 <code>Topic</code> 又分为很多个 <code>Partition</code>。</li><li>在每个 <code>Partition</code> 内部消息强有序，相当于有序的队列，其中每个消息都有个序号 <code>Offset</code> ，比如 0 到 12，从前面读往后面写。</li></ul><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><ul><li>一个 <code>Topic</code> 可以分为多个 <code>Partition</code> ，通过分区的设计，<code>Topic</code> 可以不断进行扩展。一个 <code>Topic</code> 的多个分区分布式存储在多个 <code>Broker</code> (服务器)上。此外通过分区还可以让一个 <code>Topic</code> 被多个 <code>Consumer</code> 进行消费。以达到并行处理。分区可以类比为数据库中的表。</li><li><code>Partition</code> 内部有序，但一个 <code>Topic</code> 的整体（多个<code>Partition</code> 间）不一定有序 <code>Kafka</code> 只保证按一个 <code>Partition</code> 中的顺序将消息发给 <code>Consumer</code> ，<code>Partition中</code>的每条消息都会被分配一个有序的 <code>Id（Offset）</code>，每个 <code>Partition</code> 内部消息是一个强有序的队列，但不保证一个 <code>Topic</code> 的整体（多个 <code>Partition</code> 间）的顺序。</li><li>一个 <code>Partition</code> 对应一个 <code>Broker</code> ，一个 <code>Broker</code> 可以管理多个 <code>Partition</code>。</li><li><code>Partition</code> 可以很简单想象为一个文件，<code>Partition</code> 对应磁盘上的目录，当数据发过来的时候它就往这个 <code>Partition</code> 上面追加，消息不经过内存缓冲，直接写入文件。</li></ul><p><code>Kafka</code> 为每个主题维护了分布式的分区(<code>Partition</code>)日志文件，每个 <code>Partition</code> 在 <code>Kafka</code> 存储层面是 <code>Append Log</code> 。任何发布到此partition的消息都会被追加到 <code>Log</code> 文件的尾部，在分区中的每条消息都会按照时间顺序分配到一个单调递增的顺序编号，也就是我们的 <code>Offset</code> 。<code>Offset</code> 是一个 <code>long</code> 型的数字，我们通过这个 <code>Offset</code> 可以确定一条在该 <code>Partition</code> 下的唯一消息。在 <code>Partition</code>下面是保证了有序性，但是在 <code>Topic</code> 下面没有保证有序性。</p><ul><li>每个 <code>Partition</code> 都会有副本，可以在创建 <code>Topic</code> 时来指定有几个副本。</li></ul><h3 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h3><ul><li><code>Kafka</code> 的存储文件都是按照 <code>Offset</code> 。<code>Kafka</code> 来命名，用 <code>Offset</code> 做名字的好处是方便查找。</li><li>数据会按照时间顺序被不断第追加到分区的一个结构化的 <code>Commit Log</code> 中！每个分区中存储的记录都是有序的，且顺序不可变！</li><li>这个顺序是通过一个称之为 <code>Offset</code> 的 <code>Id</code> 来唯一标识！因此也可以认为 <code>Offset</code> 是有序且不可变的！</li><li>在每一个消费者端，会唯一保存的元数据是 <code>Offset</code>（偏移量）,即消费在 <code>Log</code>中的位置，偏移量由消费者所控制。通常在读取记录后，消费者会以线性的方式增加偏移量，但是实际上，由于这个位置由消费者控制，所以消费者可以采用任何顺序来消费记录。例如，一个消费者可以重置到一个旧的偏移量，从而重新处理过去的数据；也可以跳过最近的记录，从”现在”开始消费。</li></ul><p><strong>Topic拓扑结构</strong><br><img src="/2020/12/29/kafka-jia-gou/20201021102202490_21829.png" alt="结构"></p><p><strong>数据流</strong><br><img src="/2020/12/29/kafka-jia-gou/20201021102238248_207.png" alt="数据流"></p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>消息生产者，就是向 <code>Kafka Broker</code> 发消息的客户端。将记录分配到 <code>Topic</code> 的指定 <code>Partition</code>（分区）中。</p><p><strong>两种发送的机制：</strong></p><ul><li>轮询(<code>Round Robin</code>)</li></ul><p>先随机到某一个<code>Partition</code> 上一直持续的写，大概写个十分钟，再随机到一个 <code>Partition</code> 再去写，所以一般建议生产消息都按照建个 <code>Key</code>来按照 <code>Hash</code> 去分，还可以自定义按照 <code>Key</code>怎么去分。</p><ul><li><code>Key</code> 的 <code>Hash</code></li></ul><p>如果 <code>Key</code> 为 <code>NULL</code>，就是轮询，否则就是按照 <code>Key</code> 的 <code>Hash</code>。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消息消费者，向 <code>Kafka Broker</code>取消息的客户端。</p><ul><li>每个 <code>Consumer</code> 都有自己的消费者组 <code>Group</code>。</li><li>同一个消费者组内的消费者在消费同一个 <code>Topic</code> 时，这个 <code>Topic</code> 中相同的数据只能被消费一次。</li><li>不同的消费者组消费同一个 <code>Topic</code> 互不影响。</li><li>低版本0.9之前将 <code>Offset</code> 保存在 <code>Zookeeper</code> 中，0.9及之后保存在 <code>Kafka</code> 的“<code>__consumer_offsets</code> ”主题中。</li></ul><h3 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h3><p>每个消费者都会使用一个消费组名称来进行标识。同一个组中的不同的消费者实例，可以分布在多个进程或多个机器上。</p><ul><li>一个 <code>Topic</code> 可以有多个消费者组。<code>Topic</code> 的消息会复制（不是真的复制，是概念上的）到所有的 <code>CG</code> ，但每个 <code>Partion</code> 只会把消息发给该 <code>CG</code> 中的一个 <code>Consumer</code> 。</li><li>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个消费者消费；</li><li>消费者组之间互不影响。</li><li>所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</li><li>如果所有的消费者实例在同一消费组中，消息记录会负载平衡到每一个消费者</li><li>实例（单播）。即每个消费者可以同时读取一个 <code>Topic</code> 的不同分区！</li></ul><p>消费者组是 <code>Kafka</code> 用来<strong>实现一个 <code>Topic</code> 消息的广播（发给所有的消费者）和单播（发给任意一个消费者）</strong>的手段。</p><ul><li>如果需要实现广播，只要每个消费者有一个独立的消费者组就可以了。</li><li>如果需要实现单播，只要所有的消费者在同一个消费者组。用消费者组还可以将消费者进行自由的分组而不需要多次发送消息到不同的 <code>Topic</code> 。</li></ul><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p><code>Kafka</code> 集群的 <code>Server</code>，一台 <code>Kafka</code>服务器节点就是一个 <code>Broker</code> ，负责处理消息读、写请求，存储消息，在 <code>Kafka Cluster</code> 这一层这里，其实里面是有很多个 <code>Broker</code> 。</p><ul><li>一个集群由多个 <code>Broker</code> 组成。一个 <code>Broker</code> 可以容纳多个 <code>Topic</code> 。</li><li><code>Broker</code> 是组成 <code>Kafka</code> 集群的节点， <code>Broker</code> 之间没有主从关系，各个 <code>Broker</code> 之间的协调依赖于。</li><li><code>Zookeeper</code>，如数据在哪个节点上之类的。</li><li><code>Kafka</code> 集群中有一个 <code>Broker</code> 会被选举为 <code>Controller</code> ，负责管理集群 <code>Broker</code> 的上下线，所有 <code>Topic</code> 的分区副本分配和 <code>Leader</code> 选举等工作。</li><li><code>Controller</code> 的管理工作都是依赖于 <code>Zookeeper</code> 的。</li></ul><h3 id="Replica副本机制"><a href="#Replica副本机制" class="headerlink" title="Replica副本机制"></a>Replica副本机制</h3><p>副本，为保证集群中的某个节点发生故障时，该节点上的 <code>Partition</code> 数据不丢失，且 <code>Kafka</code> 仍然能够继续工作， <code>Kafka</code> 提供了副本机制，一个 <code>Topic</code> 的每个分区都有若干个副本，一个 <code>Leader</code> 和若干个 <code>Follower</code>。</p><ul><li>日志的分区<code>Partition</code>（分布）在 <code>Kafka</code> 集群的服务器上。每个服务器在处理数据和请求时，共享这些分区。每一个分区都会在已配置的服务器上进行备份，确保容错性。</li><li>每个分区都有一台 <code>Server</code> 作为 “ <code>Leader</code> ”，零台或者多台 <code>Server</code> 作为 <code>Follwers</code> 。<code>Leader Server</code> 处理一切对 <code>Partition</code> （分区）的读写请求，而 <code>Follwers</code> 只需被动的同步 <code>Leader</code> 上的数据。当 <code>Leader</code> 宕机了，<code>Followers</code>中的一台服务器会自动成为新的 <code>Leader</code>。通过这种机制，既可以保证数据有多个副本，也实现了一个高可用的机制！</li><li>同一个 <code>Partition</code> 可能会有多个 <code>Replication</code>（对应 <code>server.properties</code> 配置中的 <code>default.replication.factor=N</code>）。没有 <code>Replication</code>的情况下，一旦 <code>Broker</code> 宕机，其上所有<code>Partition</code> 的数据都不可被消费，同时 <code>Producer</code> 也不能再将数据存于其上的 <code>Patition</code> 。引入 <code>Replication</code> 之后，同一个 <code>Partition</code> 可能会有多个 <code>Replication</code> ，而这时需要在这些 <code>Replication</code> 之间选出一个 <code>Leader</code>，<code>Producer</code> 和 <code>Consumer</code> 只与这个 <code>Leader</code> 交互，其它 <code>Replication</code> 作为 <code>Follower</code> 从 <code>Leader</code> 中复制数据。</li><li>基于安全考虑，每个分区的 <code>Leader</code> 和 <code>Follower</code> 一般会错在在不同的 <code>Broker</code> !</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_安装MySQL</title>
      <link href="/2020/12/29/linux-an-zhuang-mysql/"/>
      <url>/2020/12/29/linux-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-安装MYSQL"><a href="#Linux-安装MYSQL" class="headerlink" title="Linux_安装MYSQL"></a>Linux_安装MYSQL</h1><h2 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h2><p><strong>（Linux下MySQL5.6与MySQL5.7安装方法略有不同）</strong></p><p>mysql-5.6.23-linux-glibc2.5-x86_64.tar.gz</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul><li>查找并删除mysql 有关的文件。</li></ul><pre class=" language-xshell"><code class="language-xshell">find / -name mysqlrm -rf 上边查找到的路径，多个路径用空格隔开#或者下边一条命令即可</code></pre><p>（实际安装中并未执行这一步）</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul><li>上传包到指定位置，解压。</li></ul><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul><li>检查是否有mysql 用户组和mysql 用户。</li></ul><pre class=" language-xshell"><code class="language-xshell">groups mysql</code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><ul><li>添加mysql 用户组和mysql 用户。</li></ul><pre class=" language-xshell"><code class="language-xshell">groupadd mysqluseradd -r -g mysql mysql</code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><ul><li>进入mysql 目录，更改权限。</li></ul><pre class=" language-xshell"><code class="language-xshell">cd mysql/chown -R mysql:mysql ./</code></pre><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><ul><li>执行安装脚本。</li></ul><pre class=" language-xshell"><code class="language-xshell">./scripts/mysql_install_db --user=mysql</code></pre><h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><ul><li>修改当前目录的拥有者为root 用户，修改data 目录的拥有者为mysql。</li></ul><pre class=" language-xshell"><code class="language-xshell">chown -R root:root ./chown -R mysql:mysql data</code></pre><h3 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h3><ul><li>更改mysql 密码。</li></ul><p>先启动mysql</p><pre class=" language-xshell"><code class="language-xshell">./support-files/mysql.server start</code></pre><p>若启动有报错，先查找是否已经有mysql 进程，若有先终止,然后在启动。</p><pre class=" language-xshell"><code class="language-xshell">ps aux|grep mysqlkill -9 上边的进程号#或者下边一条命令即可杀掉所有MySQL进程ps aux|grep mysql|awk '{print $2}'|xargs kill -9//再次启动./support-files/mysql.server start</code></pre><h3 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h3><ul><li>mysql 启动之后，更改密码。</li></ul><pre class=" language-xshell"><code class="language-xshell">./bin/mysqladmin -u root -h localhost.localdomain password 'root'</code></pre><h3 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h3><ul><li>更改之后登录。</li></ul><pre class=" language-xshell"><code class="language-xshell">./bin/mysql -h127.0.0.1 -uroot -proot</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_基础知识</title>
      <link href="/2020/12/29/linux-ji-chu-zhi-shi/"/>
      <url>/2020/12/29/linux-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Linux环境变量加载的顺序"><a href="#1-Linux环境变量加载的顺序" class="headerlink" title="1. Linux环境变量加载的顺序"></a>1. Linux环境变量加载的顺序</h1><ul><li>用户环境变量 ：仅仅只是当前用户使用 ~/.bashrc　　 ~/.bash_profile</li><li>系统环境变量 ：给当前系统中的所有用户使用 /etc/profile</li><li>任何普通用户在进行登录的时候：会同时加载几个环境变量的配置文件：</li><li>按顺序：</li></ul><p>1、/etc/profile</p><p>2、~/.bash_profile</p><p>3、~/.bashrc</p><h1 id="2-查看linux-下现有用户和权限"><a href="#2-查看linux-下现有用户和权限" class="headerlink" title="2. 查看linux 下现有用户和权限"></a>2. 查看linux 下现有用户和权限</h1><ul><li>查看所有用户：cat /etc/passwd</li><li>彻底删除某一个用户：userdel -r hadoop (hadoop是用户)</li><li>查看用户组：cat /etc/group</li><li>删除用户组：groupdel hadoop (hadoop是用户组)</li></ul><h1 id="3-新增用户，赋值root-权限"><a href="#3-新增用户，赋值root-权限" class="headerlink" title="3. 新增用户，赋值root 权限"></a>3. 新增用户，赋值root 权限</h1><ul><li>新增用户 ：adduser hadoop</li><li>赋值root 权限：修改/etc/sudoers文件，找到下面一行，在root下面添加一行“hadoop ALL=(ALL) ALL”.</li></ul><p><strong>各个用户切换命令</strong></p><ul><li>普通用户切换到root 用户：su 和su -</li><li><strong>su 和su - 的区别</strong></li></ul><pre class=" language-markdown"><code class="language-markdown">su切换到 root 用户之后仍然保持旧的（或者说原始用户的）环境.su - 是创建一个新的环境（由 root 用户 <span class="token code keyword">`~/.bashrc`</span> 文件所设置的环境），相当于使用 root 用户正常登录（从登录屏幕登录）。</code></pre><ul><li>root 用户切换到普通用户：su - hadoop</li><li>普通用户切换到普通用户：su - lq (当前登录用户是hadoop)</li></ul><h1 id="4-关闭防火墙"><a href="#4-关闭防火墙" class="headerlink" title="4. 关闭防火墙"></a>4. 关闭防火墙</h1><ul><li>查看：systemctl status firewalld</li><li>关闭：systemctl stop firewalld</li><li>开启：systemctl start firewalld</li><li>禁止开机启动：systemctl disable firewalld</li><li>开机启动：systemctl enable firewalld</li></ul><h1 id="5-本机免密登录"><a href="#5-本机免密登录" class="headerlink" title="5. 本机免密登录"></a>5. 本机免密登录</h1><ol><li>cd ~./.ssh/</li><li>ssh-keygen -t rsa    (一直回车)</li><li>cat id_rsa.pub &gt;&gt;  authorized_keys</li><li>chmod 600 authorized_keys</li></ol><h1 id="6-三台机器配置免密登录"><a href="#6-三台机器配置免密登录" class="headerlink" title="6. 三台机器配置免密登录"></a>6. 三台机器配置免密登录</h1><ul><li>三台机器的hosts 分别配置如下：</li></ul><ol><li>192.168.48.130 master</li><li>192.168.48.131 worker_01</li><li>192.168.48.132 worker_02</li></ol><ul><li>48.131机器下：（/home/hadoop/.ssh）目录</li></ul><p>scp id_rsa.pub <a href="mailto:root@192.168.48.130">root@192.168.48.130</a>:/home/hadoop/.ssh/id_rsa_01</p><ul><li>48.132机器下：（ /home/hadoop/.ssh）目录</li></ul><p>scp id_rsa.pub <a href="mailto:root@192.168.48.130">root@192.168.48.130</a>:/home/hadoop/.ssh/id_rsa_02</p><ul><li>48.130机器下：（/home/hadoop/.ssh）目录</li></ul><ol><li>cat id_rsa_01 &gt;&gt; authorized_keys </li><li>cat id_rsa_02 &gt;&gt; authorized_keys </li><li>scp authorized_keys hadoop@worker_01:/home/hadoop/.ssh/</li><li>scp authorized_keys hadoop@worker_02:/home/hadoop/.ssh/</li></ol><ul><li>48.130,48.131,48.132下</li></ul><p>确保都执行了：</p><p>chmod 600 authorized_keys</p><ul><li>然后每台机器都执行：(三台机器都要执行)</li></ul><ol><li>ssh master</li><li>ssh worker_01</li><li>ssh worker_02</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_集合</title>
      <link href="/2020/12/29/java-ji-he/"/>
      <url>/2020/12/29/java-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><p><strong>ArrayList与LinkedList</strong></p><ul><li>ArrayList：能够自动增长容量的数组，搜索，读取数据的时候效率较高。</li><li>LinkedList：是一个双向的链表，添加，和删除数据的时候效率较高。</li></ul><p><strong>List</strong></p><ul><li>ArrayList<ul><li>底层数据结构是数组，线程不安全。</li><li>ArrayList是基于动态数组实现的，在增删的时候，需要数组的拷贝复制。</li><li>ArrayList的默认初始化容量是10，每次扩充的时候增加原先容量的一半，也就是原来的1.5倍。</li><li>删除元素的时候，不会减少容量，若希望减少容量，则需要调用trimToSize()。</li><li>它不是线程安全的，它能存放null值。</li></ul></li><li>LinkedList<ul><li>底层数据结构是链表，线程不安全。</li></ul></li><li>Vector<ul><li>底层数据结构是数组，现场安全。</li></ul></li></ul><p><strong>Map</strong></p><ul><li>HashMap<ul><li>在JDK8中，HashMap的底层是：数组+链表（散列表）+红黑树。</li><li>在散列表中有装载因子这个属性，当 装载因子*初始化容量 小于散列表元素的时候，该散列表会在散列，扩容2倍。</li><li>装载因子默认是0.75。</li><li>装载因子过大，可以减少散列表的在散列（扩展），但同时会导致散列表冲突的可能性变大（散列冲突也是耗性能的一个操作，要得操作链表（红黑树））</li><li>装载因子过小，可以减少散列冲突的可能，但同时扩容的次数就会变的很大多。</li><li>初始容量的默认值是16。</li><li>初始量过大，那么遍历的速度就会被影响。</li><li>初始量过小，散列在散列（扩容）次数就会变多，扩容也是一件非常耗费性能的一件事。</li><li>HashMap并不是直接拿key的哈希值来用的，它会将key的哈希值的高16为进行异或操作，这样就使得将元素放入哈希表的时候增加了一定的随机性。</li><li>注意：并不是桶上有8位元素的时候它就变成了红黑树，它的同时满足散列表的容量大于64才可以。</li></ul></li><li>LinkedHashMap<ul><li>LinkedHashMap底层是散列表和双向链表。</li></ul></li><li>TreeMap<ul><li>TreeMap的底层是红黑树。</li></ul></li></ul><p><strong>Set</strong></p><ul><li>Set<ul><li>底层就是Map。</li></ul></li><li>HashSet<ul><li>无序，允许为null，底层是HashMap（散列表+红黑树），非线性同步。</li></ul></li><li>TreeSet<ul><li>有序，不允许为null，底层是TreeMap（红黑树），非线性同步。</li></ul></li><li>LinkedHashSet<ul><li>迭代有序，允许为null，底层是HashMap+双向链表，非线性同步。</li></ul></li></ul><p><strong>面试题目</strong></p><ul><li>Java中HashMap的key值要是为类对象则该类需要满足什么条件？<ul><li>需要同时重写该类的hashCode()方法和它的equals()方法。</li><li>在插入元素的时候是先算出该对象的hashCode。如果hashcode相等话的。那么表明该对象是存储在同一个位置上的。</li><li>如果调用equals()方法，两个key相同，则替换元素。</li><li>如果调用equals()方法，两个key不相同，则说明该hashCode仅仅是碰巧相同，此时是散列冲突，将新增的元素放在桶子上。</li><li>只要两个对象的成员变量的值是相等的，那么我们就认为这两个对象是相等的。</li><li>重写了equals()方法，就要重写hashCode()的方法。因为equals()认定了这两个对象相同，而同一个对象调用hashCode()方法时，是应该返回相同的值的！</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_基础</title>
      <link href="/2020/12/29/java-ji-chu/"/>
      <url>/2020/12/29/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础总结"><a href="#Java基础总结" class="headerlink" title="Java基础总结"></a>Java基础总结</h1><p><strong>面向对象的设计原则：</strong></p><ul><li>单一职责原则：减少耦合；提高复用</li><li>接口隔离原则：避免一个类对另外一个类的依赖</li><li>开放封闭原则：模块行为开放，模块功能封闭（对功能进行扩展的时候，排除最少的影响）</li><li>替换原则：之类可以替换父类</li><li>依赖倒置原则：解耦</li></ul><p><strong>&amp;与&amp;&amp;</strong></p><ul><li>&amp;&amp;：具有短路功能，当第一个条件为False时，不会在进行下一步运算。</li></ul><p><strong>装箱与拆箱</strong></p><ul><li>装箱：自动将基本类型数据转换成包装器类型（Int—&gt;Integer）。</li><li>拆箱：自动将包装器类型的数据转换成基本数据类型（Integer—&gt;Int）。</li></ul><p><strong>==与equals</strong></p><ul><li>==<ul><li>基本数据类型比较的时候，判断的是数值的大小。</li><li>非基本类型的数据比较的时候，比较的是变量内存中存放对象的内存地址，用来判断两个对象的内存地址是否相同，即是否指向同一个对象。</li></ul></li><li>equals<ul><li>基本数据类型：不能用来比较。</li><li>非基本数据类型：比较的是两个对象的内容是否相同。</li></ul></li><li>代码描述</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">==</span><span class="token function">b</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>String b <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>a<span class="token operator">==</span><span class="token function">b</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">(</span>String具有常量池功能，当执行String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>的时候，常量池里已经有”a“了，当去执行String b <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>因为常量池里已经有”a“了，所以b就直接去常量池里取值了，这样a和b的地址也就相同了<span class="token punctuation">)</span>。a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>（<span class="token boolean">true</span>）String a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">==</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>（<span class="token boolean">true</span>）</code></pre><p><strong>补充</strong></p><p><strong>String 类和常量池</strong></p><ul><li>String 对象的两种创建方式：<br>String str1 = “abcd”;//先检查字符串常量池中有没有”abcd”，如果字符串常量池中没有，则创建一个，然后 str1 指向字符串常量池中的对象，如果有，则直接将 str1 指向”abcd””；</li></ul><pre class=" language-java"><code class="language-java">String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//堆中创建一个新的对象。</span>String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//堆中创建一个新的对象。</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><ul><li>这两种不同的创建方法是有差别的。第一种方式是在常量池中拿对象；第二种方式是直接在堆内存空间创建一个新的对象。</li><li>记住一点：只要使用 new 方法，便需要创建新的对象。</li></ul><p>String 类型的常量池比较特殊。它的主要使用方法有两种：</p><p>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</p><p>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，JDK1.7之前（不包含1.7）的处理方式是在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用，JDK1.7以及之后的处理方式是在常量池中记录此字符串的引用，并返回该引用。</p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           String s3 <span class="token operator">=</span> <span class="token string">"计算机"</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算机           </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false，因为一个是堆内存中的 String 对象一个是常量池中的 String 对象，           </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true，因为两个都是常量池中的 String 对象。</span>字符串拼接<span class="token operator">:</span>String str1 <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>           String str2 <span class="token operator">=</span> <span class="token string">"ing"</span><span class="token punctuation">;</span>            String str3 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token string">"ing"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量池中的对象           </span>String str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在堆上创建的新的对象                 </span>String str5 <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量池中的对象           </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false           </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true           </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><p>尽量避免多个字符串拼接，因为这样会重新创建对象。如果需要改变字符串的话，可以使用 StringBuilder 或者 StringBuffer。</p><p><strong>String s1 = new String(“abc”);这句话创建了几个字符串对象？</strong></p><p>将创建 1 或 2 个字符串。如果池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</p><ul><li>验证：</li></ul><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 堆内存的地址值         </span>String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。         </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 true</span>a<span class="token operator">=</span>a<span class="token operator">+</span>b与a<span class="token operator">+=</span>ba<span class="token operator">+=</span>b<span class="token punctuation">,</span>会进行隐式的自动类型转换a<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">,</span>不会进行隐式的类型转换</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_JVM</title>
      <link href="/2020/12/29/java-jvm/"/>
      <url>/2020/12/29/java-jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-JVM"><a href="#Java-JVM" class="headerlink" title="Java_JVM"></a>Java_JVM</h1><p><strong>类的加载</strong></p><ul><li>类的加载分为：加载—&gt;链接—&gt;初始化（其中 链接可分为：验证—&gt;准备—&gt;解析）</li><li><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/[加餐]大白话带你认识JVM?id=finally" target="_blank" rel="noopener">Java_Jvm_类加载过程</a></li></ul><p><strong>垃圾收集</strong></p><ul><li><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/JVM垃圾回收" target="_blank" rel="noopener">Java_垃圾收集</a></li></ul><p><strong>Java内存管理</strong></p><ul><li>Java内存的自动管理，主要是针对对象的内存的回收和对象内存的分配，同时，其核心是管理堆内存中对象的分配和回收。</li><li>Java堆，可以划分为：新生代和老年。在细致一点有：Eden 空间、From Survivor、To Survivor 空间等。进一步划分的目的是更好地回收内存，或者更快地分配内存。</li><li>对象优先在Eden区分配。</li><li>大对象直接进入老年代。</li><li>长期存活的对象将进入老年代。</li></ul><p><strong>怎样判断对象是否已经死亡？</strong></p><ul><li>引用计数法<ul><li>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。</li><li>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。所谓对象之间的相互引用问题，如下面代码所示：除了对象 objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为 0，于是引用计数算法无法通知 GC 回收器回收他们。</li></ul></li><li>可达性分析算法<ul><li>这个算法的基本思想就是通过一系列的称为 “GC Roots” 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。</li></ul></li></ul><p><strong>再谈引用</strong></p><p>无论是通过引用计数法判断对象引用数量，还是通过可达性分析法判断对象的引用链是否可达，判定对象的存活都与“引用”有关。</p><p>JDK1.2 之前，Java 中引用的定义很传统：如果 reference 类型的数据存储的数值代表的是另一块内存的起始地址，就称这块内存代表一个引用。</p><p>JDK1.2 以后，Java 对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）。</p><ul><li>1．强引用（StrongReference）</li></ul><p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p><ul><li>2．软引用（SoftReference）</li></ul><p>如果一个对象只具有软引用，那就类似于可有可无的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA 虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><ul><li>3．弱引用（WeakReference）</li></ul><p>如果一个对象只具有弱引用，那就类似于可有可无的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。<br>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><ul><li>4．虚引用（PhantomReference）</li></ul><p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。</p><p>虚引用主要用来跟踪对象被垃圾回收的活动。</p><p>虚引用与软引用和弱引用的一个区别在于： 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><p>特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生。</p><p><strong>可达的对象并非“非死不可”</strong></p><p>即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。</p><p>被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。</p><p><strong>如何判断一个常量是废弃常量</strong></p><p>假如在常量池中存在字符串 “abc”，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 “abc” 就是废弃常量，如果这时发生内存回收的话而且有必要的话，”abc” 就会被系统清理出常量池。</p><p><strong>如何判断一个类是无用的类</strong></p><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？</p><p>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 “无用的类” ：</p><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。<br>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</li></ul><p><strong>垃圾收集算法</strong></p><ul><li>标记-清除算法<ul><li>该算法分为“标记”和“清除”阶段：首先比较出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：</li><li>效率问题</li><li>空间问题（标记清除后会产生大量不连续的碎片）</li></ul></li><li>复制算法<ul><li>为了解决效率问题，“复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</li></ul></li><li>标记-整理算法<ul><li>根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</li></ul></li><li>分代收集算法<ul><li>当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</li><li>比如在新生代中，每次收集都会有大量对象死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</li></ul></li></ul><p><strong>Java内存区域</strong></p><ul><li><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/Java内存区域" target="_blank" rel="noopener">Java_内存区域</a></li></ul><p><strong>Java内存的数据区域</strong></p><p><strong>线程私有</strong></p><ul><li>程序计数器</li></ul><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p><p>另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><p>从上面的介绍中我们知道程序计数器主要有两个作用：</p><p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</p><p>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</p><p><strong>注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p><ul><li>虚拟机栈</li></ul><p>与程序计数器一样，Java 虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。</p><p>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存 (Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。 （实际上，Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）</p><p>局部变量表主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p><ul><li>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。<ul><li>StackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。</li><li>OutOfMemoryError： 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出 OutOfMemoryError 错误。</li></ul></li></ul><p>Java 虚拟机栈也是线程私有的，每个线程都有各自的 Java 虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p><ul><li>扩展：那么方法/函数如何调用？<ul><li>Java 栈可用类比数据结构中栈，Java 栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入 Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。</li></ul></li><li>Java 方法有两种返回方式：<ul><li>return 语句。</li><li>抛出异常。</li></ul></li></ul><p>不管哪种返回方式都会导致栈帧被弹出。</p><ul><li>本地方法栈</li></ul><p>和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种错误。</p><p><strong>线程共享</strong></p><ul><li>堆</li></ul><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</p><p>Java世界中“几乎”所有的对象都在堆中分配，但是，随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从jdk 1.7开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。</p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作GC 堆（Garbage Collected Heap）.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。进一步划分的目的是更好地回收内存，或者更快地分配内存。</p><ul><li>在 JDK 7 版本及JDK 7 版本之前，堆内存被通常被分为下面三部分：<ul><li>新生代内存(Young Generation)</li><li>老生代(Old Generation)</li><li>永生代(Permanent Generation)</li></ul></li></ul><p>JDK 8 版本之后方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p>堆这里最容易出现的就是 OutOfMemoryError 错误，并且出现这种错误之后的表现形式还会有几种，比如：<br>OutOfMemoryError: GC Overhead Limit Exceeded ： 当JVM花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。</p><p>java.lang.OutOfMemoryError: Java heap space :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发java.lang.OutOfMemoryError: Java heap space 错误。(和本机物理内存无关，和你配置的内存大小有关！)</p><ul><li>方法区</li></ul><p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p><p>方法区也被称为永久代。很多人都会分不清方法区和永久代的关系。</p><ul><li>直接内存 (非运行时数据区的一部分)。</li></ul><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</p><p>JDK1.4 中新加入的 NIO(New Input/Output) 类，引入了一种基于通道（Channel） 与缓存区（Buffer） 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆之间来回复制数据。</p><p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><p><strong>类加载过程</strong></p><ul><li>类加载检查—&gt;分配内存—&gt;初始化零值—&gt;设置对象头—&gt;执行init方法。</li><li>类加载检查</li></ul><p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><ul><li>分配内存</li></ul><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。分配方式有 “指针碰撞” 和 “空闲列表” 两种，选择那种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p><p>内存分配的两种方式：（补充内容，需要掌握）</p><p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的。</p><p>内存分配并发问题（补充内容，需要掌握）</p><p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p><p>CAS+失败重试： CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</p><p>TLAB： 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配。</p><ul><li>初始化零值</li></ul><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><ul><li>设置对象头</li></ul><p>初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><ul><li>执行init方法</li></ul><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<init> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <init> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</init></init></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkStreaming_MySQL</title>
      <link href="/2020/12/29/sparkstreaming-mysql/"/>
      <url>/2020/12/29/sparkstreaming-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkStreaming-MySQL"><a href="#SparkStreaming-MySQL" class="headerlink" title="SparkStreaming_MySQL"></a>SparkStreaming_MySQL</h1><p><strong>代码</strong></p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SparkMysql <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkMysql"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> scc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> scc<span class="token punctuation">.</span>textFileStream<span class="token punctuation">(</span><span class="token string">"hdfs://master01:9000/0806"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span>    result<span class="token punctuation">.</span>foreachRDD <span class="token punctuation">{</span> rdd <span class="token keyword">=></span>      rdd<span class="token punctuation">.</span>foreachPartition <span class="token punctuation">{</span> partitionOfRecords <span class="token keyword">=></span>        <span class="token keyword">val</span> connection <span class="token operator">=</span> createConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>        partitionOfRecords<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>record <span class="token keyword">=></span> <span class="token punctuation">{</span>          <span class="token keyword">val</span> sql <span class="token operator">=</span> <span class="token string">"insert into wordcount(word, wordcount) values ('"</span> <span class="token operator">+</span> record<span class="token punctuation">.</span>_1 <span class="token operator">+</span><span class="token string">"',"</span> <span class="token operator">+</span> record<span class="token punctuation">.</span>_2 <span class="token operator">+</span> <span class="token string">")"</span>          connection<span class="token punctuation">.</span>createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    scc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    scc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">def</span> createConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>    DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/taotao?characterEncoding=utf8&amp;amp;useSSL=true"</span><span class="token punctuation">,</span><span class="token string">"MyUser"</span><span class="token punctuation">,</span><span class="token string">"oadat"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>注意事项</li></ul><ol><li>对 <code>SparkStreaming</code> 的数据进行处理，根据官网推荐的写法使用 <code>foreachRDD</code> 方法如下：</li></ol><pre class=" language-scala"><code class="language-scala">dstream<span class="token punctuation">.</span>foreachRDD <span class="token punctuation">{</span> rdd <span class="token keyword">=></span>  rdd<span class="token punctuation">.</span>foreachPartition <span class="token punctuation">{</span> partitionOfRecords <span class="token keyword">=></span>    <span class="token comment" spellcheck="true">// ConnectionPool is a static, lazily initialized pool of connections</span>    <span class="token keyword">val</span> connection <span class="token operator">=</span> ConnectionPool<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>    partitionOfRecords<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>record <span class="token keyword">=></span> connection<span class="token punctuation">.</span>send<span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span>    ConnectionPool<span class="token punctuation">.</span>returnConnection<span class="token punctuation">(</span>connection<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// return to the pool for future reuse</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkStreaming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkStreaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkStreaming_Kafka</title>
      <link href="/2020/12/29/sparkstreaming-kafka/"/>
      <url>/2020/12/29/sparkstreaming-kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkStreaming-Kafka"><a href="#SparkStreaming-Kafka" class="headerlink" title="SparkStreaming_Kafka"></a>SparkStreaming_Kafka</h1><p><strong>代码</strong></p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SparkCount <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkCount"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//val conf = new SparkConf()</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> Array<span class="token punctuation">(</span>brokers<span class="token punctuation">,</span> groupId<span class="token punctuation">,</span> topic<span class="token punctuation">)</span> <span class="token operator">=</span> args    <span class="token keyword">val</span> topics <span class="token operator">=</span> topic<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toSet    <span class="token keyword">val</span> kafkaParams <span class="token operator">=</span> Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> Object<span class="token punctuation">]</span><span class="token punctuation">(</span>      ConsumerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG <span class="token operator">-</span><span class="token operator">></span> brokers<span class="token punctuation">,</span>      ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG <span class="token operator">-</span><span class="token operator">></span> groupId<span class="token punctuation">,</span>      ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span><span class="token punctuation">,</span>      ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG <span class="token operator">-</span><span class="token operator">></span> classOf<span class="token punctuation">[</span>StringDeserializer<span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> messages <span class="token operator">=</span> KafkaUtils<span class="token punctuation">.</span>createDirectStream<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>      ssc<span class="token punctuation">,</span>      LocationStrategies<span class="token punctuation">.</span>PreferConsistent<span class="token punctuation">,</span>      ConsumerStrategies<span class="token punctuation">.</span>Subscribe<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>topics<span class="token punctuation">,</span> kafkaParams<span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> messages<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">val</span> words <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> wordCounts <span class="token operator">=</span> words<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    wordCounts<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>注意事项：</li></ul><ol><li>代码里使用的框架版本和服务器的版本必须一致。</li><li>在本地 <code>IDEA</code> 测试的时候没有任何问题，但提交到服务器的时候却报错误：</li></ol><pre><code>Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/kafka/common/serialization/StringDeserializer...Caused by: java.lang.ClassNotFoundException: org.apache.kafka.common.serialization.StringDeserializer...</code></pre><blockquote><p>分析思路：</p></blockquote><p>spark提交任务是不会用kafka自带的jar包。之前提交的包是 <code>SparkStreamingTest-1.0-SNAPSHOT.jar</code></p><blockquote><p>解决方式：</p></blockquote><ol><li>从把 <code>pom.xml</code> 文件的 <code>&lt;build&gt;</code> 修改为</li></ol><pre><code>&lt;build&gt;        &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                &lt;version&gt;3.6.1&lt;/version&gt;                &lt;configuration&gt;                    &lt;source&gt;1.8&lt;/source&gt;                    &lt;target&gt;1.8&lt;/target&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;            &lt;!-- maven 打包集成插件 --&gt;            &lt;plugin&gt;                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;phase&gt;package&lt;/phase&gt;                        &lt;goals&gt;                            &lt;goal&gt;single&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;                &lt;configuration&gt;                    &lt;descriptorRefs&gt;                        &lt;!-- 将依赖一起打包到 JAR --&gt;                        &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;                    &lt;/descriptorRefs&gt;                    &lt;archive&gt;                        &lt;manifest&gt;                            &lt;!-- 配置主程序 java -jar 默认Class，这里设置为自己的主类的绝对路径 --&gt;                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;                            &lt;mainClass&gt;com.hw.stream.FlumeKafkaStream&lt;/mainClass&gt;                        &lt;/manifest&gt;                    &lt;/archive&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;                &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;                &lt;version&gt;2.15.1&lt;/version&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;goals&gt;                            &lt;goal&gt;compile&lt;/goal&gt;                            &lt;goal&gt;testCompile&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;</code></pre><ol><li>从新打新的 <code>Jar</code> 包 <code>SparkStreamingTest-1.0-SNAPSHOT-jar-with-dependencies.jar</code> 然后提交新的文件到服务器就正常了。(新的 <code>Jar</code> 包，包含了 <code>Kafka</code> 依赖的架包。)</li></ol><p>提交命令：</p><pre class=" language-xshell"><code class="language-xshell">spark-submit \--class com.synway.sparkstreaming.SparkCount \--master local[2] \/home/LogFiles/SparkStreamingTest-1.0-SNAPSHOT-jar-with-dependencies.jar master01:9092 test01 spark-kafka</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkStreaming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkStreaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkStreaming_HDFS</title>
      <link href="/2020/12/29/sparkstreaming-hdfs/"/>
      <url>/2020/12/29/sparkstreaming-hdfs/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkStreaming-HDFS"><a href="#SparkStreaming-HDFS" class="headerlink" title="SparkStreaming_HDFS"></a>SparkStreaming_HDFS</h1><h2 id="Spark-Streaming-监控-Hadoop-的文件夹"><a href="#Spark-Streaming-监控-Hadoop-的文件夹" class="headerlink" title="Spark Streaming 监控 Hadoop 的文件夹"></a>Spark Streaming 监控 Hadoop 的文件夹</h2><p>使用 SparkStreaming 之前，需要先初始化，初始化的代码如下：</p><pre class=" language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>JavaStreamingContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token keyword">val</span> scc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>接下来就是使用，由于有过 SparkCore 的基础，下面直接放代码</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparkHadoopText</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String master <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String appName <span class="token operator">=</span> <span class="token string">"SparkStreamingTest"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaStreamingContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> dStream <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">textFileStream</span><span class="token punctuation">(</span><span class="token string">"hdfs://master01:9000/0806/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> flatMap <span class="token operator">=</span> dStream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> mapToPair <span class="token operator">=</span> flatMap<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> reduceByKey <span class="token operator">=</span> mapToPair<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer v1<span class="token punctuation">,</span> Integer v2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reduceByKey<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reduceByKey<span class="token punctuation">.</span><span class="token function">dstream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveAsTextFiles</span><span class="token punctuation">(</span><span class="token string">"hdfs://master01:9000/0815/"</span><span class="token punctuation">,</span> <span class="token string">"spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> NetWorkWordCount <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"NetWorkWordCount"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> scc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> scc<span class="token punctuation">.</span>textFileStream<span class="token punctuation">(</span><span class="token string">"hdfs://master01:9000/0708"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span>    result<span class="token punctuation">.</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>    scc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    scc<span class="token punctuation">.</span>awaitTermination<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>提交脚本</strong></p><pre class=" language-xshell"><code class="language-xshell"># 本地模式提交应用spark-submit \--class com.spark.java.demo.streaming.SparkHadoopText \--master local[2] \/home/LogFiles/Spark_Java_Demo-1.0-SNAPSHOT.jar</code></pre><ul><li>注意事项：</li></ul><ol><li>提交脚本的时候带上 <code>master local[2]</code> 参数，代码的初始化可以写出如下形式 <code>val conf = new SparkConf()</code> 。</li><li><code>master</code> 的参数至少是 <code>local[2]</code> 形式，因为一个线程负责初始化，一个线程负责处理数据。如果是 <code>local[1]</code> ,那么就没线程负责处理数据了。</li><li>要先启动 <code>SparkStreaming</code> ，再在对应的文件系统中写入数据。</li><li>如果监听的是 <code>val lines = scc.textFileStream("D://test")</code> 路径下的文件，在启动程序后，向 <code>D://test</code> 放入文件，那么数据是不会被解析的。因为 <code>SparkStreaming</code> 监听的是流数据，而向<code>D://test</code> 放入文件，数据不是以流的形式写入的，所以数据不会被监听。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkStreaming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkStreaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkSQL_数据结构</title>
      <link href="/2020/12/29/sparksql-shu-ju-jie-gou/"/>
      <url>/2020/12/29/sparksql-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkSQL-数据结构"><a href="#SparkSQL-数据结构" class="headerlink" title="SparkSQL_数据结构"></a>SparkSQL_数据结构</h1><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>为了支持结构化数据的处理，Spark SQL 提供了新的数据结构 DataFrame。DataFrame 是一个由具名列组成的数据集。</p><h3 id="DataFrame-amp-RDD"><a href="#DataFrame-amp-RDD" class="headerlink" title="DataFrame &amp; RDD"></a>DataFrame &amp; RDD</h3><p><img src="/2020/12/29/sparksql-shu-ju-jie-gou/20201227135647578_8722.png" alt="DataFrame与RDD"></p><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h2><p>Dataset 也是分布式的数据集合，在 Spark 1.6 版本被引入，它集成了 RDD 和 DataFrame 的优点，具备强类型的特点，同时支持 Lambda 函数，但只能在 Scala 和 Java 语言中使用。在 Spark 2.0 后，为了方便开发者，Spark 将 DataFrame 和 Dataset 的 API 融合到一起，提供了结构化的 API(Structured API)，即用户可以通过一套标准的 API 就能完成对两者的操作。</p><h3 id="Dataset-amp-DataFrame-的区别"><a href="#Dataset-amp-DataFrame-的区别" class="headerlink" title="Dataset &amp; DataFrame 的区别"></a>Dataset &amp; DataFrame 的区别</h3><ol><li>在 DataFrame 中，当你调用了 API 之外的函数，编译器就会报错，但如果你使用了一个不存在的字段名字，编译器依然无法发现。</li><li>Dataset 的 API 都是用 Lambda 函数和 JVM 类型对象表示的，所有不匹配的类型参数在编译时就会被发现。</li></ol><h2 id="DataFrame-amp-DataSet-amp-RDD-总结"><a href="#DataFrame-amp-DataSet-amp-RDD-总结" class="headerlink" title="DataFrame &amp; DataSet &amp; RDD 总结"></a>DataFrame &amp; DataSet &amp; RDD 总结</h2><ul><li>RDDs 适合非结构化数据的处理，而 DataFrame &amp; DataSet 更适合结构化数据和半结构化的处理。</li><li>DataFrame &amp; DataSet 可以通过统一的 Structured API 进行访问，而 RDDs 则更适合函数式编程的场景。</li><li>相比于 DataFrame 而言，DataSet 是强类型的 (Typed)，有着更为严格的静态类型检查。</li><li>DataSets、DataFrames、SQL 的底层都依赖了 RDDs API，并对外提供结构化的访问接口。</li></ul><h2 id="Spark-SQL的运行原理"><a href="#Spark-SQL的运行原理" class="headerlink" title="Spark SQL的运行原理"></a>Spark SQL的运行原理</h2><p>DataFrame、DataSet 和 Spark SQL 的实际执行流程都是相同的：</p><ul><li>进行 DataFrame/Dataset/SQL 编程；</li><li>如果是有效的代码，即代码没有编译错误，Spark 会将其转换为一个逻辑计划；</li><li>Spark 将此逻辑计划转换为物理计划，同时进行代码优化；</li><li>Spark 然后在集群上执行这个物理计划 (基于 RDD 操作) 。</li></ul><h3 id="逻辑计划"><a href="#逻辑计划" class="headerlink" title="逻辑计划"></a>逻辑计划</h3><p><img src="/2020/12/29/sparksql-shu-ju-jie-gou/20201227140320552_17530.png" alt="逻辑计划"></p><h3 id="物理计划"><a href="#物理计划" class="headerlink" title="物理计划"></a>物理计划</h3><p><img src="/2020/12/29/sparksql-shu-ju-jie-gou/20201227140400637_13766.png" alt="物理计划"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkSQL_使用</title>
      <link href="/2020/12/29/sparksql-shi-yong/"/>
      <url>/2020/12/29/sparksql-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkSQL-使用"><a href="#SparkSQL-使用" class="headerlink" title="SparkSQL_使用"></a>SparkSQL_使用</h1><h2 id="创建-SparkSession"><a href="#创建-SparkSession" class="headerlink" title="创建 SparkSession"></a>创建 SparkSession</h2><p>SparkSession 是 Dataset 与 DataFrame 编程的入口。</p><ul><li>官方代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SparkSession<span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession  <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark SQL basic example"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"spark.some.config.option"</span><span class="token punctuation">,</span> <span class="token string">"some-value"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// For implicit conversions like converting RDDs to DataFrames</span><span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_</code></pre><ul><li>实际使用</li><li>Scala</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//Scala</span><span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession  <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>Java</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Java</span>SparkSession spark <span class="token operator">=</span> SparkSession  <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h2><p>通过已存在的数据源创建 DataFrame。</p><ul><li>通过 Json 文件创建 DataFrame</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> df <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token string">"examples/src/main/resources/people.json"</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="创建-DataSet"><a href="#创建-DataSet" class="headerlink" title="创建 DataSet"></a>创建 DataSet</h2><p>创建 DataSet 必须对传入的对象序列化</p><ul><li>Xshell</li></ul><pre class=" language-xshell"><code class="language-xshell">//Xshellcase class Person(name: String, age: Long)// 创建DataSetval ds = Seq(Person("Andy", 32)).toDS()ds.show()</code></pre><ul><li>Scala</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//Scala</span><span class="token keyword">object</span> Spark_Sql_DS <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这个定义要写在 main 方法之外</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark_Sql_DS"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//一定要导入这个，否则 toDS() 方法报错</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> ds <span class="token operator">=</span> Seq<span class="token punctuation">(</span>Person<span class="token punctuation">(</span><span class="token string">"Andy"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toDS<span class="token punctuation">(</span><span class="token punctuation">)</span>    ds<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="RDD-与-DataFrame-的相互转换"><a href="#RDD-与-DataFrame-的相互转换" class="headerlink" title="RDD 与 DataFrame 的相互转换"></a>RDD 与 DataFrame 的相互转换</h2><h3 id="利用反射-Schema"><a href="#利用反射-Schema" class="headerlink" title="利用反射 Schema"></a>利用反射 Schema</h3><ul><li>代码</li><li>Scala</li></ul><pre class=" language-scala"><code class="language-scala">  <span class="token comment" spellcheck="true">/**    * 利用反射推断Schema    */</span><span class="token keyword">object</span> Spark_Sql_RDD_DF <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark_Sql_RDD_DF"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_   <span class="token comment" spellcheck="true">// val txtDF = spark.read.textFile("src\\main\\resources\\people.txt")</span>   <span class="token comment" spellcheck="true">//建议采用下面的写法</span>    <span class="token keyword">val</span> txtDF <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"src\\main\\resources\\people.txt"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>at <span class="token keyword">=></span> Person<span class="token punctuation">(</span>at<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> at<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">.</span>toInt<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span>    txtDF<span class="token punctuation">.</span>createOrReplaceTempView<span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> jsonSql <span class="token operator">=</span> spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from people"</span><span class="token punctuation">)</span>    jsonSql<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spark_Rdd_Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 利用反射推断Schema     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String appName <span class="token operator">=</span> <span class="token string">"spark_rdd.demo"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String master <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 SparkSession</span>        SparkSession spark <span class="token operator">=</span> SparkSession                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析 txt 的数据，然后转化成 RDD格式，在调用 map 方法封装数据</span>        JavaRDD<span class="token operator">&lt;</span>Persion<span class="token operator">></span> rdd <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"src\\main\\resources\\people.txt"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">javaRDD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Persion<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Persion <span class="token function">call</span><span class="token punctuation">(</span>String v1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Persion persion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        persion<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        persion<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> persion<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把 RDD 的数据转化成 dataSet 形式</span>        Dataset<span class="token operator">&lt;</span>Row<span class="token operator">></span> dataSet <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">createDataFrame</span><span class="token punctuation">(</span>rdd<span class="token punctuation">,</span> Persion<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSet<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="编程指定-Schema"><a href="#编程指定-Schema" class="headerlink" title="编程指定 Schema"></a>编程指定 Schema</h3><ul><li>代码</li><li>Scala</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> Spark_Sql_RDD_DS <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**     * 编程指定Schema     */</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark_Sql_RDD_DS"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//采用这种写法，‘spark.createDataFrame(rowRDD, schema)’ 这句话报错，不知道为什么？</span>    <span class="token comment" spellcheck="true">//val txt = spark.read.textFile("src\\main\\resources\\people.txt")</span>    <span class="token keyword">val</span> txt <span class="token operator">=</span> spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"src\\main\\resources\\people.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//定义数据类型</span>    <span class="token comment" spellcheck="true">/**      *  另外的写法      val schema = StructType(Array(      StructField("name", StringType, true),      StructField("age", StringType, true)    ))      */</span>      <span class="token comment" spellcheck="true">//官网写法</span>    <span class="token keyword">val</span> schemaString <span class="token operator">=</span> <span class="token string">"name age"</span>    <span class="token keyword">val</span> fields <span class="token operator">=</span> schemaString      <span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>fieldName <span class="token keyword">=></span> StructField<span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> schema <span class="token operator">=</span> StructType<span class="token punctuation">(</span>fields<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//将原始RDD转换为ROW类型的RDD</span>    <span class="token keyword">val</span> rowRDD  <span class="token operator">=</span> txt      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>at <span class="token keyword">=></span> Row<span class="token punctuation">(</span>at<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> at<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>trim<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//创建DF</span>    <span class="token keyword">val</span> txtDF <span class="token operator">=</span> spark<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span> schema<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//注册成临时视图</span>    txtDF<span class="token punctuation">.</span>createOrReplaceTempView<span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> txtSql <span class="token operator">=</span> spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from people"</span><span class="token punctuation">)</span>    txtSql<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Java</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spark_Schema_Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 编程指定Schema     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String appName <span class="token operator">=</span> <span class="token string">"spark_schema.demo"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String master <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 SparkSession</span>         SparkSession spark <span class="token operator">=</span> SparkSession                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取指定文件信息，把数据转成 RDD</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> javaRDD <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"src\\main\\resources\\people.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">javaRDD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定 schema</span>        String schema <span class="token operator">=</span> <span class="token string">"name age"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>StructField<span class="token operator">></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>StructField<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String fileName <span class="token operator">:</span> schema<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            StructField structField <span class="token operator">=</span> DataTypes<span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> DataTypes<span class="token punctuation">.</span>StringType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>structField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StructType schemas <span class="token operator">=</span> DataTypes<span class="token punctuation">.</span><span class="token function">createStructType</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>Row<span class="token operator">></span> rowRDD <span class="token operator">=</span> javaRDD<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Row<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Row <span class="token function">call</span><span class="token punctuation">(</span>String v1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> RowFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把 RDD 转化成 dataSet</span>        Dataset<span class="token operator">&lt;</span>Row<span class="token operator">></span> dataSet <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">createDataFrame</span><span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span> schemas<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSet<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSet<span class="token punctuation">.</span><span class="token function">createOrReplaceTempView</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dataset<span class="token operator">&lt;</span>Row<span class="token operator">></span> dataset <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select * from people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataset<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong></p><p>在编程获取 Txt 文件的时候 Scala 代码里 <code>spark.read.textFile("src\\main\\resources\\people.txt")</code> 获取文件的时候 <code>spark.createDataFrame(rowRDD, schema)</code> 创建方法不成功，但 Java 代码里这样获取和创建就没问题。</p><h2 id="Spark-数据源方法"><a href="#Spark-数据源方法" class="headerlink" title="Spark 数据源方法"></a>Spark 数据源方法</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>对于 Spark SQL 的输入需要使用 sparkSession.read 方法</p><ol><li>通用模式 sparkSession.read.format(“json”).load(“path”) 支持类型：parquet、json、text、csv、orc、jdbc</li><li>专业模式 sparkSession.read.json、csv  直接指定类型。</li></ol><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>对于 Spark SQL 的输出需要使用  sparkSession.write方法</p><ol><li>通用模式 dataFrame.write.format(“json”).save(“path”)  支持类型：parquet、json、text、csv、orc</li><li>专业模式 dataFrame.write.csv(“path”)  直接指定类型</li><li>如果你使用通用模式，Spark 默认 parquet 是默认格式、sparkSession.read.load 加载的默认是 parquet 格式 dataFrame.write.save 也是默认保存成 parquet 格式。</li><li>如果需要保存成一个 text 文件，那么需要 dataFrame 里面只有一列（只需要一列即可）。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkSQL_TXT</title>
      <link href="/2020/12/29/sparksql-txt/"/>
      <url>/2020/12/29/sparksql-txt/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkSQL-TXT"><a href="#SparkSQL-TXT" class="headerlink" title="SparkSQL_TXT"></a>SparkSQL_TXT</h1><ul><li>代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> Spark_Sql_Txt <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark_Sql_Txt"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> txt <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"src\\main\\resources\\people.txt"</span><span class="token punctuation">)</span>    txt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TXT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkSQL_JSON</title>
      <link href="/2020/12/29/sparksql-json/"/>
      <url>/2020/12/29/sparksql-json/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkSQL-JSON"><a href="#SparkSQL-JSON" class="headerlink" title="SparkSQL_JSON"></a>SparkSQL_JSON</h1><ul><li>代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> Spark_Sql_Json <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark_Sql_Json"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第一种方法</span>    <span class="token keyword">val</span> json <span class="token operator">=</span> spark<span class="token punctuation">.</span>read<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token string">"src\\main\\resources\\people.json"</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第二种方法</span>    <span class="token comment" spellcheck="true">// 将DataFrame注册为SQL的临时视图</span>    <span class="token comment" spellcheck="true">// 该方法创建的是一个本地的临时视图，生命周期与其绑定的SparkSession会话相关</span>    <span class="token comment" spellcheck="true">// 即如果创建该view的session结束了，该view也就消失了</span>    json<span class="token punctuation">.</span>createOrReplaceTempView<span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> jsonSql <span class="token operator">=</span> spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from people"</span><span class="token punctuation">)</span>    jsonSql<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第三种方法</span>    <span class="token comment" spellcheck="true">// 将DataFrame注册为全局临时视图(global temporary view)</span>    <span class="token comment" spellcheck="true">// 该方法创建的是一个全局的临时视图，生命周期与其绑定的Spark应用程序相关，</span>    <span class="token comment" spellcheck="true">// 即如果应用程序结束，会自动被删除</span>    <span class="token comment" spellcheck="true">// 全局临时视图是可以跨Spark Session的，系统保留的数据库名为`global_temp`</span>    <span class="token comment" spellcheck="true">// 当查询时，必须要加上全限定名，如`select * from global_temp.view`</span>    json<span class="token punctuation">.</span>createOrReplaceGlobalTempView<span class="token punctuation">(</span><span class="token string">"peoples"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sqlJson <span class="token operator">=</span> spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from global_temp.peoples"</span><span class="token punctuation">)</span>    sqlJson<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong></p><p>需要引入架包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkSQL_JDBC</title>
      <link href="/2020/12/29/sparksql-jdbc/"/>
      <url>/2020/12/29/sparksql-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkSQL-JDBC"><a href="#SparkSQL-JDBC" class="headerlink" title="SparkSQL_JDBC"></a>SparkSQL_JDBC</h1><ul><li>代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//Scala</span><span class="token keyword">object</span> Spark_Sql_Jdbc <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark_Sql_Jdbc"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> jdbc <span class="token operator">=</span> spark<span class="token punctuation">.</span>read      <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:mysql://localhost:3306/taotao?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span> <span class="token string">"tb_item"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jdbc<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spark_JDBC_Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String appName <span class="token operator">=</span> <span class="token string">"spark_jdbc.demo"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String master <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SparkSession spark <span class="token operator">=</span> SparkSession                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dataset<span class="token operator">&lt;</span>Row<span class="token operator">></span> dataset <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:mysql://localhost:3306/taotao?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span> <span class="token string">"tb_item"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       dataset<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       spark<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong></p><p>官网上没有 .option(“driver”, “com.mysql.jdbc.Driver”) 这一句，但不加上，系统会报错，系统不清楚到底要连接的是Mysql数据库还是其它数据库。</p><p>需要导入架包：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SparkSQL_Hive</title>
      <link href="/2020/12/29/sparksql-hive/"/>
      <url>/2020/12/29/sparksql-hive/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkSQL-Hive"><a href="#SparkSQL-Hive" class="headerlink" title="SparkSQL_Hive"></a>SparkSQL_Hive</h1><ul><li>代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//Scala</span><span class="token keyword">object</span> Spark_Sql_Hive <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**    * 启动程序测试之前需要    * 01：把Hive/conf下的hive-site.xml    * 02: 把Hadoop/etc/hadoop/conf下的core-site.xml和hdfs-site.xml，复制到Spark/conf文件夹下    * 03：服务器端需要启动Hadoop,Hive和Spark    */</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession      <span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>appName<span class="token punctuation">(</span><span class="token string">"Spark_Sql_Hive"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"spark.sql.warehouse.dir"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://master01:8020/user/hive/warehouse"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token string">"hive.metastore.uris"</span><span class="token punctuation">,</span> <span class="token string">"thrift://master01:9083"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>enableHiveSupport<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>sparkContext<span class="token punctuation">.</span>setLogLevel<span class="token punctuation">(</span><span class="token string">"WARN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"show tables"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"create table person (id int, name string, age int) row format delimited fields terminated by ' '"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"load data local inpath 'src/main/resources/person.txt' into table person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    spark<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from person"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spark_Hive_Demo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 启动程序测试之前需要     * 01：把Hive/conf下的hive-site.xml     * 02: 把Hadoop/etc/hadoop/conf下的core-site.xml和hdfs-site.xml，复制到Spark/conf文件夹下     * 03：服务器端需要启动Hadoop,Hive和Spark     * 04：如果是外置的 Hive，第二步可以不操作     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String master <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String appName <span class="token operator">=</span> <span class="token string">"spark_hive_demo"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SparkSession spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"spark.sql.warehouse.dir"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://master01:8020/user/hive/warehouse"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"hive.metastore.uris"</span><span class="token punctuation">,</span> <span class="token string">"thrift://master01:9083"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enableHiveSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">sparkContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">"WARN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"show tables"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"create table person (id int, name string, age int) row format delimited fields terminated by ' '"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"load data local inpath 'src/main/resources/person.txt' into table person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select * from person"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spark<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>注意</strong></p><p>启动程序测试之前需要</p><ul><li>Spark 内置 Hive</li></ul><ol><li>把 Hadoop/etc/hadoop/conf 下的 core-site.xml 和 hdfs-site.xml，复制到 Spark/conf 文件夹下。</li><li>如果Spark路径下发现metastore_db，需要删除【仅第一次启动的时候】。</li></ol><ul><li>Spark 外置 Hive</li></ul><ol><li>把 Hive/conf 下的 hive-site.xml。</li><li>如果hive的metestore使用的是mysql数据库，那么需要将mysql的jdbc驱动包放到spark的jars目录下。</li><li>服务器端需要启动 Hadoop,Hive和Spark。</li></ol><p>采用 Spark 内置的 Hive 时，需要第二步操作。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_PairRDD</title>
      <link href="/2020/12/29/spark-pairrdd/"/>
      <url>/2020/12/29/spark-pairrdd/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-PairRDD"><a href="#Spark-PairRDD" class="headerlink" title="Spark_PairRDD"></a>Spark_PairRDD</h1><h2 id="什么是-Pair-RDD"><a href="#什么是-Pair-RDD" class="headerlink" title="什么是 Pair RDD"></a>什么是 Pair RDD</h2><p> Spark为包含键值对对类型的RDD提供了一些专有操作，这些操作就被称为Pair RDD。</p><h2 id="操作-Pair-RDD"><a href="#操作-Pair-RDD" class="headerlink" title="操作 Pair RDD"></a>操作 Pair RDD</h2><h3 id="创建-Pair-RDD"><a href="#创建-Pair-RDD" class="headerlink" title="创建 Pair RDD"></a>创建 Pair RDD</h3><p>创建 Pair RDD</p><pre class=" language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">var</span> lines <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"i love you"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lines<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span>scala<span class="token operator">></span> <span class="token keyword">val</span> pairs <span class="token operator">=</span> lines<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pairs<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> at map at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> pairs<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span>i love you<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="Pair-RDD-的-Transformation"><a href="#Pair-RDD-的-Transformation" class="headerlink" title="Pair RDD 的 Transformation"></a>Pair RDD 的 Transformation</h3><ul><li>reduceByKey(func)</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//合并具有相同key的value值</span>scala<span class="token operator">></span> <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rdd<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">=></span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ShuffledRDD<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> at reduceByKey at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><ul><li>groupByKey()</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//对具有相同键的进行分组 [数据分组]</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>groupByKey<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ShuffledRDD<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> at groupByKey at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>CompactBuffer<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>CompactBuffer<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>mapValues(func)</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//对pairRDD中的每个值应用func 键不改变</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>mapValues<span class="token punctuation">(</span>x<span class="token keyword">=></span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> at mapValues at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span></code></pre><ul><li>flatMapValues(func)</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//类似于mapValues，返回的是迭代器函数</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>flatMapValues<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token punctuation">(</span>x to <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> at flatMapValues at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><ul><li>keys</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//返回一个仅包含键的RDD</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>keysresult<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> at keys at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token number">3</span><span class="token number">1</span><span class="token number">3</span></code></pre><ul><li>values</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//返回一个仅包含value的RDD</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>valuesresult<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> at values at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token number">2</span><span class="token number">4</span><span class="token number">6</span></code></pre><ul><li>sortByKey()</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//返回一个根据键排序的RDD (数据排序，可以通过接受ascending的参数表示我们是否想要结果按升序排序（默认是true）)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>sortByKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scala<span class="token operator">></span> resultres8<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>pre name<span class="token operator">=</span><span class="token string">"code"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"java"</span><span class="token operator">></span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>sortByKey<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="两个Pair-RDD-的-Transformation"><a href="#两个Pair-RDD-的-Transformation" class="headerlink" title="两个Pair RDD 的 Transformation"></a>两个Pair RDD 的 Transformation</h4><p><img src="/2020/12/29/spark-pairrdd/20201219212835813_1079.png" alt="Seconds RDD"></p><ul><li>subtractByKey( other )</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//删除掉RDD中与other RDD中键相同的元素</span>scala<span class="token operator">></span> <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rdd<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span>scala<span class="token operator">></span> <span class="token keyword">val</span> other <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>other<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>subtractByKey<span class="token punctuation">(</span>other<span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> SubtractedRDD<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> at subtractByKey at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">31</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>join( other )</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//对两个RDD进行内连接</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>join<span class="token punctuation">(</span>other<span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> at join at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">31</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>rightOuterJoin(other)</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//对两个RDD进行连接操作，确保第二个RDD的键必须存在（右外连接）</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>rightOuterJoin<span class="token punctuation">(</span>other<span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> at rightOuterJoin at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">31</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Some<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Some<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>leftOuterJoin(other)</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//对两个RDD进行连接操作，确保第一个RDD的键必须存在（左外连接）</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>leftOuterJoin<span class="token punctuation">(</span>other<span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> at leftOuterJoin at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">31</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>Some<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>Some<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>cogroup(other)</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//将有两个rdd中拥有相同键的数据分组</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>cogroup<span class="token punctuation">(</span>other<span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Iterable<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> at cogroup at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">31</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>CompactBuffer<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CompactBuffer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span>CompactBuffer<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CompactBuffer<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="过滤操作"><a href="#过滤操作" class="headerlink" title="过滤操作"></a>过滤操作</h4><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//这里假设rdd={(1,2),(3,4),(3,6)}</span><span class="token comment" spellcheck="true">//对value做控制，key不加限制条件</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>filter<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">=></span>y<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">}</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> at filter at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>filter<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">=></span>y<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">}</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> at filter at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//对key做控制，value不控制</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>filter<span class="token punctuation">{</span><span class="token keyword">case</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">=></span>x<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">}</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> at filter at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><h4 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h4><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//实现经典的分布式单词计数问题（使用flatMap() 来生成以单词为键，以数字1为值的pair RDD）</span>scala<span class="token operator">></span> <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"i am thinkgamer, i love cyan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rdd<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span>scala<span class="token operator">></span> <span class="token keyword">val</span> words <span class="token operator">=</span> rdd<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>line <span class="token keyword">=></span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>words<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> at flatMap at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">29</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> words<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">=></span> x<span class="token operator">+</span>y<span class="token punctuation">)</span>result<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ShuffledRDD<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span> at reduceByKey at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">31</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span>cyan<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>love<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thinkgamer<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>am<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//实现经典的分布式单词计数问题（使用countByValue更快的实现单词计数）</span>scala<span class="token operator">></span> <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"i am thinkgamer, i love cyan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rdd<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> ParallelCollectionRDD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> at parallelize at <span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">27</span>scala<span class="token operator">></span> <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>x<span class="token keyword">=></span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>countByValue<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token operator">:</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>Map<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Long</span><span class="token punctuation">]</span> <span class="token operator">=</span> Map<span class="token punctuation">(</span>am <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> thinkgamer<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">,</span> love <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> cyan <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>scala<span class="token operator">></span> result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token punctuation">(</span>am<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thinkgamer<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>love<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cyan<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="Pair-RDD-的-Action"><a href="#Pair-RDD-的-Action" class="headerlink" title="Pair RDD 的 Action"></a>Pair RDD 的 Action</h3><p><img src="/2020/12/29/spark-pairrdd/20201219213345343_27869.png" alt="Action"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_提交模式</title>
      <link href="/2020/12/29/spark-ti-jiao-mo-shi/"/>
      <url>/2020/12/29/spark-ti-jiao-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-提交模式"><a href="#Spark-提交模式" class="headerlink" title="Spark_提交模式"></a>Spark_提交模式</h1><h2 id="作业提交"><a href="#作业提交" class="headerlink" title="作业提交"></a>作业提交</h2><ul><li><p>spark-submit</p><p>Spark 所有模式均使用 spark-submit 命令提交作业，其格式如下：</p></li></ul><pre class=" language-xshell"><code class="language-xshell">./bin/spark-submit \  --class <main-class> \        # 应用程序主入口类  --master <master-url> \       # 集群的 Master Url  --deploy-mode <deploy-mode> \ # 部署模式  --conf <key>=<value> \        # 可选配置         ... # other options      <application-jar> \           # Jar 包路径   [application-arguments]       #传递给主入口类的参数  </code></pre><p>需要注意的是：在集群环境下，application-jar 必须能被集群中所有节点都能访问，可以是 HDFS 上的路径；也可以是本地文件系统路径，如果是本地文件系统路径，则要求集群中每一个机器节点上的相同路径都存在该 Jar 包。</p><h2 id="作业提交方式"><a href="#作业提交方式" class="headerlink" title="作业提交方式"></a>作业提交方式</h2><h3 id="Local模式"><a href="#Local模式" class="headerlink" title="Local模式"></a>Local模式</h3><pre class=" language-xshell"><code class="language-xshell"># 本地模式提交应用spark-submit \--class org.apache.spark.examples.SparkPi \--master local[2] \/usr/app/spark-2.4.0-bin-hadoop2.6/examples/jars/spark-examples_2.11-2.4.0.jar \100   # 传给 SparkPi 的参数</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_算子</title>
      <link href="/2020/12/29/spark-suan-zi/"/>
      <url>/2020/12/29/spark-suan-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-算子"><a href="#Spark-算子" class="headerlink" title="Spark_算子"></a>Spark_算子</h1><h2 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h2><p><img src="/2020/12/29/spark-suan-zi/20201219205013639_10474.png" alt="Spark 算子"></p><ul><li>map</li></ul><p>对于输入的一行数据，会把这行数据解析成一个数组，然后需要单个数据再去数组中去取。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出结果： 10 20 30 （这里为了节省篇幅去掉了换行,后文亦同）</span></code></pre><ul><li>filter</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出： 10 12 21</span></code></pre><ul><li>flatMap</li></ul><p>flatMap(func) 与 map 类似，但每一个输入的 item 会被映射成 0 个或多个输出的 items（ func 返回类型需要为 Seq）。</p><p>对于输入的一行数据，会把这行数据通过指定的规则解析成单个字符。（输入一行，输出多行）</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> List<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>toList<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出结果 ： 10 20 30 40 50</span></code></pre><p>flatMap 这个算子在日志分析中使用概率非常高，这里进行一下演示：拆分输入的每行数据为单个单词，并赋值为 1，代表出现一次，之后按照单词分组并统计其出现总次数，代码如下：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> lines <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"spark flume spark"</span><span class="token punctuation">,</span>                 <span class="token string">"hadoop flume hive"</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>line <span class="token keyword">=></span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>word<span class="token keyword">=></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出：</span><span class="token punctuation">(</span>spark<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hive<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hadoop<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>flume<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>groupByKey </li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//按照键进行分组：</span><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"spark"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"spark"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"storm"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>groupByKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> x<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>toList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出：</span><span class="token punctuation">(</span>spark<span class="token punctuation">,</span>List<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hadoop<span class="token punctuation">,</span>List<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>storm<span class="token punctuation">,</span>List<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>reduceByKey</li></ul><p>reduce处理数据时有着一对一的特性，而reduceByKey则有着多对一的特性。比如reduce中会把数据集合中每一个元素都处理一次，并且每一个元素都对应着一个输出。而reduceByKey则不同，它会把所有key相同的值处理并且进行归并，其中归并的方法可以自己定义</p><p>对元素为 [K , V] 的 RDD 中的 key 相同的元素的 value 进行 reduce 操作，key 相同的多个元素的值被 reduce 为一个值，然后与原 RDD 中的key 组成一个新的 [K , V] 对。</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//按照键进行归约操作：</span><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"spark"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"spark"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"storm"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出</span><span class="token punctuation">(</span>spark<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hadoop<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span>storm<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span></code></pre><ul><li>sortByKey</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//按照键进行排序：</span><span class="token keyword">val</span> list01 <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">"spark"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token string">"storm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list01<span class="token punctuation">)</span><span class="token punctuation">.</span>sortByKey<span class="token punctuation">(</span>ascending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span>storm<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span>spark<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span>hadoop<span class="token punctuation">)</span></code></pre><ul><li>sortBy</li></ul><pre class=" language-scala"><code class="language-scala">按照指定元素进行排序：<span class="token keyword">val</span> list02 <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"spark"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"storm"</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list02<span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>x<span class="token keyword">=></span>x<span class="token punctuation">.</span>_2<span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">(</span>storm<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hadoop<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">(</span>spark<span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span></code></pre><ul><li>join</li></ul><p>在一个 (K, V) 和 (K, W) 类型的 Dataset 上调用时，返回一个 (K, (V, W)) 的 Dataset，等价于内连接操作。如果想要执行外连接，可以使用 leftOuterJoin, rightOuterJoin 和 fullOuterJoin 等算子。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> list01 <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"student01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"student02"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"student03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> list02 <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"teacher01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"teacher02"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"teacher03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list01<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>student01<span class="token punctuation">,</span>teacher01<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span>student03<span class="token punctuation">,</span>teacher03<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>student02<span class="token punctuation">,</span>teacher02<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>intersection</li></ul><p>两个RDD 交叉时，保留共有的数据元素</p><ul><li>subtract</li></ul><p>找出两者不一致的内容（保留第一位的数据元素）</p><ul><li>union</li></ul><p>不考虑其中重复的数据元素</p><ul><li>distinct</li></ul><p>重复的元素删除，删除的过程不会把重复的元素删掉，而是重复的元素保留一份。</p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p><img src="/2020/12/29/spark-suan-zi/20201219205654836_21150.png" alt="Action"></p><ul><li>reduce</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//使用函数func执行归约操作：</span><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>reduce<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span></code></pre><ul><li>countByKey</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//计算每个键出现的次数：</span><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"storm"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"storm"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"azkaban"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>countByKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出： Map(hadoop -> 2, storm -> 2, azkaban -> 1)</span></code></pre><ul><li>saveAsTextFile</li></ul><p>将 dataset 中的元素以文本文件的形式写入本地文件系统、HDFS 或其它 Hadoop 支持的文件系统中。Spark 将对每个元素调用 toString 方法，将元素转换为文本文件中的一行记录。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"storm"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"storm"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"azkaban"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span>saveAsTextFile<span class="token punctuation">(</span><span class="token string">"/usr/file/temp"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_使用</title>
      <link href="/2020/12/29/spark-shi-yong/"/>
      <url>/2020/12/29/spark-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-使用"><a href="#Spark-使用" class="headerlink" title="Spark_使用"></a>Spark_使用</h1><h2 id="使用代码"><a href="#使用代码" class="headerlink" title="使用代码"></a>使用代码</h2><p>Spark程序必须做的第一件事是创建一个SparkContext对象，该对象告诉Spark如何访问集群。要创建一个，SparkContext您首先需要构建一个SparkConf对象，其中包含有关您的应用程序的信息。</p><ul><li>Java 代码</li></ul><pre class=" language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">;</span>JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>Scala 代码</li></ul><pre class=" language-scala"><code class="language-scala">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">;</span>SparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该appName参数是您的应用程序在群集UI上显示的名称。 master是Spark，Mesos或YARN群集URL或特殊的“本地”字符串，以本地模式运行。实际上，当在集群上运行时，您将不希望master在程序中进行硬编码，而是在其中启动应用程序spark-submit并在其中接收。但是，对于本地测试和单元测试，您可以传递“ local”以在内部运行Spark。</p><h2 id="使用XShell"><a href="#使用XShell" class="headerlink" title="使用XShell"></a>使用XShell</h2><p>在Spark Shell中，已经在名为的变量中为您创建了一个特殊的可识别解释器的SparkContext sc。制作自己的SparkContext无效。您可以使用–master参数设置上下文连接到哪个主机，还可以通过将逗号分隔的列表传递给参数来将JAR添加到类路径–jars。您还可以通过在–packages参数中提供逗号分隔的Maven坐标列表，从而将依赖项（例如Spark Packages）添加到Shell会话中。可能存在依赖项的任何其他存储库（例如Sonatype）都可以传递给–repositories参数。例如，要bin/spark-shell在四个核心上运行，请使用：</p><pre class=" language-xshell"><code class="language-xshell">$ ./bin/spark-shell --master local[4]</code></pre><p>或者，也要添加code.jar到其类路径中，请使用：</p><pre class=" language-xshell"><code class="language-xshell">$ ./bin/spark-shell --master local[4] --jars code.jar</code></pre><p>要使用Maven坐标包含依赖项，请执行以下操作：</p><pre class=" language-xshell"><code class="language-xshell">$ ./bin/spark-shell --master local[4] --packages "org.example:example:0.1"</code></pre><p>有关选项的完整列表，请运行spark-shell –help。在后台， spark-shell调用更通用的spark-submit脚本。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_基础</title>
      <link href="/2020/12/29/spark-ji-chu/"/>
      <url>/2020/12/29/spark-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-总体"><a href="#Spark-总体" class="headerlink" title="Spark_总体"></a>Spark_总体</h1><p><a href="https://github.com/heibaiying/BigData-Notes#三spark" target="_blank" rel="noopener">参考资料地址：</a></p><p><strong>如果会简单的 Scala 语言，那么学习 Spark 的时候会如虎添翼</strong></p><h2 id="Spark用来做什么？"><a href="#Spark用来做什么？" class="headerlink" title="Spark用来做什么？"></a>Spark用来做什么？</h2><p>取代MapReduce做批处理计算。</p><h2 id="为什么-Spark-比-MapReduce-快？"><a href="#为什么-Spark-比-MapReduce-快？" class="headerlink" title="为什么 Spark 比 MapReduce 快？"></a>为什么 Spark 比 MapReduce 快？</h2><ul><li>Spark 是基于内存的，而 MapReduce 是基于磁盘的。</li><li>Spark 是基于线程方式运行在进程中的，MapReduce 是基于进程运行的。</li></ul><h2 id="Spark集群架构。"><a href="#Spark集群架构。" class="headerlink" title="Spark集群架构。"></a>Spark集群架构。</h2><p><img src="/2020/12/29/spark-ji-chu/20201219200555571_6775.png" alt="Spark集群架构"></p><h2 id="Spark的数据抽象。"><a href="#Spark的数据抽象。" class="headerlink" title="Spark的数据抽象。"></a>Spark的数据抽象。</h2><p>spark的数据抽象是RDD，它是只读的、分区记录的集合，支持并行操作，可以由外部数据集或其他 RDD 转换而来，它具有以下特性：</p><p><img src="/2020/12/29/spark-ji-chu/20201219200816851_25656.png" alt="Spark 的数据抽象"></p><h2 id="创建RDD"><a href="#创建RDD" class="headerlink" title="创建RDD"></a>创建RDD</h2><ol><li>有现有集合创建</li><li>引用外部数据集</li></ol><p><strong>使用外部数据集需要注意：</strong></p><blockquote><p>如果在集群环境下从本地文件系统读取数据，则要求该文件必须在集群中所有机器上都存在，且路径相同。<br>支持目录路径，支持压缩文件，支持使用通配符。</p></blockquote><h2 id="操作RDD"><a href="#操作RDD" class="headerlink" title="操作RDD"></a>操作RDD</h2><blockquote><p>RDD支持两种类型的操作：transformations（转换，从现有数据集创建新数据集）和 actions（在数据集上运行计算后将值返回到驱动程序）。RDD中的所有转换操作都是惰性的，它们只是记住这些转换操作，但不会立即执行，只有遇到 action 操作后才会真正的进行计算，这类似于函数式编程中的惰性求值。</p></blockquote><ul><li>理解Shuffle<br>由于Shuffle操作对性能的影响比较大，所以需要特别注意使用，以下操作都会导致Shuffle：</li></ul><blockquote><p>涉及到重新分区操作： 如repartition 和 coalesce；<br>所有涉及到ByKey的操作：如groupByKey和reduceByKey，但countByKey除外；<br>联结操作：如cogroup和join。</p></blockquote><ul><li>宽依赖和窄依赖<br>RDD 和它的父 RDD(s) 之间的依赖关系分为两种不同的类型：</li></ul><blockquote><p>窄依赖 (narrow dependency)：父 RDDs 的一个分区最多被子 RDDs 一个分区所依赖；<br>宽依赖 (wide dependency)：父 RDDs 的一个分区可以被子 RDDs 的多个子分区所依赖。</p></blockquote><ul><li>区分这两种依赖是非常有用的：</li></ul><blockquote><p>首先，窄依赖允许在一个集群节点上以流水线的方式（pipeline）对父分区数据进行计算，例如先执行 map 操作，然后执行 filter 操作。而宽依赖则需要计算好所有父分区的数据，然后再在节点之间进行 Shuffle，这与 MapReduce 类似。<br>窄依赖能够更有效地进行数据恢复，因为只需重新对丢失分区的父分区进行计算，且不同节点之间可以并行计算；而对于宽依赖而言，如果数据丢失，则需要对所有父分区数据进行计算并再次 Shuffle。</p></blockquote><h3 id="外部数据集"><a href="#外部数据集" class="headerlink" title="外部数据集"></a>外部数据集</h3><p>Spark可以从Hadoop支持的任何存储源（包括本地文件系统，HDFS，Cassandra，HBase，Amazon S3等）创建分布式数据集。Spark支持文本文件，SequenceFiles和任何其他Hadoop InputFormat。</p><p>可以使用SparkContext的textFile方法创建文本文件RDD 。此方法需要一个URI的文件（本地路径的机器上，或一个hdfs://，s3a://等URI），并读取其作为行的集合。</p><ul><li>Java 代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spark_Text_Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String appName <span class="token operator">=</span> <span class="token string">"spaer.text.demo"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String master <span class="token operator">=</span> <span class="token string">"local[2]"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JavaSparkContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span>appName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">;</span>            context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>            JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> rdd <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"F:\\SparkText"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// JavaRDD&lt;String> rdd = context.textFile("hdfs://master01:9000/Demo_27");</span>            rdd<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer reduce <span class="token operator">=</span> rdd<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">,</span> Integer integer2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                    <span class="token keyword">return</span> integer <span class="token operator">+</span> integer2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结果："</span> <span class="token operator">+</span> reduce<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>context <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Scala 代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> WordCount <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"1208"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"F:\\SparkText"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sc.textFile("hdfs://master01:9000/Demo_27").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).foreach(println)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意事项</strong></p><ul><li>如果在本地文件系统上使用路径，则还必须在工作节点上的相同路径上访问该文件。将文件复制给所有工作人员，或使用网络安装的共享文件系统。</li><li>Spark的所有基于文件的输入法（包括textFile）都支持在目录，压缩文件和通配符上运行。例如，你可以使用textFile(“/my/directory”)，textFile(“/my/directory/.txt”)和textFile(“/my/directory/.gz”)。</li><li>该textFile方法还采用一个可选的第二个参数来控制文件的分区数。默认情况下，Spark为文件的每个块创建一个分区（HDFS中的块默认为128MB），但是您也可以通过传递更大的值来请求更大数量的分区。请注意，分区不能少于块。</li></ul><h3 id="Stage-划分"><a href="#Stage-划分" class="headerlink" title="Stage 划分"></a>Stage 划分</h3><p>Stage 的划分依据是：宽依赖。</p><p>Stage 与 Stage 之间的过程就是 Shuffle 。负责这个过程的是 ShuffleMapStage 和 ResultStage。</p><p>DAGScheduler 会将 Job 的 RDD 划分到不同的 Stage 中，并构建一个 Stage 的依赖关系，即DAG。这样划分的目的是既可以保障没有依赖关系的 Stage 可以并行执行，又可以保证存在依赖关系的 Stage 顺序执行。Stage 主要分为两种类型，一种是 ShuffleMapStage，另一种是 ResultStage。其中 ShuffleMapStage 是属于上游的 Stage，而 ResulStage 属于最下游的 Stage，这意味着上游的 Stage 先执行，最后执行 ResultStage。</p><p>可以这样理解：在 DAG 中进行反向解析，遇到宽依赖就断开、遇到窄依赖就把当前的 RDD 加入到当前的 Stage 中。即将窄依赖划分到同一个s Stage中，从而形成一个 Pipeline，提升计算效率。所以一个 DAG 图可以划分为多个 Stage，每个 Stage都代表了一组关联的，相互之间没有Shuffle依赖关系的任务组成的 Task 集合，每个 Task 集合会被提交到 TaskScheduler 进行调度处理，最终将任务分发到 Executor 中进行执行。</p><p>其实就是一句话：每一个独立的 Stage 中，只存在一种依赖，那就是窄依赖。</p><h3 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a>Shuffle</h3><p>Shuffle 可以理解为对数据的重组。</p><p>先看下 Hadoop 的 Shuffle 流程：</p><p><img src="/2020/12/29/spark-ji-chu/20201226165143786_28360.png" alt="Hadoop_Shuffle"></p><p>在 DAG 调度的过程中，Stage 阶段的划分是根据是否有 Shuffle 过程，也就是存在宽依赖的时候,需要进行 Shuffle,这时候会将 Job 划分成多个Stage，每一个 Stage 内部有很多可以并行运行的 Task。<br>Stage 与 Stage 之间的过程就是 Shuffle 阶段，在 Spark 中，负责 Shuffle 过程的执行、计算和处理的组件主要就是 ShuffleManager 。ShuffleManager 随着 Spark 的发展有两种实现的方式，分别为 HashShuffleManager 和 SortShuffleManager ，因此 Spark的Shuffle有 Hash Shuffle  和 Sort Shuffle 两种。</p><ul><li>HashShuffleManager</li></ul><blockquote><p>HashShuffleManager 有着一个非常严重的弊端，就是会产生大量的中间磁盘文件，进而由大量的磁盘 IO 操作影响了性能。</p></blockquote><ul><li>SortShuffleManager</li></ul><blockquote><p>SortShuffleManager 相较于 HashShuffleManager 来说，主要就在于每个 Task 在进行 Shuffle 操作时，虽然也会产生较多的临时磁盘文件，但是最后会将所有的临时文件合并(Merge)成一个磁盘文件，因此每个 Task 就只有一个磁盘文件。在下一个 Stage 的 Shuffle Read Task 拉取自己的数据时，只要根据索引读取每个磁盘文件中的部分数据即可。</p></blockquote><ul><li>SortShuffleManager 的运行机制</li></ul><blockquote><p>普通机制</p></blockquote><p><img src="/2020/12/29/spark-ji-chu/20201226170425473_5772.png" alt="SortShuffleManager_普通机制"></p><blockquote><p>运行流程</p></blockquote><ul><li>数据先写入数据结构，聚合算子写入 Map ，一边通过 Map 局部聚合，一边写入内存；Join 直接写入内存。</li><li>判断内存是否达到阈值（5M）。如果达到就将数据写入磁盘，清空内存。</li><li>数据在写入磁盘前会先排序，排序好的数据通过缓冲区溢写方式在分批写入磁盘文件。默认批次一万条。每次溢写都会产生一个磁盘文件。</li><li>在每个 Task 中，将所有临时文件合并。这个过程会将所有临时文件读取出来，一次写入到最终文件。这就意味着一个 Task 的所有数据都在这个文件中。同时单独写一份索引文件，标识下游各个 Task 的数据在文件中的  Start Offset 和 End Offset。</li></ul><blockquote><p>好处</p></blockquote><ol><li>小文件明显变少了，一个 Task 只生成一个 File 文件。</li><li>File 文件整体有序，加上索引文件的辅助，查找变快，虽然排序浪费一些性能，但是查找变快很多。</li></ol><h3 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h3><p>广播变量是一个只读的变量，并且在每个节点都保存一份副本，而不需要在集群中发送数据。</p><p>使用场景：当我们的数据有一部分在整个数据处理的流程中，是只读的时候，那么推荐使用广播变量。</p><ul><li>代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SparkBroadcast <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkBroadcast"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> mapData <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token string">"Spark"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Flink"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"Hadoop"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">"Hive"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//定义广播变量</span>    <span class="token keyword">val</span> broadRDD <span class="token operator">=</span> ssc<span class="token punctuation">.</span>broadcast<span class="token punctuation">(</span>mapData<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>broadRDD<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意事项</strong></p><ol><li>不能将一个 RDD 使用广播变量广播出去。</li><li>广播变量只能在 Driver 端定义，不能在 Executor 端定义。</li><li>在 Driver 端可以修改广播变量的值，在 Executor 端无法修改广播变量的值。</li><li>如果 Executor 端用到了 Driver 的变量，如果不使用广播变量在 Executor 有多少 Task 就有多少 Driver 端的变量副本。</li><li>如果 Executor 端用到了 Driver 的变量，如果使用广播变量在每个 Executo r中只有一份Driver 端的变量副本</li></ol><h3 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h3><p>累加器是 Spark 提供的另外一个共享变量，与广播变量不同，累加器是可以被修改的，是可变的。</p><p>使用场景：调用 Foreach 访问 RDD 中的每个元素的时候，Foreach 内部不可更新其它变量，否则与预期结果不符。原因是： Spark 是以不同节点的一组任务并行一个函数，会把函数内的每个变量的副本发送到每个任务。</p><ul><li>代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SparkAccumulator <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkAccumulator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> listRDD <span class="token operator">=</span> ssc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//定义外部变量</span>    <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">//定义累加器</span>    <span class="token keyword">val</span> countAcc <span class="token operator">=</span> ssc<span class="token punctuation">.</span>longAccumulator<span class="token punctuation">(</span><span class="token string">"accumulator"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> mapRDD <span class="token operator">=</span> listRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>num <span class="token keyword">=></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//外部变量的值并不会改变</span>      counter <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">//满足条件使用累加器</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        countAcc<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      num <span class="token operator">%</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    mapRDD<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"counter = "</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"countAcc = "</span> <span class="token operator">+</span> countAcc<span class="token punctuation">)</span>    ssc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>我们在dirver中声明的一些局部变量或者成员变量，可以直接在transformation中使用，但是经过transformation操作之后，是不会将最终的结果重新赋值给dirver中的对应的变量。因为通过action触发transformation操作之后，transformation的操作都是通过DAGScheduler将代码打包，然后序列化，最后交由TaskScheduler传送到各个Worker节点中的Executor去执行，在transformation中执行的这些变量，是自己节点上的变量，不是dirver上最初的变量，只不过是将driver上的对应的变量拷贝了一份而已。</p></blockquote><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ol><li>persist() 可以把数据缓存到内存和磁盘。</li><li>cache() 把数据缓存到内存中，本质上还是调用 persist() 方法。</li></ol><ul><li>持久化机制</li></ul><p><img src="/2020/12/29/spark-ji-chu/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BigDataNotes/Spark/SparkCore/_v_images/20201226180610577_22973.png" alt="持久化机制"></p><h3 id="Spark-的任务调度"><a href="#Spark-的任务调度" class="headerlink" title="Spark 的任务调度"></a>Spark 的任务调度</h3><ol><li>初始化 Driver，Driver端运行客户端的main方法，构建SparkContext对象，在SparkContext对象内部依次构建DAGScheduler和TaskScheduler。</li><li>TaskScheduler 去注册中心 Master 注册，寻找 Work 启动 Executor 。</li><li>Executor 把注册的信息发送给 Driver 。</li><li>按照 RDD 的操作，生成 DAG 有向无环图。</li><li>DAGScheduler 拿到 DAG 有向无环图之后，按照宽依赖进行 Stage 的划分。每一个 Stage 内部有很多可以并行运行的 Task，最后封装在一个一个的 TaskSet 集合中，然后把 TaskSet 发送给 TaskScheduler。</li><li>TaskScheduler 得到 TaskSet 集合之后，依次遍历取出每一个 Task 提交到 Worker 节点上的 Executor 进程中运行。</li><li>Task 运行完，任务结束。</li></ol><p><strong>解释说明</strong></p><ol><li>Application 在遇到不同的算子时会划分不同的 Job。</li><li>Job 会根据是否有宽依赖划分多个 Stage。</li><li>Stage 里又分多个 Task （任务逻辑相同，数据不同）。</li><li>每个 Task 对应一个分区 Partition 。</li></ol><p><img src="/2020/12/29/spark-ji-chu/20201226185920840_11999.png" alt="说明"></p><h3 id="Spark-分区"><a href="#Spark-分区" class="headerlink" title="Spark 分区"></a>Spark 分区</h3><ol><li>HashPartitioner （Spark 默认）</li><li>RangePartitioner</li><li>自定义分区</li></ol><ul><li>自定义分区代码</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//自定义分区只要继承 Partitioner 类，重写其中的方法即可</span><span class="token keyword">class</span> CustomerPartition<span class="token punctuation">(</span>partitions<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>  <span class="token keyword">extends</span> Partitioner<span class="token punctuation">{</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> numPartitions<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> partitions  <span class="token keyword">override</span> <span class="token keyword">def</span> getPartition<span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>key<span class="token punctuation">.</span>toString<span class="token punctuation">.</span>charAt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> partitions  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> DefaultPartition <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> bigData <span class="token operator">=</span> util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span>asList<span class="token punctuation">(</span><span class="token string">"Hadoop"</span><span class="token punctuation">,</span> <span class="token string">"Spark"</span><span class="token punctuation">,</span> <span class="token string">"Flink"</span><span class="token punctuation">,</span> <span class="token string">"Hive"</span><span class="token punctuation">,</span> <span class="token string">"Impala"</span><span class="token punctuation">,</span> <span class="token string">"Hbase"</span><span class="token punctuation">,</span> <span class="token string">"Kafka"</span><span class="token punctuation">,</span> <span class="token string">"ClickHouse"</span><span class="token punctuation">,</span> <span class="token string">"KUDU"</span><span class="token punctuation">,</span> <span class="token string">"zookeeper"</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> spark<span class="token punctuation">.</span>implicits<span class="token punctuation">.</span>_    <span class="token keyword">val</span> stringDataset <span class="token operator">=</span> spark<span class="token punctuation">.</span>createDataset<span class="token punctuation">(</span>bigData<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"当前分区："</span> <span class="token operator">+</span> stringDataset<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">val</span> reparationDS <span class="token operator">=</span> stringDataset<span class="token punctuation">.</span>repartition<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"第一次分区："</span> <span class="token operator">+</span> reparationDS<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">val</span> stringRDD <span class="token operator">=</span> stringDataset<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>word <span class="token keyword">=></span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span>word<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> partitionRDD <span class="token operator">=</span> stringRDD<span class="token punctuation">.</span>partitionBy<span class="token punctuation">(</span><span class="token keyword">new</span> CustomerPartition<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"第二次分区："</span> <span class="token operator">+</span> partitionRDD<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Spark 内自己的方法</li></ul><ol><li>coalesce() 方法，避免 Shuffle ，只能减少分区。</li><li>repartition() 方法，会有 Shuffle，可以减少分区和增加分区。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SparkCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume实际操作</title>
      <link href="/2020/11/22/flume-shi-ji-cao-zuo/"/>
      <url>/2020/11/22/flume-shi-ji-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="Flume-实际操作"><a href="#Flume-实际操作" class="headerlink" title="Flume_实际操作"></a>Flume_实际操作</h1><h2 id="01：监听文件内容"><a href="#01：监听文件内容" class="headerlink" title="01：监听文件内容"></a>01：监听文件内容</h2><p><strong>监听 <code>/tmp/log.txt</code> 文件内的内容，并输出到控制台。</strong></p><ul><li>配置 <code>exec-memory-logger.properties</code></li></ul><pre class=" language-porperties"><code class="language-porperties">#指定agent的sources,sinks,channels# 监听log.txt 文件，有数据的时候，输出到界面a1.sources = s1  a1.sinks = k1  a1.channels = c1  #配置sources属性a1.sources.s1.type = execa1.sources.s1.command = tail -F /tmp/log.txta1.sources.s1.shell = /bin/bash -c#将sources与channels进行绑定a1.sources.s1.channels = c1#配置sink a1.sinks.k1.type = logger#将sinks与channels进行绑定  a1.sinks.k1.channel = c1  #配置channel类型a1.channels.c1.type = memory</code></pre><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/exec-memory-logger.properties \--name a1 \-Dflume.root.logger=INFO,console</code></pre><p>然后向 <code>/tmp/log.txt</code> 文件写入内容即可在控制台看到对应的文件。</p><h2 id="02：监听文件内容，并将新增的数据写入到-Kafka-中"><a href="#02：监听文件内容，并将新增的数据写入到-Kafka-中" class="headerlink" title="02：监听文件内容，并将新增的数据写入到 Kafka 中"></a>02：监听文件内容，并将新增的数据写入到 Kafka 中</h2><p><strong>监听 <code>/tmp/kafka.log</code> 文件内的内容，并写入到 Kafka 的主题。</strong></p><ul><li>配置 <code>exec-memory-kafka.properties</code></li></ul><pre class=" language-porperties"><code class="language-porperties"># 监听 kafka.log 文件，有数据的时候，保存到 Kafkaa1.sources = s1a1.channels = c1a1.sinks = k1                                                                                         a1.sources.s1.type=execa1.sources.s1.command=tail -F /tmp/kafka.loga1.sources.s1.channels=c1 #设置Kafka接收器a1.sinks.k1.type= org.apache.flume.sink.kafka.KafkaSink#设置Kafka地址a1.sinks.k1.brokerList=master01:9092#设置发送到Kafka上的主题a1.sinks.k1.topic=flume-kafka#设置序列化方式a1.sinks.k1.serializer.class=kafka.serializer.StringEncodera1.sinks.k1.channel=c1     a1.channels.c1.type=memorya1.channels.c1.capacity=10000a1.channels.c1.transactionCapacity=100   </code></pre><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/exec-memory-kafka.properties \--name a1 -Dflume.root.logger=INFO,console</code></pre><ul><li>操作：启动 Kafka</li></ul><pre class=" language-xshell"><code class="language-xshell"># 启动kafkabin/kafka-server-start.sh -daemon config/server.properties</code></pre><ul><li>操作：创建 Kafka主题</li></ul><pre class=" language-xshell"><code class="language-xshell"># 创建 Kafka主题bin/kafka-topics.sh --zookeeper master01:2181  --create --replication-factor 1 --partitions 1 --topic flume-kafka</code></pre><ul><li>操作：启动 Kafka 消费者</li></ul><pre class=" language-xshell"><code class="language-xshell"># 启动 Kafka 消费者bin/kafka-console-consumer.sh --bootstrap-server master01:9092 --topic flume-kafka</code></pre><p>然后向 <code>/tmp/kafka.log</code> 文件写入内容即可在控制台看到对应的文件。</p><ul><li>解释说明：如果不创建 <code>Kafka</code> 主题，提交配置文件的时候会自动创建。</li></ul><h2 id="03：监听指定文件下的新增文件到-HDFS-中"><a href="#03：监听指定文件下的新增文件到-HDFS-中" class="headerlink" title="03：监听指定文件下的新增文件到 HDFS 中"></a>03：监听指定文件下的新增文件到 <code>HDFS</code> 中</h2><p><strong>监听 <code>/tmp/logs</code> 文件夹内的文件并存储到 <code>HDFS</code> 中</strong></p><ul><li>配置：<code>spooling-memory-hdfs.properties</code></li></ul><pre class=" language-porperties"><code class="language-porperties">#指定agent的sources,sinks,channels# 监听 /tmp/logs 文件夹，有文件的时候，把文件保存到 HDFSa1.sources = s1  a1.sinks = k1  a1.channels = c1  #配置sources属性a1.sources.s1.type = spooldir  a1.sources.s1.spoolDir = /tmp/logsa1.sources.s1.basenameHeader = truea1.sources.s1.basenameHeaderKey = fileName #将sources与channels进行绑定  a1.sources.s1.channels =c1 #配置sink a1.sinks.k1.type = hdfsa1.sinks.k1.hdfs.path = /flume/events/%y-%m-%d/%H/a1.sinks.k1.hdfs.filePrefix = %{fileName}#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本a1.sinks.k1.hdfs.fileType = DataStream  a1.sinks.k1.hdfs.useLocalTimeStamp = true#将sinks与channels进行绑定  a1.sinks.k1.channel = c1#配置channel类型a1.channels.c1.type = memory</code></pre><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/spooling-memory-hdfs.properties \--name a1 -Dflume.root.logger=INFO,console</code></pre><p>然后复制对应的文件到 <code>/tmp/logs</code> 目录中，该文件就会被存储到 <code>HDFS</code> 中。</p><ul><li>解释说明：<code>logs</code> 文件夹需要新建，如果不存在，提交配置项的时候会报错。</li></ul><h2 id="04：监听指定文件下的新增文件到-Kafka-中"><a href="#04：监听指定文件下的新增文件到-Kafka-中" class="headerlink" title="04：监听指定文件下的新增文件到 Kafka 中"></a>04：监听指定文件下的新增文件到 <code>Kafka</code> 中</h2><p><strong>监听 <code>/tmp/logs</code> 文件夹内的文件并存储到 <code>Kafka</code> 中</strong></p><ul><li>配置：<code>spooling-memory-kafka.properties</code></li></ul><pre class=" language-poeperties"><code class="language-poeperties"># 监听 /tmp/logs 文件夹，保存到 kafka a1.sources = s1a1.channels = c1a1.sinks = k1                                                                                         #配置sources属性a1.sources.s1.type = spooldir  a1.sources.s1.spoolDir = /tmp/logsa1.sources.s1.basenameHeader = truea1.sources.s1.basenameHeaderKey = fileName #将sources与channels进行绑定  a1.sources.s1.channels =c1 #设置Kafka接收器a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink#设置Kafka地址a1.sinks.k1.brokerList = master01:9092#设置发送到Kafka上的主题a1.sinks.k1.topic = flume-logs-kafka#设置序列化方式a1.sinks.k1.serializer.class = kafka.serializer.StringEncodera1.sinks.k1.channel = c1     a1.channels.c1.type = memorya1.channels.c1.capacity = 10000a1.channels.c1.transactionCapacity = 100   </code></pre><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/spooling-memory-kafka.properties \--name a1 -Dflume.root.logger=INFO,console</code></pre><p>启动 <code>Kafka</code> 消费者，然后复制对应的文件到 <code>/tmp/logs</code> 目录中，就会在 <code>Kafka</code> 消费者的输出界面输出对应的文件内容。</p><ul><li>解释说明：<code>logs</code> 文件夹需要新建，如果不存在，提交配置项的时候会报错。</li></ul><h2 id="05：采集-Mysql-的数据到控制台"><a href="#05：采集-Mysql-的数据到控制台" class="headerlink" title="05：采集 Mysql 的数据到控制台"></a>05：采集 <code>Mysql</code> 的数据到控制台</h2><p><strong>采集 <code>Mysql</code> 里的数据并输出到控制台</strong></p><ul><li>配置：<code>flume-memory-mysql-log.properties</code></li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 监听 Mysql 数据，到界面输出。</span><span class="token attr-name">a1.sources</span> <span class="token punctuation">=</span> <span class="token attr-value">r1</span><span class="token attr-name">a1.sinks</span> <span class="token punctuation">=</span> <span class="token attr-value">k1</span><span class="token attr-name">a1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token comment" spellcheck="true"># Describe/configure the source</span><span class="token attr-name">a1.sources.r1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">org.keedio.flume.source.SQLSource</span><span class="token attr-name">a1.sources.r1.hibernate.connection.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://192.168.0.104:3306/taotao</span><span class="token attr-name">a1.sources.r1.hibernate.connection.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root  </span><span class="token attr-name">a1.sources.r1.hibernate.connection.password</span> <span class="token punctuation">=</span> <span class="token attr-value">oadat</span><span class="token attr-name">a1.sources.r1.hibernate.connection.autocommit</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">a1.sources.r1.hibernate.connection.driver_class</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">a1.sources.r1.hibernate.dialect</span> <span class="token punctuation">=</span> <span class="token attr-value">org.hibernate.dialect.MySQL5Dialect</span><span class="token attr-name">a1.sources.r1.run.query.delay</span> <span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token attr-name">a1.sources.r1.status.file.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/home/flume/flume/mysql</span><span class="token attr-name">a1.sources.r1.status.file.name</span> <span class="token punctuation">=</span> <span class="token attr-value">r1.status</span><span class="token attr-name">a1.sources.r1.table</span> <span class="token punctuation">=</span> <span class="token attr-value">tb_item_cat</span><span class="token attr-name">a1.sources.r1.columns.to.select</span> <span class="token punctuation">=</span> <span class="token attr-value">*</span><span class="token comment" spellcheck="true"># a1.sources.r1.incremental.column.name=name</span><span class="token comment" spellcheck="true"># a1.sources.r1.incremental.value=0</span><span class="token comment" spellcheck="true"># a1.sources.r1.custom.query = select name from tb_item_cat </span><span class="token comment" spellcheck="true"># where id > $@$ order by id 注意加了此段SQL会报错：SQL语句异常。</span><span class="token comment" spellcheck="true"># a1.sources.r1.start.from = 0 </span><span class="token comment" spellcheck="true"># a1.sources.r1.hibernate.connection.provider_class = org.hibernate.connection.C3P0ConnectionProvider</span><span class="token attr-name">a1.sinks.k1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">logger</span><span class="token comment" spellcheck="true"># Describe the channel</span><span class="token attr-name">a1.channels.c1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">memory</span><span class="token attr-name">a1.channels.c1.capacity</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">a1.channels.c1.transactionCapacity</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token comment" spellcheck="true"># Bind the source and sink to the channel</span><span class="token attr-name">a1.sources.r1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token attr-name">a1.sinks.k1.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span></code></pre><ul><li>操作：将对应的包复制到 <code>Flume</code> 的 <code>lib</code> 文件夹下</li></ul><blockquote><p>需要将包 <code>mysql-connector-java-5.1.6.jar</code> 和 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code> 复制到对应的 <code>Flume</code> 的 <code>lib</code> 包下。<br>包 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code>为 <a href="https://github.com/keedio/flume-ng-sql-source" target="_blank" rel="noopener">github-flume-mysql</a> 下载后通过 <code>Maven</code> 命令编译生成的。</p></blockquote><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/flume-memory-mysql-log.properties \--name a1 -Dflume.root.logger=INFO,console</code></pre><ul><li>操作：在对应的数据库内新增数据</li></ul><blockquote><p>在数据库 <code>taotao</code> 的表 <code>tb_item_cat</code> 插入对应的数据即可在界面看到采集到的数据。</p></blockquote><h2 id="06：采集-Mysql-的数据到-HDFS-中"><a href="#06：采集-Mysql-的数据到-HDFS-中" class="headerlink" title="06：采集 Mysql 的数据到 HDFS 中"></a>06：采集 <code>Mysql</code> 的数据到 <code>HDFS</code> 中</h2><p><strong>采集 <code>Mysql</code> 里的数据并存储到 <code>HDFS</code> 中</strong></p><ul><li>配置：<code>flume-memory-mysql-hdfs.properties</code></li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 采集 Mysql的数据到 HDFS</span><span class="token attr-name">a1.sources</span> <span class="token punctuation">=</span> <span class="token attr-value">r1</span><span class="token attr-name">a1.sinks</span> <span class="token punctuation">=</span> <span class="token attr-value">k1</span><span class="token attr-name">a1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token comment" spellcheck="true"># Describe/configure the source</span><span class="token attr-name">a1.sources.r1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">org.keedio.flume.source.SQLSource</span><span class="token attr-name">a1.sources.r1.hibernate.connection.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://192.168.0.104:3306/taotao</span><span class="token attr-name">a1.sources.r1.hibernate.connection.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root  </span><span class="token attr-name">a1.sources.r1.hibernate.connection.password</span> <span class="token punctuation">=</span> <span class="token attr-value">oadat</span><span class="token attr-name">a1.sources.r1.hibernate.connection.autocommit</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">a1.sources.r1.hibernate.connection.driver_class</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">a1.sources.r1.hibernate.dialect</span> <span class="token punctuation">=</span> <span class="token attr-value">org.hibernate.dialect.MySQL5Dialect</span><span class="token attr-name">a1.sources.r1.run.query.delay</span> <span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token attr-name">a1.sources.r1.status.file.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/home/flume/flume/mysql/hdfs</span><span class="token attr-name">a1.sources.r1.status.file.name</span> <span class="token punctuation">=</span> <span class="token attr-value">r1.status</span><span class="token attr-name">a1.sources.r1.table</span> <span class="token punctuation">=</span> <span class="token attr-value">tb_item_cat</span><span class="token attr-name">a1.sources.r1.columns.to.select</span> <span class="token punctuation">=</span> <span class="token attr-value">*</span><span class="token comment" spellcheck="true">#配置sink </span><span class="token attr-name">a1.sinks.k1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">hdfs</span><span class="token attr-name">a1.sinks.k1.hdfs.path</span> <span class="token punctuation">=</span> <span class="token attr-value">hdfs://master01:9000/mysql/event/%y-%m-%d/%H/</span><span class="token comment" spellcheck="true"># a1.sinks.k1.hdfs.filePrefix = %{fileName}</span><span class="token comment" spellcheck="true">#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><span class="token attr-name">a1.sinks.k1.hdfs.fileType</span> <span class="token punctuation">=</span> <span class="token attr-value">DataStream </span><span class="token attr-name">a1.sinks.k1.hdfs.writeFormat</span> <span class="token punctuation">=</span> <span class="token attr-value">Text </span><span class="token comment" spellcheck="true"># a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><span class="token comment" spellcheck="true"># Describe the channel</span><span class="token attr-name">a1.channels.c1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">memory</span><span class="token attr-name">a1.channels.c1.capacity</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">a1.channels.c1.transactionCapacity</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token comment" spellcheck="true"># Bind the source and sink to the channel</span><span class="token attr-name">a1.sources.r1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token attr-name">a1.sinks.k1.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span></code></pre><ul><li>操作：将对应的包复制到 <code>Flume</code> 的 <code>lib</code> 文件夹下</li></ul><blockquote><p>需要将包 <code>mysql-connector-java-5.1.6.jar</code> 和 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code> 复制到对应的 <code>Flume</code> 的 <code>lib</code> 包下。<br>包 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code>为 <a href="https://github.com/keedio/flume-ng-sql-source" target="_blank" rel="noopener">github-flume-mysql</a> 下载后通过 <code>Maven</code> 命令编译生成的。</p></blockquote><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/flume-memory-mysql-hdfs.properties \--name a1 -Dflume.root.logger=INFO,console</code></pre><ul><li>操作：在对应的数据库内新增数据</li></ul><blockquote><p>在数据库 <code>taotao</code> 的表 <code>tb_item_cat</code> 插入对应的数据即可。</p></blockquote><h2 id="07：采集-Mysql-的数据到-Kafka-中"><a href="#07：采集-Mysql-的数据到-Kafka-中" class="headerlink" title="07：采集 Mysql 的数据到 Kafka 中"></a>07：采集 <code>Mysql</code> 的数据到 <code>Kafka</code> 中</h2><p><strong>采集 <code>Mysql</code> 里的数据并存储到 <code>Kafka</code> 中</strong></p><ul><li>配置：<code>flume-memory-mysql-kafka.properties</code></li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 采集 Mysql 的数据，保存到 Kafka</span><span class="token attr-name">a1.sources</span> <span class="token punctuation">=</span> <span class="token attr-value">r1</span><span class="token attr-name">a1.sinks</span> <span class="token punctuation">=</span> <span class="token attr-value">k1</span><span class="token attr-name">a1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token comment" spellcheck="true"># Describe/configure the source</span><span class="token attr-name">a1.sources.r1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">org.keedio.flume.source.SQLSource</span><span class="token attr-name">a1.sources.r1.hibernate.connection.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://192.168.0.104:3306/taotao</span><span class="token attr-name">a1.sources.r1.hibernate.connection.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root  </span><span class="token attr-name">a1.sources.r1.hibernate.connection.password</span> <span class="token punctuation">=</span> <span class="token attr-value">oadat</span><span class="token attr-name">a1.sources.r1.hibernate.connection.autocommit</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">a1.sources.r1.hibernate.connection.driver_class</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">a1.sources.r1.hibernate.dialect</span> <span class="token punctuation">=</span> <span class="token attr-value">org.hibernate.dialect.MySQL5Dialect</span><span class="token attr-name">a1.sources.r1.run.query.delay</span> <span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token attr-name">a1.sources.r1.status.file.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/home/flume/flume/mysql</span><span class="token attr-name">a1.sources.r1.status.file.name</span> <span class="token punctuation">=</span> <span class="token attr-value">r1.status</span><span class="token attr-name">a1.sources.r1.table</span><span class="token punctuation">=</span><span class="token attr-value">tb_item_cat</span><span class="token attr-name">a1.sources.r1.columns.to.select</span><span class="token punctuation">=</span><span class="token attr-value">*</span><span class="token comment" spellcheck="true">#设置Kafka接收器</span><span class="token attr-name">a1.sinks.k1.type</span><span class="token punctuation">=</span> <span class="token attr-value">org.apache.flume.sink.kafka.KafkaSink</span><span class="token comment" spellcheck="true">#设置Kafka地址</span><span class="token attr-name">a1.sinks.k1.brokerList</span><span class="token punctuation">=</span><span class="token attr-value">master01:9092</span><span class="token comment" spellcheck="true">#设置发送到Kafka上的主题</span><span class="token attr-name">a1.sinks.k1.topic</span><span class="token punctuation">=</span><span class="token attr-value">flume-mysql-kafka</span><span class="token comment" spellcheck="true">#设置序列化方式</span><span class="token attr-name">a1.sinks.k1.serializer.class</span><span class="token punctuation">=</span><span class="token attr-value">kafka.serializer.StringEncoder</span><span class="token comment" spellcheck="true"># Describe the channel</span><span class="token attr-name">a1.channels.c1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">memory</span><span class="token attr-name">a1.channels.c1.capacity</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">a1.channels.c1.transactionCapacity</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token comment" spellcheck="true"># Bind the source and sink to the channel</span><span class="token attr-name">a1.sources.r1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token attr-name">a1.sinks.k1.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span></code></pre><ul><li>操作：将对应的包复制到 <code>Flume</code> 的 <code>lib</code> 文件夹下</li></ul><blockquote><p>需要将包 <code>mysql-connector-java-5.1.6.jar</code> 和 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code> 复制到对应的 <code>Flume</code> 的 <code>lib</code> 包下。<br>包 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code>为 <a href="https://github.com/keedio/flume-ng-sql-source" target="_blank" rel="noopener">github-flume-mysql</a> 下载后通过 <code>Maven</code> 命令编译生成的。</p></blockquote><ul><li>操作：启动 <code>Kafka</code> 消费者</li></ul><pre class=" language-xshell"><code class="language-xshell">bin/kafka-console-consumer.sh --bootstrap-server master01:9092 --topic flume-mysql-kafka</code></pre><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/flume-memory-mysql-kafka.properties \--name a1 -Dflume.root.logger=INFO,console</code></pre><ul><li>操作：在对应的数据库内新增数据</li></ul><blockquote><p>在数据库 <code>taotao</code> 的表 <code>tb_item_cat</code> 插入对应的数据即可。</p></blockquote><h2 id="08：采集-Mysql-的数据分别到-HDFS和-Kafka-中"><a href="#08：采集-Mysql-的数据分别到-HDFS和-Kafka-中" class="headerlink" title="08：采集 Mysql 的数据分别到 HDFS和 Kafka 中"></a>08：采集 <code>Mysql</code> 的数据分别到 <code>HDFS</code>和 <code>Kafka</code> 中</h2><p><strong>采集 <code>Mysql</code> 内的数据分别到 <code>HDFS</code> 和 <code>Kafka</code> 中</strong></p><ul><li>配置：<code>flume-memory-mysql-hdfs-kafka.properties</code></li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 采集 Mysql 的数据，保存到 Kafka</span><span class="token attr-name">a1.sources</span> <span class="token punctuation">=</span> <span class="token attr-value">r1</span><span class="token attr-name">a1.sinks</span> <span class="token punctuation">=</span> <span class="token attr-value">k1 k2</span><span class="token attr-name">a1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token comment" spellcheck="true"># Describe/configure the source</span><span class="token attr-name">a1.sources.r1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">org.keedio.flume.source.SQLSource</span><span class="token attr-name">a1.sources.r1.hibernate.connection.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://192.168.0.104:3306/taotao</span><span class="token attr-name">a1.sources.r1.hibernate.connection.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root  </span><span class="token attr-name">a1.sources.r1.hibernate.connection.password</span> <span class="token punctuation">=</span> <span class="token attr-value">oadat</span><span class="token attr-name">a1.sources.r1.hibernate.connection.autocommit</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">a1.sources.r1.hibernate.connection.driver_class</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">a1.sources.r1.hibernate.dialect</span> <span class="token punctuation">=</span> <span class="token attr-value">org.hibernate.dialect.MySQL5Dialect</span><span class="token attr-name">a1.sources.r1.run.query.delay</span> <span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token attr-name">a1.sources.r1.status.file.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/home/flume/flume/flume_hdfs</span><span class="token attr-name">a1.sources.r1.status.file.name</span> <span class="token punctuation">=</span> <span class="token attr-value">r1.status</span><span class="token attr-name">a1.sources.r1.table</span> <span class="token punctuation">=</span> <span class="token attr-value">tb_item_cat</span><span class="token attr-name">a1.sources.r1.columns.to.select</span><span class="token punctuation">=</span> <span class="token attr-value">*</span><span class="token comment" spellcheck="true">#设置Kafka接收器</span><span class="token attr-name">a1.sinks.k1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.flume.sink.kafka.KafkaSink</span><span class="token comment" spellcheck="true">#设置Kafka地址</span><span class="token attr-name">a1.sinks.k1.brokerList</span> <span class="token punctuation">=</span> <span class="token attr-value">master01:9092</span><span class="token comment" spellcheck="true">#设置发送到Kafka上的主题</span><span class="token attr-name">a1.sinks.k1.topic</span> <span class="token punctuation">=</span> <span class="token attr-value">flume-hdfs-kafka</span><span class="token comment" spellcheck="true">#设置序列化方式</span><span class="token attr-name">a1.sinks.k1.serializer.class</span> <span class="token punctuation">=</span> <span class="token attr-value">kafka.serializer.StringEncoder</span><span class="token comment" spellcheck="true">#配置sink </span><span class="token attr-name">a1.sinks.k2.type</span> <span class="token punctuation">=</span> <span class="token attr-value">hdfs</span><span class="token attr-name">a1.sinks.k2.hdfs.path</span> <span class="token punctuation">=</span> <span class="token attr-value">hdfs://master01:9000/flume02/event/%y-%m-%d/%H/</span><span class="token comment" spellcheck="true"># a1.sinks.k1.hdfs.filePrefix = %{fileName}</span><span class="token comment" spellcheck="true">#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</span><span class="token attr-name">a1.sinks.k2.hdfs.fileType</span> <span class="token punctuation">=</span> <span class="token attr-value">DataStream </span><span class="token attr-name">a1.sinks.k2.hdfs.writeFormat</span> <span class="token punctuation">=</span> <span class="token attr-value">Text </span><span class="token comment" spellcheck="true"># a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><span class="token comment" spellcheck="true"># Describe the channel</span><span class="token attr-name">a1.channels.c1.type</span> <span class="token punctuation">=</span> <span class="token attr-value">memory</span><span class="token attr-name">a1.channels.c1.capacity</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">a1.channels.c1.transactionCapacity</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token comment" spellcheck="true"># Bind the source and sink to the channel</span><span class="token attr-name">a1.sources.r1.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token attr-name">a1.sinks.k1.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span><span class="token attr-name">a1.sinks.k2.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">c1</span></code></pre><ul><li>操作：将对应的包复制到 <code>Flume</code> 的 <code>lib</code> 文件夹下</li></ul><blockquote><p>需要将包 <code>mysql-connector-java-5.1.6.jar</code> 和 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code> 复制到对应的 <code>Flume</code> 的 <code>lib</code> 包下。<br>包 <code>flume-ng-sql-source-1.5.3-SNAPSHOT.jar</code>为 <a href="https://github.com/keedio/flume-ng-sql-source" target="_blank" rel="noopener">github-flume-mysql</a> 下载后通过 <code>Maven</code> 命令编译生成的。</p></blockquote><ul><li>操作：启动 <code>Kafka</code> 消费者</li></ul><pre class=" language-xshell"><code class="language-xshell">bin/kafka-console-consumer.sh --bootstrap-server master01:9092 --topic flume-hdfs-kafka</code></pre><ul><li>操作：提交配置文件</li></ul><pre class=" language-xshell"><code class="language-xshell">flume-ng agent \--conf conf \--conf-file /home/flume/flume/conf/flume-memory-mysql-hdfs-kafka.properties \--name a1 -Dflume.root.logger=INFO,console</code></pre><ul><li>操作：在对应的数据库内新增数据</li></ul><blockquote><p>在数据库 <code>taotao</code> 的表 <code>tb_item_cat</code> 插入对应的数据即可。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume 实际操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume基础</title>
      <link href="/2020/11/22/flume-ji-chu/"/>
      <url>/2020/11/22/flume-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Flume-基础"><a href="#Flume-基础" class="headerlink" title="Flume_基础"></a>Flume_基础</h1><h2 id="Flume的定义"><a href="#Flume的定义" class="headerlink" title="Flume的定义"></a>Flume的定义</h2><p> <code>Flume</code> 是一个分布式的、高可靠的、高可用的将大批量的不同数据源的日志数据收集、聚合、移动到数据中心（<code>HDFS</code>）进行存储的系统。即是日志采集和汇总的工具。</p><h2 id="Flume的优势"><a href="#Flume的优势" class="headerlink" title="Flume的优势"></a>Flume的优势</h2><ol><li>可以高速采集数据，采集的数据能够以想要的文件格式及压缩方式存储在<code>HDFS</code>上。</li><li>事务功能保证了数据在采集的过程中数据不丢失。</li><li>部分 <code>Source</code> 保证了 <code>Flume</code> 挂了以后重启依旧能够继续在上一次采集点采集数据，真正做到数据零丢失。</li></ol><h2 id="Flume的组成"><a href="#Flume的组成" class="headerlink" title="Flume的组成"></a>Flume的组成</h2><ol><li><code>Source</code>(源端数据采集)：<code>Flume</code> 提供了各种各样的 <code>Source</code> 、同时还提供了自定义的 <code>Source</code>。</li><li><code>Channel</code> (临时存储聚合数据)：主要用的是<code>Memory Channel</code>和 <code>File Channel</code>（生产最常用），生产中 <code>Channel</code> 的数据一定是要监控的，防止<code>Sink</code>挂了，撑爆<code>Channel</code>。</li><li><code>Sink</code>（移动数据到目标端）：如<code>HDFS</code>、<code>KAFKA</code>、<code>DB</code>以及自定义的 <code>Sink</code>。</li></ol><h2 id="Flume的架构"><a href="#Flume的架构" class="headerlink" title="Flume的架构"></a>Flume的架构</h2><ul><li>单 <code>Agent</code>：</li></ul><p><img src="/2020/11/22/flume-ji-chu/20201012212606716_18738.png" alt="单Agent"></p><ul><li>串联 <code>Agent</code>：</li></ul><p><img src="/2020/11/22/flume-ji-chu/20201012212635152_11565.png" alt="串联Agent"></p><ul><li>并联<code>Agent</code>：</li></ul><p><img src="/2020/11/22/flume-ji-chu/20201012212707974_11287.png" alt="并联Agent"></p><ul><li>多 <code>SinkAgent</code>：</li></ul><p><img src="/2020/11/22/flume-ji-chu/20201012212818429_23925.png" alt="多SinkAgent"></p><h2 id="Agent配置使用案列"><a href="#Agent配置使用案列" class="headerlink" title="Agent配置使用案列"></a>Agent配置使用案列</h2><ol><li><code>Flume</code> 的使用其实就是 <code>Source</code>、<code>Channel</code>、<code>Sink</code> 的配置。</li><li><code>Agent=Source+Channel+Sink</code>，其实 <code>Agent</code> 就是 <code>Flume</code> 的配置文件。</li><li>一个配置文件可以配置多个 <code>Agent</code> 的。</li><li><code>Event</code>：<code>Flume</code> 数据传输的最小单位，一个 <code>Event</code> 就是一条记录，由 <code>Head</code> 和 <code>Body</code>两个部分组成，<code>Head</code> 存储的是管道，<code>Body</code> 存储的是字节数组。</li></ol><p><strong>使用Exec Source采集文件数据到HDFS</strong></p><ul><li>缺点：</li></ul><ol><li>虽然此种 <code>Tail</code>方式可以将日志数据采集到 <code>HDFS</code>，但是 <code>Tail -F</code>进程挂了咋办，还是会丢数据！生产上是行不通的。无法做到高可用。</li><li>其次上面的采集流程并未解决生成大量小文件的问题，无法做到高可靠。</li><li><code>Tail</code> 只能监控一个文件，生产中更多的是监控一个文件夹。不能满足需求。</li></ol><p><strong>使用Spooling Directory Source采集文件夹数据到 HDFS</strong></p><ul><li>写到 <code>HDFS</code>上的文件大小最好是100M左右，比<code>Blocksize</code> 的值（128M）略低。</li><li>一般使用 <code>Rolllnterval</code>（时间）、<code>RollSize</code>（大小）来控制文件的生成，哪个先触发就会生成 <code>HDFS</code> 文件，将根据条数的 <code>Roll</code>关闭。</li><li><code>RollSize</code> 控制的大小是指的压缩前的，所以若<code>HDFS</code>文件使用了压缩，需调大 <code>Rollsize</code>的大小。</li><li>当文件夹下的某个文件被采集到<code>HDFS</code>上，会有个 <code>Complete</code>的标志。</li><li>使用<code>Spooling Directory Source</code>采集文件数据时若该文件数据已经被采集，再对该文件做修改是会报错的停止的，其次若放进去一个已经完成采集的同名数据文件也是会报错停止的。</li><li>写 <code>HDFS</code>数据可按照时间分区，注意改时间刻度内无数据则不会生成该时间文件夹。</li><li>生成的文件名称默认是前缀+时间戳，这个是可以更改的。</li><li>缺点</li></ul><ol><li>虽然能监控一个文件夹，但是无法监控递归的文件夹中的数据。</li><li>若采集时 <code>Flume</code>挂了，无法保证重启时还从之前文件读取的那一行继续采集数据。</li></ol><p><strong>使用Taildir Source采集文件夹数据到HDFS</strong></p><ul><li><code>Taildir Source</code> 是<code>Apache flume1.7</code>新推出的，但是<code>CDH Flume1.6</code>做了集成。</li><li><code>Taildir Source</code>是高可靠（<code>Reliable</code>）的 <code>Source</code>，他会实时的将文件偏移量写到<code>Json</code>文件中并保存到磁盘。下次重启<code>Flume</code>时会读取<code>Json</code>文件获取文件偏移量，然后从之前的位置读取数据，保证数据零丢失。</li><li><code>Taildir Source</code>可同时监控多个文件夹以及文件。即使文件在实时写入数据。</li><li><code>Taildir Source</code>也是无法采集递归文件下的数据，这需要改造源码。</li><li><code>Taildir Source</code>监控一个文件夹下的所有文件一定要用.*正则。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_支持LZO压缩</title>
      <link href="/2020/11/15/hadoop-zhi-chi-lzo-ya-suo/"/>
      <url>/2020/11/15/hadoop-zhi-chi-lzo-ya-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-支持LZO压缩"><a href="#Hadoop-支持LZO压缩" class="headerlink" title="Hadoop_支持LZO压缩"></a>Hadoop_支持LZO压缩</h1><h2 id="第一步：安装-LZO库。"><a href="#第一步：安装-LZO库。" class="headerlink" title="第一步：安装 LZO库。"></a>第一步：安装 <code>LZO</code>库。</h2><p><strong>（<code>hadoop</code> 用户在 <code>home</code> 目录下新建的文件夹 <code>LZO</code>，以下所有的安装均在这个目录下）</strong></p><ul><li>安装<code>lzo</code>：<code>wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.10.tar.gz</code> 。</li><li>解压。</li><li>进入解压目录。</li><li>编译参数。<ol><li>本例安装在 <code>/home/LZO/lzo2.10</code> 目录下（<code>lzo2.10</code>）为新建文件夹。</li><li>编译命令 <code>./configure --enable-shared --prefix=/home/LZO/lzo2.10</code> 。</li></ol></li><li>编译安装：<code>make &amp;&amp; make install</code> 。</li><li>进入安装目录 <code>/home/LZO/lzo2.10</code> 。</li><li>执行命令。</li></ul><pre class=" language-xshell"><code class="language-xshell">    cp -r lib/* /usr/lib/    cp -r lib/* /home/hadoop/hadoop/hadoop-2.7.2/lib/native/</code></pre><p><strong>注意</strong></p><ul><li>64位的系统执行如下命令：</li></ul><pre class=" language-xshell"><code class="language-xshell">    cp -r lib/* /usr/lib64/    cp -r lib/* /home/hadoop/hadoop/hadoop-2.7.2/lib/native/Linux-amd64-64/</code></pre><ul><li>教程里执行的命令是：<code>cp -r lib/* /home/hadoop/hadoop/hadoop-2.7.2/lib/native/Linux-i386-32/</code> 但是我没找到 <code>Linux-i386-32</code> 这个目录。</li></ul><h2 id="第二步：安装-hadoop-lzo-包。"><a href="#第二步：安装-hadoop-lzo-包。" class="headerlink" title="第二步：安装 hadoop-lzo 包。"></a>第二步：安装 <code>hadoop-lzo</code> 包。</h2><ul><li>安装 <code>hadoop-lzo</code>： <code>wget https://github.com/twitter/hadoop-lzo/archive/master.zip --no-check-certificate  -O master.zip</code> 。</li><li>解压 <code>unzip master.zip</code>。</li><li>编译。<ol><li>修改目录 <code>hadoop-lzo-master</code> 里的 <code>pom.xml</code> ,把 <code>hadoop.current.version</code> 的属性修改成自己使用版本的。</li><li>进入 <code>hadoop-lzo-master</code>目录，执行：</li></ol></li></ul><pre><code>    export C_INCLUDE_PATH=/home/LZO/lzo-2.10/include    export LIBRARY_PATH=/home/LZO/lzo-2.10/lib</code></pre><p>然后编译 <code>mvn clean package -Dmaven.test.skip=true</code>。`</p><p>把编译好的文件拷贝到对应目录：</p><pre><code>    cp target/native/Linux-amd64-64/*  /home/hadoop/hadoop/hadoop-2.7.2/lib/native/    cp target/hadoop-lzo-0.4.21-SNAPSHOT.jar /home/hadoop/hadoop/hadoop-2.7.2/share/hadoop/mapreduce/lib</code></pre><p><strong>注意</strong></p><ul><li>这里用到了 <code>Maven</code>，首先先保证 <code>Maven</code> 已经安装，并配置成功。</li><li>当执行 <code>mvn clean package -Dmaven.test.skip=true</code> 命令出错的时候，试在清空 <code>Maven</code> 加载架包生成的目录。</li></ul><h2 id="第三步：修改配置文件。"><a href="#第三步：修改配置文件。" class="headerlink" title="第三步：修改配置文件。"></a>第三步：修改配置文件。</h2><ul><li>在 <code>Hadoop</code> 中的 <code>/home/hadoop/hadoop/hadoop-2.7.2/etc/hadoop/hadoop-env.sh</code> 加上<br><code>export LIBRARY_PATH=/home/LZO/lzo-2.10/lib</code> 。</li><li>在 <code>Hadoop</code> 中的 <code>/home/hadoop/hadoop/hadoop-2.7.2/etc/hadoop/core-site.xml</code> 加上。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>io.compression.codecs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.io.compress.GzipCodec,           org.apache.hadoop.io.compress.DefaultCodec,           com.hadoop.compression.lzo.LzoCodec,           com.hadoop.compression.lzo.LzopCodec,           org.apache.hadoop.io.compress.BZip2Codec        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>io.compression.codec.lzo.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.hadoop.compression.lzo.LzoCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><ul><li>在 <code>Hadoop</code> 中的 <code>/home/hadoop/hadoop/hadoop-2.7.2/etc/hadoop/mapred-site.xml</code> 加上。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.compress.map.output<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.map.output.compression.codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.hadoop.compression.lzo.LzoCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.child.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LD_LIBRARY_PATH=/home/LZO/lzo-2.10/lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h2 id="第四步：验证。"><a href="#第四步：验证。" class="headerlink" title="第四步：验证。"></a>第四步：验证。</h2><p>在 <code>Hive</code> 里新建一个表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> lzo<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    name string<span class="token punctuation">)</span>    STORED <span class="token keyword">AS</span> INPUTFORMAT <span class="token string">'com.hadoop.mapred.DeprecatedLzoTextInputFormat'</span>    OUTPUTFORMAT <span class="token string">'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'</span><span class="token punctuation">;</span></code></pre><p>没有报错，及初步成功。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支持LZO压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_伪分布式安装</title>
      <link href="/2020/11/15/hadoop-wei-fen-bu-shi-an-zhuang/"/>
      <url>/2020/11/15/hadoop-wei-fen-bu-shi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop伪分布式安装"><a href="#Hadoop伪分布式安装" class="headerlink" title="Hadoop伪分布式安装"></a>Hadoop伪分布式安装</h1><h2 id="1：添加-hadoop-用户"><a href="#1：添加-hadoop-用户" class="headerlink" title="1：添加 hadoop 用户"></a>1：添加 <code>hadoop</code> 用户</h2><p>新增一个用户 <code>hadoop</code> ,以后就用 <code>hadoop</code> 这个用户对 <code>Hadoop</code> 进行管理。</p><ul><li>新增<code>hadoop</code> 用户 ：<code>adduser hadoop</code>。</li><li>为<code>hadoop</code> 用户添加管理员权限：赋值<code>root</code> 权限—&gt;修改 （<code>vim /etc/sudoers</code>）,找到下面一行<code>root  ALL =（ALL）ALL</code> 下添加 <code>hadoop ALL = (ALL) ALL</code>。</li></ul><p><strong>执行完这个操作，接下来的命令就切换到 <code>hadoop</code> 用户下进行。</strong></p><h2 id="2：-配置环境"><a href="#2：-配置环境" class="headerlink" title="2： 配置环境"></a>2： 配置环境</h2><ul><li>安装<code>shh</code> 服务器：<code>sudo apt-get install openssh-server</code></li><li>登录本机：<code>ssh localhost</code></li></ul><p>输入密码，登录成功，之后执行<code>exit</code> 退出登录。</p><ul><li>设置无密登录<ol><li><code>cd ~/.ssh/</code> 若⽬录不存在，则再次执⾏ <code>ssh localhost</code>。</li><li><code>ssh-keygen -t rsa</code> 不⽤管提⽰，⼀直按回⻋。</li><li><code>cat ./id_rsa.pub &gt;&gt; ./authorized_keys</code> 加⼊授权。</li><li><code>ssh localhost</code> 测试⽆密码登录。</li></ol></li></ul><p>执行第三步的时候，最好看下当前的目录，如果当前目录在 <code>/.ssh</code> 下。那么只需要执行<code>cat id_rsa.pub &gt;&gt; authorized_keys</code> 即可。</p><p>查看当前目录下下的文件命令：<code>ls -a</code>。</p><h2 id="3：安装-JDK"><a href="#3：安装-JDK" class="headerlink" title="3：安装 JDK"></a>3：安装 <code>JDK</code></h2><p>1：上传文件到指定位置。</p><p>2：解压。</p><p>3：修改系统配置（<code>vim /etc/profile</code>）。</p><pre class=" language-config"><code class="language-config">export JAVA_HOME=/home/JDK/jdk1.8.0_191export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATHexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin</code></pre><p>4：配置生效 <code>source /etc/profile</code>。</p><p>5：验证<code>java -version</code>。</p><h2 id="4：安装-Hadoop"><a href="#4：安装-Hadoop" class="headerlink" title="4：安装 Hadoop"></a>4：安装 <code>Hadoop</code></h2><ul><li>下载对应版本的<code>hadoop</code>，放在指定的目录下，然后解压。</li><li>修改文件夹属性：<code>sudo chown hadoop:hadoop -R /home/hadoop</code>。</li></ul><p>文件解压放在了<code>/home/hadoop</code> 目录下。</p><ul><li>检查是否安装成功：进入解压后的目录，执行：<code>./bin/hadoop version</code>。</li></ul><p>文件目录为：<code>/home/hadoop/hadoop-2.7.2</code>。</p><h2 id="5：配置伪分布式"><a href="#5：配置伪分布式" class="headerlink" title="5：配置伪分布式"></a>5：配置伪分布式</h2><p>(注意文件目录为：<code>/home/hadoop/hadoop-2.7.2</code>)</p><ul><li><code>core-site.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/home/hadoop/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://localhost:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li><code>hdfs-site.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/home/hadoop/tmp/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/home/hadoop/tmp/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li><code>mapred-site.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li><code>yarn-site.xml</code></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="6：设置-HADOOP-HOME"><a href="#6：设置-HADOOP-HOME" class="headerlink" title="6：设置 HADOOP_HOME"></a>6：设置 <code>HADOOP_HOME</code></h2><ul><li><code>vim /etc/profile</code> 在<code>JAVA_HOME</code> 下添加如下两行：</li></ul><pre class=" language-config"><code class="language-config"> export HADOOP_HOME=/home/hadoop/hadoop-2.7.2 export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</code></pre><ul><li>修改<code>hadoop_env.sh</code> 的<code>JAVA_HOME</code> 把这个值写死 （这个值就是上文配置里的<code>JAVA_HOME</code>）。</li></ul><h2 id="7：格式化-NameNode"><a href="#7：格式化-NameNode" class="headerlink" title="7：格式化 NameNode"></a>7：格式化 <code>NameNode</code></h2><ul><li>（在<code>HADOOP_HOME</code> 目录下执行）</li></ul><pre class=" language-xshell"><code class="language-xshell">./bin/hdfs namenode-formar </code></pre><h2 id="8：开启-NameNode-和DataNode"><a href="#8：开启-NameNode-和DataNode" class="headerlink" title="8：开启 NameNode 和DataNode"></a>8：开启 <code>NameNode</code> 和<code>DataNode</code></h2><pre class=" language-xshell"><code class="language-xshell">./sbin/start-dfs.sh</code></pre><h2 id="9：关闭-NameNode和DataNode"><a href="#9：关闭-NameNode和DataNode" class="headerlink" title="9：关闭 NameNode和DataNode"></a>9：关闭 <code>NameNode</code>和<code>DataNode</code></h2><pre class=" language-xshell"><code class="language-xshell">./sbin/stop-dfs.sh</code></pre><h2 id="10：启动-YARN"><a href="#10：启动-YARN" class="headerlink" title="10：启动 YARN"></a>10：启动 <code>YARN</code></h2><pre class=" language-xshell"><code class="language-xshell">./sbin/start-yarn.sh</code></pre><h2 id="11：关闭-YARN"><a href="#11：关闭-YARN" class="headerlink" title="11：关闭 YARN"></a>11：关闭 <code>YARN</code></h2><pre class=" language-xshell"><code class="language-xshell">./sbin/stop-yarn.sh</code></pre><ul><li>(可以使用<code>jps</code> 命令查看启动的进程)</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 伪分布安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_基于ZK的高可用集群安装</title>
      <link href="/2020/11/15/hadoop-ji-yu-zk-de-gao-ke-yong-ji-qun-an-zhuang/"/>
      <url>/2020/11/15/hadoop-ji-yu-zk-de-gao-ke-yong-ji-qun-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-基于-ZK-的高可用集群安装"><a href="#Hadoop-基于-ZK-的高可用集群安装" class="headerlink" title="Hadoop 基于 ZK 的高可用集群安装"></a><code>Hadoop</code> 基于 <code>ZK</code> 的高可用集群安装</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>1、安装 <code>ZooKeeper</code> 配置注意事项</strong> </p><ul><li>1、新建 <code>data</code> 文件夹，注意这个文件夹的权限。</li><li>2、新建文件 <code>myid</code> ,注意这个文件的权限。</li><li>3、要分别向 <code>myid</code> 写入1,2,3。</li></ul><p><strong>2、修改了 <code>hosts</code> 主机名后，各个主机需要再次执行</strong></p><pre class=" language-xshell"><code class="language-xshell">ssh masterssh worker_01ssh worker_02</code></pre><p><strong>3、第一次启动的时候，需要格式化，第二次在启动的时候就不需要在格式化了，但 <code>worker03</code> 上的 <code>ResourceManager</code> 启动不起来，要单独启动。</strong></p><p><strong>4、从新修改了 <code>Hadopp</code> 集群的配置文件后，不需要从新在格式化<code>NameNode</code> 。</strong></p><p><strong>5、<code>Namenode</code> 主备切换不成功的原因</strong><br>（两者修改其中一项即可）</p><ul><li>1：没有安装：<code>psmisc</code>.</li><li>2：配置里没有配：<code>shell(/bin/true)××</code></li></ul><p><strong>6、<code>hadoop version</code> 不显示</strong></p><ul><li>6.1、在配置文件里<code>vim  /etc/profile</code> 里加</li></ul><pre class=" language-config"><code class="language-config">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</code></pre><ul><li>6.2、配置生效：</li></ul><pre class=" language-xshell"><code class="language-xshell">source /etc/profile</code></pre><p><strong>7、WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable</strong></p><ul><li>7.1、下载：<code>hadoop-native-64-2.*.0.tar</code>。</li><li>7.2、执行</li></ul><pre class=" language-xshell"><code class="language-xshell">tar -xvf hadoop-native-64-2.7.0.tar -C $HADOOP_HOME/lib</code></pre><ul><li>7.3、添加环境变量：<code>vim /etc/profile</code></li></ul><pre class=" language-config"><code class="language-config">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"</code></pre><ul><li>7.4、配置生效：</li></ul><pre class=" language-xshell"><code class="language-xshell">source /etc/profile</code></pre><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><strong>首先准备需要的软件：（最好注意一下版本）。</strong></p><ul><li>JDK （1.8）</li><li>ZooKeeper（3.4.6）</li><li>Hadoop（2.7.2）</li></ul><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p><strong>准备硬件。</strong></p><ul><li>这里准备三台计算机，分别是 <code>master</code>，<code>worker01</code>，<code>worker02</code>。</li><li><code>master</code> 和 <code>worker01</code> 做 <code>NameNode</code>主备。</li><li><code>worker01</code> 和 <code>worker02</code> 做 <code>ResourceManager</code>主备。</li></ul><h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p><strong>确定安装顺序</strong></p><p>(首次安装，请严格按照顺序来执行)</p><p><strong>root 用户下执行</strong></p><ul><li>修改 <code>host</code></li><li>关闭防火墙</li><li>上传文件</li><li>JDK安装</li></ul><p><strong>新建 <code>hadoop</code>用户，并赋值 <code>root</code> 权限</strong></p><p><strong><code>hadoop</code> 用户执行</strong></p><ul><li>免密登录（本机和各个服务器之间）</li><li>安装 <code>zookeeper</code> 并配置</li><li>安装 <code>hadoop</code> 集群并配置</li></ul><p><strong>在进行安装和配置的时候，一定要注意用户，以及权限，尤其新建文件夹和新建文件操作</strong></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p><strong>JDK安装和配置</strong></p><p><strong>（三台机器都要这样操作）</strong></p><ul><li>1：上传文件到指定位置。</li><li>2：解压。</li><li>3：修改系统配置（<code>vim /etc/profile</code>）。</li></ul><pre class=" language-config"><code class="language-config">    export JAVA_HOME=/home/JDK/jdk1.8.0_191    export JRE_HOME=${JAVA_HOME}/jre    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH    export JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin</code></pre><ul><li>4：配置生效 <code>source /etc/profile</code>。</li><li>5：验证 <code>java -version</code>。</li></ul><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p><strong>ZooKeeper 安装和配置</strong></p><p><strong>（三台机器都要这样操作）</strong></p><ul><li>1：上传文件到指定目录。</li><li>2：解压。</li><li>3：在 <code>zookeeper</code> 目录下新建 <code>data</code> 文件夹。</li><li>4：<code>conf</code> 目录下 <code>zoo_sample.cfg</code>重名为 <code>zoo.cfg</code>，添加如下配置。</li></ul><pre class=" language-config"><code class="language-config">    tickTime=2000    initLimit=10    syncLimit=5    dataDir=/usr/local/zookeeper/data/    dataLogDir=/usr/local/zookeeper/log/    clientPort=2181    # server.1 这个1是服务器的标识，可以是任意有效数字，标识这是第几个服务器节点，这个标识要写到dataDir目录下面myid文件里    # 指名集群间通讯端口和选举端口    server.1=master:2287:3387    server.2=worker01:2287:3387    server.3=worker02:2287:3387</code></pre><ul><li>5：进入<code>data</code> 目录，新建文件 <code>myid</code>（<code>touch myid</code>）。</li><li>6：在 <code>master</code> 机器上执行 <code>echo 1 &gt; myid</code> 。</li><li>7：在 <code>worker01</code> 机器上执行 <code>echo 2 &gt; myid</code> 。</li><li>8：在 <code>worker02</code> 机器上执行 <code>echo 3 &gt; myid</code> 。</li></ul><p>(<code>myid</code> 的大小是两个字节【也就是只有一个数字；不要有空格】{查看方法就是vi进去以后光标闪烁是在 <code>1</code> 上，并且移动光标移动不了)。</p><ul><li>9：配置环境变量。</li></ul><pre class=" language-config"><code class="language-config">    export ZOOKEEPER_HOME=/home/ZK/zookeeper    export PATH=$PATH:${ZOOKEEPER_HOME}/bin</code></pre><ul><li>10：配置项生效 <code>source /etc/profile</code> 。</li><li>11：启动 <code>ZK zkServer.sh start</code>。</li><li>12：查看状态 <code>zkServer.sh status</code> 。</li></ul><p>(如果启动出错，注意查看启动日志，问题就一目了然了)</p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p><strong>Hadoop安装和配置</strong></p><p><strong>（三台机器都要这样操作）</strong></p><ul><li>1：上传文件到指定的位置。</li><li>2：解压。</li><li>3：配置环境变量。</li></ul><pre class=" language-config"><code class="language-config">    export HADOOP_HOME=/home/HA/hadoop    export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native    export HADOOP_PATH=${HADOOP_HOME}/bin:${HADOOP_HOME}/sbin    export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"    export PATH=$PATH:${HADOOP_PATH}</code></pre><ul><li>4：环境变量生效  <code>source /etc/profile</code>。</li><li>5：Hadoop集群配置。<ol><li><code>hadoop-evn.sh</code>。</li><li><code>core-site.xml</code>。</li><li><code>hdfs-site.xml</code>。</li><li><code>yarn-site.xml</code>。</li><li><code>mapred-site.xml</code>。</li><li><code>slaves</code>。</li></ol></li><li>5.1、<code>hadoop-env.sh</code>。</li></ul><pre class=" language-config"><code class="language-config">export JAVA_HOME=/home/JDK/jdk1.8.0_191</code></pre><ul><li>5.2、<code>core-site.xml</code>。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 指定 namenode 的 hdfs 协议文件系统的通信地址 和hdfs-site.xml 里的配置value相同--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/home/HA/hadoop/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:2181,worker01:2181,worker02:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.session-timeout.ms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li>5.3、<code>hdfs-site.xml</code>。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/home/HA/hadoop/tmp/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/home/HA/hadoop/tmp/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指定 namenode 的 hdfs 协议文件系统的通信地址 和hdfs-site.xml 里的配置value相同--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.namenodes.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>nn1,nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>worker01:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>worker01:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>qjournal://master:8485;worker01:8485;worker02:8485/mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/HA/hadoop/journalnode/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>sshfence        shell(/bin/true)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/hadoop/.ssh/id_rsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.connect-timeout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>30000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.failover.proxy.provider.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li>5.4、<code>yarn-site.xml</code>。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>86400<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.cluster-id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.rm-ids<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rm1,rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>worker01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>worker02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>worker01:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>worker02:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.zk-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:2181,worker01:2181,worker02:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.recovery.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.store.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li>5.5、<code>mapred-site.xml</code>。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li>5.6、<code>slaves</code>。</li></ul><pre><code>masterworker01worker02</code></pre><ul><li>配置所有从属节点的主机名或 <code>IP</code> 地址，每行一个。所有从属节点上的 <code>DataNode</code>服务和 <code>NodeManager</code> 服务都会被启动。</li><li>注意不要有空格。</li></ul><h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><p><strong>配置压缩包</strong></p><p><strong>（三台机器都要这样操作）</strong></p><p>把<code>hadoop-native-64-2.7.0.tar</code> 解压到 <code>hadoop-2.7.2/lib/native</code> 和 <code>hadoop-2.7.2/lib</code> 目录下。</p><p>（之前搭建伪分布式的时候，出现不能加载本地库的情况，这里在这里就直接把这一步给用上了，这里也可以不先这样操作，加载有问题后，在处理也一样。）</p><p>这里还有一步操作，那就是配置文件 <code>etc/profile</code> 里加：</p><pre class=" language-config"><code class="language-config">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"</code></pre><h3 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h3><p><strong>第一次启动</strong></p><ul><li>1、启动 <code>ZooKeeper</code>。</li></ul><p>（三台机器都要启动）</p><pre class=" language-xshell"><code class="language-xshell">zkServer.sh start</code></pre><ul><li><p>2、启动 <code>Journalnode</code>。</p><p>（三台机器都要启动）</p></li></ul><pre class=" language-xshell"><code class="language-xshell">hadoop-daemon.sh start journalnode</code></pre><ul><li><p>3、初始化 <code>NameNode</code>。</p><p>（<code>master</code>上操作）</p></li></ul><pre class=" language-xshell"><code class="language-xshell"> hdfs namenode -format</code></pre><ul><li>4、初始化之后。</li></ul><p>（执行初始化命令后，需要将 <code>NameNode</code> 元数据目录的内容，复制到其他未格式化的 <code>NameNode</code> 上。元数据存储目录就是我们在 <code>hdfs-site.xml</code> 中使用 <code>dfs.namenode.name.dir</code> 属性指定的目录。）</p><pre class=" language-xshell"><code class="language-xshell">scp -r /home/hadoop/namenode/data worker01:/home/hadoop/namenode/</code></pre><ul><li>5、初始化<code>HA</code>状态。</li></ul><p>（任意一台机器）</p><pre class=" language-xshell"><code class="language-xshell">hdfs zkfc -formatZK</code></pre><p>（在任意一台 <code>NameNode</code> 上使用以下命令来初始化 <code>ZooKeeper</code> 中的 <code>HA</code> 状态）</p><ul><li><p>6、启动 <code>HDFS</code>。</p><p>（<code>master</code>上操作）</p></li></ul><pre class=" language-xshell"><code class="language-xshell"> start-dfs.sh</code></pre><ul><li><p>7、启动 <code>YARN</code>。</p><p>（<code>worker01</code>上操作）</p></li></ul><pre class=" language-xshell"><code class="language-xshell"> start-yarn.sh</code></pre><p>（需要注意的是，这个时候 <code>worker02</code> 上的 <code>ResourceManager</code> 服务通常是没有启动的，需要手动启动）</p><pre class=" language-xshell"><code class="language-xshell">yarn-daemon.sh start resourcemanager</code></pre><h3 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h3><p><strong>第二次启动</strong></p><ul><li>1、启动 <code>ZooKeeper</code> 。</li></ul><p>（三台机器都要启动）</p><pre class=" language-xshell"><code class="language-xshell">zkServer.sh start </code></pre><ul><li>2、<code>master</code>上启动 <code>HDFS</code>。</li></ul><pre class=" language-xshell"><code class="language-xshell"> start-dfs.sh</code></pre><ul><li>3、<code>worker01</code> 上启动 <code>YARN</code>。</li></ul><pre class=" language-xshell"><code class="language-xshell"> start-yarn.sh</code></pre><ul><li>4、<code>worker02</code> 上启动 <code>ResourceManager</code>。</li></ul><pre class=" language-xshell"><code class="language-xshell"> yarn-daemon.sh start resourcemanager</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基于ZK的高可用伪分布式安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_常见错误</title>
      <link href="/2020/11/15/hadoop-chang-jian-cuo-wu/"/>
      <url>/2020/11/15/hadoop-chang-jian-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop常见错误"><a href="#Hadoop常见错误" class="headerlink" title="Hadoop常见错误"></a>Hadoop常见错误</h1><h2 id="1：安装Hadoop集群配置注意事项"><a href="#1：安装Hadoop集群配置注意事项" class="headerlink" title="1：安装Hadoop集群配置注意事项"></a>1：安装<code>Hadoop</code>集群配置注意事项</h2><ul><li>配置<code>hosts</code>的时候注意主机名，不能使用带下划线的主机名。例如：<code>worker_01</code>，不能这样配置，要用<code>worker01</code>。配置<code>worker_01</code>，<code>Hadoop</code>集群会解析不到。</li><li>初次启动的时候应该严格按照启动顺序来进行。初次启动的启动顺序为：</li></ul><p>1、启动<code>ZK</code></p><pre class=" language-xshell"><code class="language-xshell">zkServer.sh start</code></pre><p>2、启动<code>Journalnode</code></p><pre class=" language-xshell"><code class="language-xshell">hadoop-daemon.sh start journalnode</code></pre><p>3、格式化<code>HDFS</code></p><pre class=" language-xshell"><code class="language-xshell">hdfs namenode -format</code></pre><ul><li>（在<code>Master</code>上格式化，格式化成功后需要将 <code>NameNode</code> 元数据目录的内容，复制到其他未格式化的 <code>NameNode</code> 上。元数据存储目录就是我们在 <code>hdfs-site.xml</code> 中使用 <code>dfs.namenode.name.dir</code> 属性指定的目录。）</li></ul><pre class=" language-xshell"><code class="language-xshell">scp -r /home/hadoop/namenode/data worker01:/home/hadoop/namenode/</code></pre><p>4、格式化<code>ZKFC</code></p><pre class=" language-xshell"><code class="language-xshell">hdfs zkfc -formatZK</code></pre><p>5、启动<code>HDFS</code></p><pre class=" language-xshell"><code class="language-xshell">start-dfs.sh</code></pre><p>6、启动<code>YARN</code></p><pre class=" language-xshell"><code class="language-xshell">start-yarn.sh</code></pre><ul><li>（一般情况下<code>worker03</code> 上的<code>ResourceManager</code>启动不起来，需要单独启动）</li></ul><pre class=" language-xshell"><code class="language-xshell">yarn-daemon.sh start resourcemanager</code></pre><h2 id="2：Hadoop-集群部署在了Linux虚拟机上，然后在Win上编程测试。"><a href="#2：Hadoop-集群部署在了Linux虚拟机上，然后在Win上编程测试。" class="headerlink" title="2：Hadoop 集群部署在了Linux虚拟机上，然后在Win上编程测试。"></a>2：<code>Hadoop</code> 集群部署在了<code>Linux</code>虚拟机上，然后在<code>Win</code>上编程测试。</h2><p><strong>2.1、（出现连接不成功的问题）(<code>192.168.48.129</code>) 是虚拟机的<code>IP</code>。</strong></p><p><strong>解决：</strong></p><ul><li>1：代码里</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HDFS_PATH <span class="token operator">=</span> <span class="token string">"hdfs://192.168.48.129:9000"</span><span class="token punctuation">;</span></code></pre><p>写成<code>IP</code>地址和端口的形式。</p><ul><li>2：配置 <code>core-site.xml</code> 里也配置成IP和端口的形式。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://192.168.48.129:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常见错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_YARN</title>
      <link href="/2020/11/15/hadoop-yarn/"/>
      <url>/2020/11/15/hadoop-yarn/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-YARN"><a href="#Hadoop-YARN" class="headerlink" title="Hadoop_YARN"></a>Hadoop_YARN</h1><h2 id="YARN主要架构"><a href="#YARN主要架构" class="headerlink" title="YARN主要架构"></a>YARN主要架构</h2><p><img src="/2020/11/15/hadoop-yarn/20201005170226359_14277.png" alt="yarn主要架构"></p><h3 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h3><p>集群资源的协调者和管理者，负责给用户提交的所有程序分配资源。</p><h3 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a>NodeManager</h3><p>集群具体资源的管理者，负责节点内所有容器的生命周期的管理，资源监控。</p><p><strong>具体：</strong></p><ul><li>启动时向 <code>ResourceManager</code> 注册并定时发送心跳消息，等待 <code>ResourceManager</code> 的指令；</li><li>维护 <code>Container</code> 的生命周期，监控 <code>Container</code> 的资源使用情况；</li><li>管理任务运行时的相关依赖，根据 <code>ApplicationMaster</code> 的需要，在启动 <code>Container</code> 之前将需要的程序及其依赖拷贝到本地。</li></ul><h3 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a>ApplicationMaster</h3><p>负责协调来自<code>ResourceManager</code>的资源，并通过 <code>NodeManager</code> 监视容器内资源的使用情况，同时还负责任务的监控与容错。</p><p><strong>具体：</strong></p><ul><li>根据应用的运行状态来决定动态计算资源需求；</li><li>向 <code>ResourceManager</code> 申请资源，监控申请的资源的使用情况；</li><li>跟踪任务状态和进度，报告资源的使用情况和应用的进度信息；</li><li>负责任务的容错。</li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p><code>YARN</code>资源的抽象，<code>YARN</code> 会为每个任务分配一个 <code>Container</code>，该任务只能使用该 <code>Container</code> 中描述的资源。<code>ApplicationMaster</code> 可在 <code>Container</code> 内运行任何类型的任务。</p><h3 id="YARN工作原理图"><a href="#YARN工作原理图" class="headerlink" title="YARN工作原理图"></a>YARN工作原理图</h3><blockquote><p>说明：一下内容引入：<a href="https://github.com/heibaiying/BigData-Notes" target="_blank" rel="noopener">BigData-Notes</a></p></blockquote><p><img src="/2020/11/15/hadoop-yarn/20201005171444074_15239.png" alt="yarn工作原理图"></p><ol><li><code>Client</code> 提交作业到 YARN 上；</li><li><code>Resource Manager</code> 选择一个 <code>Node Manager</code>，启动一个 <code>Container</code> 并运行 <code>Application Master</code> 实例；</li><li><code>Application Master</code> 根据实际需要向 <code>Resource Manager</code> 请求更多的 <code>Container</code> 资源（如果作业很小, 应用管理器会选择在其自己的 JVM 中运行任务）；</li><li><code>Application Master</code> 通过获取到的 <code>Container</code> 资源执行分布式计算。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YARN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_MapReduce</title>
      <link href="/2020/11/15/hadoop-mapreduce/"/>
      <url>/2020/11/15/hadoop-mapreduce/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-MapReduce"><a href="#Hadoop-MapReduce" class="headerlink" title="Hadoop_MapReduce"></a>Hadoop_MapReduce</h1><h2 id="理解MapReduce"><a href="#理解MapReduce" class="headerlink" title="理解MapReduce"></a>理解MapReduce</h2><ul><li><code>Mapping</code>: 对集合里的每个目标应用同一个操作。</li><li><code>Reducing</code>：遍历集合中的元素来返回一个综合的结果。</li><li>计算框架</li></ul><p><img src="/2020/11/15/hadoop-mapreduce/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BigDataNotes/Hadoop/_v_images/20201006092421468_32521.png" alt="计算框架"></p><ul><li>计算模型</li></ul><p>在运行一个<code>MapReduce</code>计算任务时候，任务过程被分为两个阶段：<code>Map</code>阶段和<code>Reduce</code>阶段，每个阶段都是用键值对（<code>key/value</code>）作为输入（<code>Input</code>）和输出（<code>Output</code>）。而程序员要做的就是定义好这两个阶段的函数：<code>Map</code>函数和<code>Reduce</code>函数。</p><h2 id="MapReduce运行机制"><a href="#MapReduce运行机制" class="headerlink" title="MapReduce运行机制"></a>MapReduce运行机制</h2><h3 id="角色职责"><a href="#角色职责" class="headerlink" title="角色职责"></a>角色职责</h3><p><strong>1：程序运行时过程设计到的一个角色实体</strong></p><p>1.1. <code>Client</code>：编写<code>mapreduce</code>程序，配置作业，提交作业的客户端 ；</p><p>1.2. <code>ResourceManager</code>：集群中的资源分配管理 ；</p><p>1.3. <code>NodeManager</code>：启动和监管各自节点上的计算资源 ；</p><p>1.4. <code>ApplicationMaster</code>：每个程序对应一个<code>AM</code>，负责程序的任务调度，本身也是运行在<code>NM</code>的<code>Container</code>中 ；</p><p>1.5.<code>HDFS</code>：分布式文件系统，保存作业的数据、配置信息等等。</p><p><strong>2：客户端提交Job</strong></p><p>2.1. 客户端编写好<code>Job</code>后，调用<code>Job</code>实例的<code>Submit()</code>或者<code>waitForCompletion()</code>方法提交作业；</p><p>2.2. 客户端向<code>ResourceManager</code>请求分配一个<code>Application ID</code>，客户端会对程序的输出、输入路径进行检查，如果没有问题，进行作业输入分片的计算。</p><p><strong>3：Job提交到ResourceManager</strong></p><p>3.1. 将作业运行所需要的资源拷贝到<code>HDFS</code>中（jar包、配置文件和计算出来的输入分片信息等）；</p><p>3.2. 调用<code>ResourceManager</code>的<code>submitApplication</code>方法将作业提交到<code>ResourceManager</code>。</p><p><strong>4：给作业分配ApplicationMaster</strong></p><p>4.1. <code>ResourceManager</code>收到<code>submitApplication</code>方法的调用之后会命令一个<code>NodeManager</code>启动一个<code>Container</code> ；</p><p>4.2. 在该<code>NodeManager</code>的<code>Container</code>上启动管理该作业的<code>ApplicationMaster</code>进程。</p><p><strong>5：ApplicationMaster初始化作业</strong></p><p>5.1. <code>ApplicationMaste</code>对作业进行初始化操作；</p><p>5.2. <code>ApplicationMaster</code>从<code>HDFS</code>中获得输入分片信息(<code>map</code>、<code>reduce</code>任务数)</p><p><strong>6：任务分配</strong></p><p>6.1. <code>ApplicationMaster</code>为其每个<code>map</code>和<code>reduce</code>任务向<code>RM</code>请求计算资源；<br>6.2. <code>map</code>任务优先于<code>reduce</code>任，<code>map</code>数据优先考虑本地化的数据。</p><p><strong>7：任务执行</strong></p><p>7.1. 在<code>Container</code> 上启动任务（通过<code>YarnChild</code>进程来运行），执行<code>map/reduce</code>任务。</p><h3 id="MapReduce-执行过程"><a href="#MapReduce-执行过程" class="headerlink" title="MapReduce 执行过程"></a>MapReduce 执行过程</h3><p><strong>1：输入分片（Input Split）</strong><br>(一个<code>Input Split</code> 对应一个<code>Map</code>)</p><p>1.1. 一个大的文件会根据<code>Block</code>块切分成多个分片，每个输入分片会让一个<code>Map</code>任务来处理（默认情况下，<code>HDFS</code>的块为128M作为一个分片）。</p><p>1.2. 例如一个300MB的文件就会被切分问3个分片（<code>128MB InputSplit</code>、<code>128MB InputSplit</code>、<code>44MB InputSplit</code>），交给三个<code>Map</code>任务去处理。</p><p><strong>2：Map任务阶段：由我们自己编写，最后调用 context.write(…)；</strong><br>(一个<code>Map</code> 对应一个内存缓存区)</p><p>2.1. <code>Map</code>输出的结果会暂且放在一个环形内存缓冲区中（默认<code>mapreduce.task.io.sort.mb=100M</code>）,当该缓冲区快要溢出时（默认<code>mapreduce.map.sort.spill.percent=0.8</code>）,会在本地文件系统中创建一个溢出文件，将该缓冲区中的数据写入这个文件；</p><p><strong>3：Partition分区阶段</strong><br>(一个<code>Partition</code>分区对应一个<code>Reduce</code>任务)</p><p>3.1. 在<code>Map</code>中调用 <code>context.write(k2,v2)</code>方法输出<code>&lt;k2,v2&gt;</code>，该方法会立刻调用<code>Partitioner</code>类对数据进行分区，一个分区对应一个 <code>Reduce Task</code>。</p><p>3.2. 默认的分区实现类是 <code>HashPartitioner</code> ，根据k2的哈希值<code>% numReduceTasks</code>，可能出现“数据倾斜”现象。</p><p>3.3. 可以自定义<code>Partition</code> ，调用<code>job.setPartitioner(…)</code>自己定义分区函数。</p><p><strong>4：Combiner合并阶段：将属于同一个Reduce处理的输出结果进行合并操作</strong></p><p>4.1. 是可选的；</p><p>4.2. 目的有三个：1.减少<code>Key-Value</code>对；2.减少网络传输；3.减少<code>Reduce</code>的处理。</p><p><strong>5：<code>Shuffle</code>阶段：即<code>Map和Reduce</code>中间的这个过程</strong></p><p>5.1. 首先<code>Map</code>在做输出时候会在内存里开启一个环形内存缓冲区，专门用来做输出，同时<code>Map</code>还会启动一个守护线程；</p><p>5.2. 如缓冲区的内存达到了阈值的80%，守护线程就会把内容写到磁盘上，这个过程叫<code>Spill</code>，另外的20%内存可以继续写入要写进磁盘的数据；</p><p>5.3. 写入磁盘和写入内存操作是互不干扰的，如果缓存区被撑满了，那么<code>Map</code>就会阻塞写入内存的操作，让写入磁盘操作完成后再继续执行写入内存操作;</p><p>5.4. 写入磁盘时会有个排序操作，如果定义了<code>Combiner</code>函数，那么排序前还会执行<code>Combiner</code>操作；</p><p>5.5. 每次<code>Spill</code>操作也就是写入磁盘操作时候就会写一个溢出文件，也就是说在做<code>Map</code>输出有几次<code>Spill</code>就会产生多少个溢出文件，等<code>Map</code>输出全部做完后，<code>Map</code>会合并这些输出文件，这个过程里还会有一个<code>Partitioner</code>操作（如上）</p><p>5.6. 最后 <code>Reduce</code> 就是合并<code>Map</code>输出文件，<code>Partitioner</code>会找到对应的<code>Map</code>输出文件，然后进行复制操作，复制操作时<code>Reduce</code>会开启几个复制线程，这些线程默认个数是5个（可修改），这个复制过程和<code>Map</code>写入磁盘过程类似，也有阈值和内存大小，阈值一样可以在配置文件里配置，而内存大小是直接使用<code>Reduce</code>的<code>Tasktracker</code>的内存大小，复制时候<code>Reduce</code>还会进行排序操作和合并文件操作，这些操作完了就会进行<code>Reduce</code>计算了。</p><p><strong>6：Reduce阶段：</strong><br>由我们自己编写，最终结果存储在hdfs上的,一个<code>Reduce</code>对应一个输出文件。</p><ul><li>整个过程<br><img src="/2020/11/15/hadoop-mapreduce/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BigDataNotes/Hadoop/_v_images/20201006101106334_25594.png" alt="01"></li><li>Spill 过程</li></ul><p><img src="/2020/11/15/hadoop-mapreduce/%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BigDataNotes/Hadoop/_v_images/20201006101215231_10886.png" alt="02"></p><blockquote><p>参考内容：<a href="https://blog.xiaoxiaomo.com/2016/07/03/Hadoop-MapReduce详解/" target="_blank" rel="noopener">Hadoop–MapReduce详解</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_HDFS</title>
      <link href="/2020/11/15/hadoop-hdfs/"/>
      <url>/2020/11/15/hadoop-hdfs/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop基础"><a href="#Hadoop基础" class="headerlink" title="Hadoop基础"></a>Hadoop基础</h1><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p><code>Hadoop</code>主要分为三大模块，分别是 <code>HDFS</code>（文件分布系统）， <code>MapReduce</code>（分布式计算框架），<code>YARN</code>（资源调度管理）。</p><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><h4 id="HDFS的组成"><a href="#HDFS的组成" class="headerlink" title="HDFS的组成"></a>HDFS的组成</h4><p><img src="/2020/11/15/hadoop-hdfs/20201005110319144_22561.png" alt="HDFS的组成"></p><h5 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h5><p><strong>主要作用</strong></p><ul><li>存储数据</li></ul><p>存储对应的元数据，其中元数据包括：目录结构树，文件，数据块和副本的映射关系（不是数据信息，是映射关系）</p><ul><li>存储位置</li></ul><p>内存和磁盘</p><p><strong>包含的文件</strong></p><ul><li><code>fsimage</code>：元数据镜像文件，存储某一时段<code>NameNode</code>内存元数据信息即保存了最新的元数- 据<code>checkpoint</code>。</li><li><code>edits</code>：操作日志文件。</li><li><code>fstime</code>：保存最近一次<code>checkpoint</code>的时间。</li></ul><p>1、<code>NameNode</code> 为了保证交互速度，会在内存中保存这些元数据信息，但同时也会将这些信息保存到硬盘上进行持久化存储；</p><p>2、<code>fsimage</code>文件是内存中的元数据在硬盘上的<code>checkpoint</code>，它是一种序列化的格式，不能直接修改。</p><p>3、<code>Hadoop</code>在重启时就是通过<code>fsimage+edits</code>来状态恢复，<code>fsimage</code>相当于一个<code>checkpoint</code>，首先将最新的<code>checkpoint</code>的元数据信息从<code>fsimage</code>中加载到内存，然后逐一执行<code>edits</code>修改日志文件中的操作以恢复到重启之前的最终状态。</p><p>4、<code>Hadoop</code>的持久化过程是将上一次<code>checkpoint</code>以后最近一段时间的操作保存到修改日志文件<code>edits</code>中。</p><h5 id="SecondaryNameNode"><a href="#SecondaryNameNode" class="headerlink" title="SecondaryNameNode"></a>SecondaryNameNode</h5><ul><li>主要作用</li></ul><p>作为<code>NameNode</code>的冷备份；合并<code>fsimage</code>（元数据镜像文件（文件系统的目录树））和<code>fsedits</code>然后再发给<code>Namenode</code>,分担<code>NameNode</code>的一部分工作。</p><p>1、<code>edits</code>：元数据的操作日志（针对文件系统做的修改操作记录）</p><p>2、<code>Namenode</code>内存中存储的是<code>fsimage+edits</code>。</p><p><img src="/2020/11/15/hadoop-hdfs/20201006062120054_19202.png" alt="操作方式"></p><ul><li><code>SecondaryNameNode</code>节点 的主要功能是周期性将元数据节点的命名空间镜像文件（<code>fsimage</code>）和修改日志（<code>edits</code>）进行合并，以防edits日志文件过大。下面来看一看合并的流程：</li></ul><p>1、<code>SecondaryNameNode</code>节点 需要合并时，首先通知<code>NameNode</code>节点生成新的日志文件，以后的日志都写到新的日志文件中。</p><p>2、<code>SecondaryNameNode</code>节点 用<code>http get</code>从<code>NameNode</code>节点获得<code>fsimage</code>文件及旧的<code>edits</code>日志文件。</p><p>3、<code>SecondaryNameNode</code>节点 将 <code>fsimage</code> 文件加载到内存中，并执行日志文件中的操作，然后生成新的<code>fsimage</code>文件。</p><p>4、<code>SecondaryNameNode</code>节点将新的<code>fsimage</code>文件用<code>http post</code>传回<code>NameNode</code>节点上。</p><p>5、<code>NameNode</code> 节点可以将旧的<code>fsimage</code>文件及旧的日志文件，换为新的<code>fsimage</code>文件和新的日志文件(第一步生成的)，然后更新<code>fstime</code>文件，写入此次<code>checkpoint</code>的时间。</p><p>6、这样<code>NameNode</code> 节点中的<code>fsimage</code>文件保存了最新的<code>checkpoint</code>的元数据信息，日志文件也重新开始，不会变的很大了。</p><ul><li>注意：</li></ul><p>1、这种机制有个问题：因<code>edits</code>存放在<code>NameNode</code>中，当<code>NameNode</code>挂掉，<code>edits</code>也会丢失，导致利用<code>Secondary NameNode</code>恢复<code>Namenode</code>时，会有部分数据丢失。</p><p>2、<code>HDFS</code>设置了两种机制进行条件合并（<code>hdfs-site.xml</code>）：</p><p>第一种：当时间间隔大于或者等于<code>dfs.namenode.checkpoint.period</code>配置的时间是做合并（默认一小时）。</p><p>第二种：当最后一次往<code>journalNode</code>写入的<code>TxId</code>（这个可以在<code>Namenode</code>日志或者50070界面可以看到）和最近一次做<code>checkpoint</code>的<code>TxId</code>的差值大于或者等于<code>dfs.namenode.checkpoint.txns</code>配置的数量（默认1000000）时做一次合并。</p><p><img src="/2020/11/15/hadoop-hdfs/20201006062357840_22090.png" alt="配置"></p><blockquote><p>引用的博客：<a href="https://blog.xiaoxiaomo.com/2016/06/25/Hadoop-HDFS之NameNode/" target="_blank" rel="noopener">参考资料</a></p></blockquote><h5 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h5><ul><li>主要作用</li></ul><p>主要负责存储对应的文件（这里的文件是对应的数据块，<code>Hadoop2.x</code>以后默认大小为128M），备份对应的文件（副本数目可在配置里设置<code>dfs.replication</code>）。</p><h4 id="HDFS的优点和缺点"><a href="#HDFS的优点和缺点" class="headerlink" title="HDFS的优点和缺点"></a>HDFS的优点和缺点</h4><h5 id="HDFS优点"><a href="#HDFS优点" class="headerlink" title="HDFS优点"></a>HDFS优点</h5><p>1、可构建在廉价机器上。</p><p>2、高容错性。</p><p>3、适合批处理。</p><p>4、适合大数据处理。</p><p>5、流式文件访问。</p><h5 id="HDFS缺点"><a href="#HDFS缺点" class="headerlink" title="HDFS缺点"></a>HDFS缺点</h5><p>1、低延迟数据访问。</p><p>2、小文件存取。</p><p>3、并发写入、文件随机修改。</p><p>*<em><code>HDFS</code>文件系统为什么不适用于存储小文件? *</em></p><p>这和<code>HDFS</code>系统底层设计实现有关系的，<code>HDFS</code>本身的设计就是用来解决海量大文件数据的存储。当数据被<code>HDFS</code>存储的时候，它会被切割成多个的独立的数据块，而这些数据块的信息会被存储在元数据中。如果文件越小，对应的元数据里内存空间就会被占用，从而造成性能上的浪费。</p><p><strong>如何解决？</strong></p><ul><li>1、采用<code>HAR</code>的归档方式。</li></ul><p><code>HAR</code>为构建在其它文件系统上用于文件存档的文件系统，通常将hdfs中的多个文件打包成一个存档文件，减少<code>Namenode</code>内存的使用，可以直接使用<code>hadoop archive</code>命令创建<code>HAR</code>文件。创建<code>HAR</code>的过程是在运行一个<code>mr</code>作业。</p><p><code>HAR</code>在对小文件进行存档后，原文件不会被删除，且创建之后不能改变，文件名中也不能有空格存在，否则会报异常</p><ul><li>2、采用<code>CombineFileInputFormat</code>。</li></ul><p><code>CombineFileInputFormat</code>是一种新的<code>inputformat</code>，用于将多个文件合成一个单独的split，而且它还可以考虑数据的存储位置。</p><ul><li>3、开启<code>JVM</code>重用。</li></ul><p><code>JVM</code>重用可以使得<code>JVM</code>实例在同一个<code>job</code>中重新使用N次，N的值可以在<code>hadoop的mapred-site.xml</code>文件中进行配置，通常在10-20之间。如果没有小文件，不要开启<code>JVM</code>重用，因为会一直占用使用到的<code>task</code>卡槽，直到任务完成才释放。</p><h4 id="HDFS的其它功能"><a href="#HDFS的其它功能" class="headerlink" title="HDFS的其它功能"></a>HDFS的其它功能</h4><h5 id="心跳机制和重新复制"><a href="#心跳机制和重新复制" class="headerlink" title="心跳机制和重新复制"></a>心跳机制和重新复制</h5><p>每个<code>DataNode</code> 定期向 <code>NameNode</code> 发送心跳消息，（<code>DataNode</code>向<code>NameNode</code>汇报的信息有2点，一个是自身<code>DataNode</code>的状态信息，另一个是自身<code>DataNode</code>所持有的所有的数据块的信息。）如果超过指定时间没有收到心跳消息，则将<code>DataNode</code> 标记为死亡。<code>NameNode</code> 不会将任何新的<code>IO</code> 请求转发给标记为死亡的<code>DataNode</code>，也不会再使用这些 <code>DataNode</code> 上的数据。 由于数据不再可用，可能会导致某些块的复制因子小于其指定值，<code>NameNode</code> 会跟踪这些块，并在必要的时候进行重新复制。</p><h5 id="副本放置策略"><a href="#副本放置策略" class="headerlink" title="副本放置策略"></a>副本放置策略</h5><p>第一副本：放置在上传文件的<code>DataNode</code>上；如果是集群外提交，则随机挑选一台磁盘不太慢、<code>CPU</code>不太忙的节点上；</p><p>第二副本：放置在于第一个副本不同的机架的节点上；</p><p>第三副本：与第二个副本相同机架的不同节点上；</p><p>如果还有更多的副本：随机放在节点中；</p><h4 id="HDFS的读写流程"><a href="#HDFS的读写流程" class="headerlink" title="HDFS的读写流程"></a>HDFS的读写流程</h4><h5 id="HDFS的写操作"><a href="#HDFS的写操作" class="headerlink" title="HDFS的写操作"></a>HDFS的写操作</h5><blockquote><p>说明：以下内容引入：<a href="https://blog.xiaoxiaomo.com/2016/06/26/Hadoop-HDFS之读写流程/" target="_blank" rel="noopener">Hadoop-HDFS之读写流程</a></p></blockquote><p><strong>准备工作</strong><br><img src="/2020/11/15/hadoop-hdfs/20201005150652629_14529.png" alt="HDFS写操作01"></p><p>1、<code>HDFS client</code>先会去询问<code>NameNode</code>，看哪些<code>DataNode</code>可以存储文件。文件的拆分是在<code>HDFS client</code>中完成的，比如拆分成<code>A</code>、<code>B</code>、<code>C</code>。</p><p>2、<code>NameNode</code>查看它的元数据信息，发现<code>DataNode 1</code>，<code>2</code>，<code>7</code>上有空间可以存储<code>Block A</code>，于是将此信息告诉<code>HDFS Client</code>。</p><p>3、<code>HDFS Client</code>接到<code>NameNode</code>返回的<code>DataNode</code>列表信息后，它会直接联系第一个<code>DataNode1</code>，让它准备好接收<code>Block A</code>（建立TCP连接）。</p><p>4、在<code>DataNode1</code>建立好<code>TCP</code>连接后它会把<code>HDFS Client</code>要写<code>Block A</code>的请求顺序传给<code>DataNode2</code>(在与<code>HDFS Client</code>建立好<code>TCP</code>连接后从<code>HDFS Client</code>获得的<code>DataNodel1</code>信息)，同理传递给<code>DataNode7</code>。</p><p>5、当<code>DataNode7</code>准备好后，会回传信息过来，<code>HDFS Client</code>接到信息后表示都准备好了，就可以写数据了。</p><p><strong>写入数据</strong><br><img src="/2020/11/15/hadoop-hdfs/20201005151000787_25320.png" alt="HDFS写数据02"></p><p>1、<code>HDFS Client</code>开始往<code>DataNode1</code>写入<code>Block A</code>数据。同准备工作一样，当<code>DataNode1</code>接收完<code>Block A</code>数据后，它会顺序将<code>Block A</code>数据传输给<code>ataNode2</code>，然后<code>DataNode2</code>再传输给<code>DataNode7</code>。</p><p>2、每个<code>DataNode</code>在接收完<code>Block A</code>数据后，会发消息给<code>NameNode</code>，告诉它<code>Block</code>数据已经接收完毕。</p><p>3、<code>NameNode</code>同时会根据它接收到的消息更新它保存的文件系统元数据信息。</p><p>4、当<code>Block A</code>成功写入3个<code>DataNode</code>之后，<code>DataNode1</code>会发送一个成功信息给<code>HDFS Client</code>，同时<code>HDFS Client</code>也会发一个<code>Block A</code>成功写入的信息给<code>NameNode</code>。之后，<code>HDFS Client</code>才能开始继续处理下一个<code>Block-Block B</code>。</p><h5 id="HDFS读数据操作"><a href="#HDFS读数据操作" class="headerlink" title="HDFS读数据操作"></a>HDFS读数据操作</h5><p><img src="/2020/11/15/hadoop-hdfs/20201005152719398_25675.png" alt="HDFS读取文件"></p><p>1、<code>HDFS Client</code>会先去联系<code>NameNode</code>，询问file.txt总共分为几个<code>Block</code>而且这些<code>Block</code>分别存放在哪些<code>DataNode</code>上。</p><p>2、由于每个<code>Block</code>都会存在几个副本，所以<code>NameNode</code>会把<code>file.txt</code>文件组成的<code>Block</code>所对应的所有<code>DataNode</code>列表都返回给<code>HDFS Client</code>。</p><p>3、然后<code>HDFS Client</code>会选择<code>DataNode</code>列表里的第一个<code>DataNode</code>去读取对应的<code>Block</code>。比如由于<code>Block A</code>存储在<code>DataNode1</code>，<code>2</code>，<code>7</code>，那么<code>HDFS Client</code>会到<code>DataNode1</code>去读取<code>Block A</code>；<code>Block C</code>存储在<code>DataNode7</code>，<code>8</code>，<code>9</code>，那么<code>HDFS Client</code>就回到<code>DataNode7</code>去读取<code>Block C</code>。</p><p><strong>补充</strong></p><h4 id="漫画详解HDFS的存储原理"><a href="#漫画详解HDFS的存储原理" class="headerlink" title="漫画详解HDFS的存储原理"></a>漫画详解HDFS的存储原理</h4><blockquote><p>说明：以下图片引用自博客：<a href="https://blog.csdn.net/hudiefenmu/article/details/37655491" target="_blank" rel="noopener">翻译经典 HDFS 原理讲解漫画</a></p></blockquote><h5 id="HDFS写数据原理"><a href="#HDFS写数据原理" class="headerlink" title="HDFS写数据原理"></a>HDFS写数据原理</h5><p><img src="/2020/11/15/hadoop-hdfs/20201005154307746_29899.png" alt="01"><br><img src="/2020/11/15/hadoop-hdfs/20201005154400343_2238.png" alt="02"><br><img src="/2020/11/15/hadoop-hdfs/20201005154419537_12863.png" alt="03"></p><h5 id="HDFS读数据原理"><a href="#HDFS读数据原理" class="headerlink" title="HDFS读数据原理"></a>HDFS读数据原理</h5><p><img src="/2020/11/15/hadoop-hdfs/20201005154514015_9371.png" alt="01"></p><h5 id="HDFS故障类型和其检测方法"><a href="#HDFS故障类型和其检测方法" class="headerlink" title="HDFS故障类型和其检测方法"></a>HDFS故障类型和其检测方法</h5><p><img src="/2020/11/15/hadoop-hdfs/20201005154611512_25627.png" alt="01"><br><img src="/2020/11/15/hadoop-hdfs/20201005154626986_30801.png" alt="02"></p><h6 id="读写故障的处理"><a href="#读写故障的处理" class="headerlink" title="读写故障的处理"></a>读写故障的处理</h6><p><img src="/2020/11/15/hadoop-hdfs/20201005154703957_16442.png" alt="01"></p><h6 id="DataNode-故障处理"><a href="#DataNode-故障处理" class="headerlink" title="DataNode 故障处理"></a>DataNode 故障处理</h6><p><img src="/2020/11/15/hadoop-hdfs/20201005154733471_9427.png" alt="01"></p><h6 id="副本布局策略"><a href="#副本布局策略" class="headerlink" title="副本布局策略"></a>副本布局策略</h6><p><img src="/2020/11/15/hadoop-hdfs/20201005154803522_9279.png" alt="01"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
